
var documents = [{
    "id": 0,
    "url": "https://usth-coders-club.github.io/404.html",
    "title": "404",
    "body": "404 Page does not exist!Please use the search bar at the top or visit our homepage! "
    }, {
    "id": 1,
    "url": "https://usth-coders-club.github.io/about",
    "title": "About us",
    "body": "              Ch√†o m·ª´ng m·ªçi ng∆∞·ªùi ƒë·∫øn v·ªõi UCC Blog:     Blog chia s·∫ª v·ªÅ l·∫≠p tr√¨nh.   C√¢u chuy·ªán v·ªÅ UCC Blog: T·ª´ ng√†y x·ª≠a ng√†y x∆∞a, c√°ch ƒë√¢y v√†i th√°ng, USTH Coder Club Blog (UCC Blog) ƒë√£ ƒë∆∞·ª£c l√™n k·∫ø ho·∫°ch v√† t·∫°o n√™n v·ªõi m·ª•c ti√™u:               H·ªçc t·∫≠p:     V·ªõi nh·ªØng b√†i blog s·∫Ω gi√∫p c√°c members trau d·ªìi, t√≠ch l≈©y ki·∫øn th·ª©c h·ªó tr·ª£ cho c√¥ng vi·ªác, h·ªçc t·∫≠p c·ªßa ch√∫ng ta sau n√†y.                 Chia s·∫ª:     Mang ƒë·∫øn cho member c·ªßa UCC n√≥i ri√™ng v√† b·∫°n ƒë·ªçc n√≥i chung nh·ªØng b√†i vi·∫øt v·ªÅ l·∫≠p tr√¨nh ch·∫•t l∆∞·ª£ng.                 Th·∫£o lu·∫≠n:     C√πng nhau trao ƒë·ªïi √Ω ki·∫øn, ph√¢n t√≠ch ƒë·ªÉ ph√°t tri·ªÉn √Ω t∆∞·ªüng c≈©ng nh∆∞ v·∫•n ƒë·ªÅ c·ªßa m·ªçi ng∆∞·ªùi. Ngo√†i ra c≈©ng l√† m·ªôt c√°ch ƒë·ªÉ t√¨m ki·∫øm ƒë·ªìng ƒë·ªôi c√πng chung ch√≠ h∆∞·ªõng.   B·ªüi. . . : UCC a. k. a CLB L·∫≠p tr√¨nh: UCC c√≥ ph·∫£i USTH Criminal Club (C√¢u l·∫°c b·ªô t·ªôi ph·∫°m) hay USTH C√¥ng Ch√∫a =)). . . . Kh√¥ng ch√∫ng t√¥i l√† USTH Coder Club t·ª©c C√¢u l·∫°c b·ªô l·∫≠p tr√¨nh c·ªßa tr∆∞·ªùng ƒë·∫°i h·ªçc Khoa h·ªçc v√† C√¥ng ngh·ªá H√† N·ªôi. V·ªõi gi√° tr·ªã c·ªët l√µi: S·ª± Chuy√™n nghi·ªáp, Bonding, S·ª± ƒê·ªïi m·ªõi. UCC mong mu·ªën t·∫°o n√™n m√¥i tr∆∞·ªùng l√†m vi·ªác Chuy√™n nghi·ªáp c√πng v·ªõi nh·ªØng leader c√≥ k·ªπ nƒÉng v√† kinh nghi·ªám nhi·ªÅu nƒÉm trong ng√†nh nh·∫±m n√¢ng cao kh·∫£ nƒÉng cho th√†nh vi√™n ph·ª•c v·ª• cho c√¥ng vi·ªác t∆∞∆°ng lai. ·ªû UCC ch√∫ng t√¥i quan t√¢m kh√¥ng ch·ªâ ƒë·∫øn t√†i nƒÉng m√† c√≤n c·∫£m x√∫c c≈©ng v·∫≠y. Sau nh·ªØng bu·ªïi trainning vui v·∫ª th√¨ l√† nh·ªØng bu·ªïi Bonding cƒÉng th·∫≥ng nh·∫±m g·∫Øn k·∫øt s·ª± ƒëo√†n k·∫øt cho c√¢u l·∫°c b·ªô. Kh√¥ng ng·ª´ng t√¨m ki·∫øm th·ª≠ th√°ch v·ªõi nh·ªØng d·ª± √°n ƒëi c√πng v·ªõi nh·ªØng c√¥ng ngh·ªá m·ªõi nh·∫•t c·ªßa th·ªùi ƒë·∫°i ƒë·ªÉ ƒê·ªïi m·ªõi v√† b·∫Øt k·ªãp v·ªõi th·∫ø gi·ªõi c≈©ng l√† m·ªôt gi√° tr·ªã kh√¥ng th·ªÉ thi·∫øu. Ch√∫ng t√¥i ƒë·∫øn t·ª´. . . : Th√†nh t√≠ch: ƒê√≥ng g√≥p cho trang web tr·ª±c tuy·∫øn v·ªÅ b·∫£o v·ªá tr·∫ª em c·ªßa VNCERT. V√†o nƒÉm 2021, UCC ƒë√£ tham gia s√°ng ki·∫øn ‚Äã‚Äãc·ªßa ch√≠nh ph·ªß ƒë·ªÉ t·∫°o ra m·ªôt trang web cho tr·∫ª em v√†ng∆∞·ªùi l·ªõn ƒë·ªÉ b√°o c√°o c√°c ho·∫°t ƒë·ªông v√† n·ªôi dung l·∫°m d·ª•ng tr·∫ª em. Ch√∫ng t√¥i thi·∫øt k·∫ø trang web n√†y trong √≠t h∆°n hai tu·∫ßn v√† nh·∫≠n ƒë∆∞·ª£c l·ªùi khen ng·ª£i t·ª´ VNCERT - ch√≠nh ph·ªß Vi·ªát Namc√¥ng ngh·ªá v√† t·ªï ch·ª©c an to√†n an ninh m·∫°ng.   Trang web ƒë√£ ƒë∆∞·ª£c ƒë∆∞a tin tr√™n VTV1 v√† nhi·ªÅu trang tin uy t√≠n:       Vietnamnet    VTV    An Ninh Th·ªß ƒê√¥  Contact:                   @usth_coders_club                         ucc@st. usth. edu. vn                         USTH. Coders. Club                         TikTok       "
    }, {
    "id": 2,
    "url": "https://usth-coders-club.github.io/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "https://usth-coders-club.github.io/",
    "title": "Home",
    "body": "      Featured:                                                                                                                                                                                                           M·ªôt s·ªë concepts c∆° b·∫£n c·ªßa React                              :               Tr∆∞·ªõc ƒë√¢y c√°c trang web ch·ªâ ƒë∆∞·ª£c l√†m b·∫±ng HTML, CSS, JS. Nh∆∞ng m·ªôt nh∆∞·ª£c ƒëi·ªÉm khi ch·ªâ d√πng ƒë∆°n thu·∫ßn HTML, CSS, JS l√†. . . :                                                                                                                                                                                                                                                       Nguy·ªÖn Thanh T√πng                                                12 Aug 2022                                                                                                                                                                                                                                                                                                                  Ph√¢n t√≠ch l·ªó h·ªïng OS Command Injection trong ·ª©ng d·ª•ng SolarView Compact 6. 0                              :               H√¥m nay UCC s·∫Ω ƒë·ªïi gi√≥ b·∫±ng m·ªôt b√†i vi·∫øt v·ªÅ ch·ªß ƒë·ªÅ Security. H√£y c√πng ch√∫ng m√¨nh t√¨m hi·ªÉu v·ªÅ m·ªôt trong nh·ªØng l·ªó. . . :                                                                                                                                                                                                                                                       ƒê·ªó Nh·∫≠t Th√†nh                                                19 Jul 2022                                                                                                                                                                                                                                                                                                                                                Vi·∫øt email m·ªôt c√°ch chuy√™n nghi·ªáp                              :               Nh∆∞ c√°c b·∫°n ƒë√£ bi·∫øt, email l√† m·ªôt ph∆∞∆°ng ti·ªán giao ti·∫øp ch√≠nh v√† ƒë∆∞·ª£c s·ª≠ d·ª•ng ph·ªï bi·∫øn trong h·∫ßu h·∫øt m·ªçi lƒ©nh v·ª±c. . . :                                                                                                                                                                                                                                                       Ph·∫°m ƒê·ª©c Khi√™m                                                06 Apr 2022                                                                                                                                  All Posts:                                                                                                     M·ªôt s·ªë concepts c∆° b·∫£n c·ªßa React              :       Tr∆∞·ªõc ƒë√¢y c√°c trang web ch·ªâ ƒë∆∞·ª£c l√†m b·∫±ng HTML, CSS, JS. Nh∆∞ng m·ªôt nh∆∞·ª£c ƒëi·ªÉm khi ch·ªâ d√πng ƒë∆°n thu·∫ßn HTML, CSS, JS l√† kh√≥ c√≥ th·ªÉ t·∫°o ra. . . :                                                                                                               Nguy·ªÖn Thanh T√πng                12 Aug 2022                                                                                                                                     Ph√¢n t√≠ch l·ªó h·ªïng OS Command Injection trong ·ª©ng d·ª•ng SolarView Compact 6. 0              :       H√¥m nay UCC s·∫Ω ƒë·ªïi gi√≥ b·∫±ng m·ªôt b√†i vi·∫øt v·ªÅ ch·ªß ƒë·ªÅ Security. H√£y c√πng ch√∫ng m√¨nh t√¨m hi·ªÉu v·ªÅ m·ªôt trong nh·ªØng l·ªó h·ªïng ·ª©ng d·ª•ng web c∆°. . . :                                                                                                               ƒê·ªó Nh·∫≠t Th√†nh                19 Jul 2022                                                                                                                                     L√†m th·∫ø n√†o ƒë·ªÉ gi·∫£i quy·∫øt c√°c b√†i to√°n g·∫∑p ph·∫£i khi l·∫≠p tr√¨nh? ü§î              :       Gi·∫£i quy·∫øt c√°c b√†i to√°n l√† vi·ªác m√† ch√∫ng ta ƒë·ªÅu g·∫∑p ph·∫£i h·∫±ng ng√†y trong m·ªçi vi·ªác m√† ch√∫ng ta l√†m. L·∫≠p tr√¨nh c≈©ng kh√¥ng ph·∫£i l√† ngo·∫°i l·ªá. . . . :                                                                                                               Nguy·ªÖn Thanh T√πng                20 May 2022                                                                                                                                     So s√°nh GUI v√† CLI              :       H·ªá ƒëi·ªÅu h√†nh l√† th·ª© ƒëem l·∫°i s·ª± t∆∞∆°ng t√°c t·ªët h∆°n gi·ªØa ng∆∞·ªùi d√πng v√† thi·∫øt b·ªã. H·ªá ƒëi·ªÅu h√†nh cung c·∫•p 2 giao di·ªán ch√≠nh gi√∫p ng∆∞·ªùi d√πng. . . :                                                                                                                                                       Ph·∫°m Minh Hi·∫øu                        VƒÉn Qu·ªëc An                13 May 2022                                                                                                                                     [CODE MUSIC BOT FOR DISCORD] - Ph·∫ßn 3: L·∫≠p tr√¨nh c√°c t√≠nh nƒÉng              :       ·ªû Ph·∫ßn 2, UCC ƒë√£ c√πng c√°c b·∫°n ƒëƒÉng k√Ω t√†i kho·∫£n Bot v·ªõi Discord v√† ƒëƒÉng nh·∫≠p v√†o n√≥ b·∫±ng Javascript. Trong b√†i vi·∫øt n√†y, m√¨nh s·∫Ω h∆∞·ªõng d·∫´n. . . :                                                                                                               ƒê·ªó Nh·∫≠t Th√†nh                06 May 2022                                                                                                                                     [CODE MUSIC BOT FOR DISCORD] - Ph·∫ßn 2: M·ªôt s·ªë l·ªánh c∆° b·∫£n              :       ·ªû Ph·∫ßn 1, UCC ƒë√£ h∆∞·ªõng d·∫´n c√°c b·∫°n c√†i ƒë·∫∑t m√¥i tr∆∞·ªùng cho con bot ho·∫°t ƒë·ªông bao g·ªìm Node. js v√† m·ªôt s·ªë module ƒëi k√®m. Trong b√†i n√†y,. . . :                                                                                                               ƒê·ªó Nh·∫≠t Th√†nh                01 May 2022                                               &laquo; Prev       1        2      Next &raquo; "
    }, {
    "id": 4,
    "url": "https://usth-coders-club.github.io/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ ‚Äúsitemap. xml‚Äù   absolute_url }}   "
    }, {
    "id": 5,
    "url": "https://usth-coders-club.github.io/page2/",
    "title": "Home",
    "body": "{% if page. url == ‚Äú/‚Äù %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Posts:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 6,
    "url": "https://usth-coders-club.github.io/mot-so-concept-co-ban-react/",
    "title": "M·ªôt s·ªë concepts c∆° b·∫£n c·ªßa React",
    "body": "2022/08/12 - Tr∆∞·ªõc ƒë√¢y c√°c trang web ch·ªâ ƒë∆∞·ª£c l√†m b·∫±ng HTML, CSS, JS. Nh∆∞ng m·ªôt nh∆∞·ª£c ƒëi·ªÉm khi ch·ªâ d√πng ƒë∆°n thu·∫ßn HTML, CSS, JS l√† kh√≥ c√≥ th·ªÉ t·∫°o ra nh·ªØng trang web v·ªõi ƒë·ªô t∆∞∆°ng t√°c cao. ƒê·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ ƒë√≥ ƒë√£ c√≥ nhi·ªÅu JS frontend library ƒë√£ ra ƒë·ªùi gi√∫p n√¢ng cao t√≠nh t∆∞∆°ng t√°c v√† bi·∫øn c√°c trang web gi·ªëng c√°c native app h∆°n. M·ªôt trong s·ªë ch√∫ng l√†: React, Vue, Svelte,‚Ä¶ Trong s·ªë nh·ªØng th∆∞ vi·ªán ƒë√≥, React l√† th∆∞ vi·ªán ƒë∆∞·ª£c s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t. ƒê·ªëi v·ªõi c√°c b·∫°n ƒëang b·∫Øt ƒë·∫ßu h·ªçc React, s·∫Ω c√≥ nhi·ªÅu thay ƒë·ªïi so v·ªõi s·ª≠ d·ª•ng HTML, CSS, JS b√¨nh th∆∞·ªùng, c√πng v·ªõi ƒë√≥ l√† nhi·ªÅu concepts m·ªõi. V√¨ v·∫≠y b√†i vi·∫øt n√†y s·∫Ω gi·∫£i th√≠ch v·ªÅ m·ªôt s·ªë concepts c∆° b·∫£n khi s·ª≠ d·ª•ng th∆∞ vi·ªán n√†y. B√†i vi·∫øt n√†y kh√¥ng ph·∫£i l√† h∆∞·ªõng d·∫´n c·ª• th·ªÉ c√°ch s·ª≠ d·ª•ng React; m√† l√† m·ªôt t√†i li·ªáu tham kh·∫£o cho c√°c b·∫°n ƒëang h·ªçc React, mu·ªën tr√°nh c·∫£m th·∫•y ng·ª£p c≈©ng nh∆∞ mu·ªën c√≥ m·ªôt c√°i nh√¨n t·ªïng qu√°t h∆°n v·ªÅ th∆∞ vi·ªán n√†y. React l√† g√¨?:  React l√† m·ªôt m·ªôt th∆∞ vi·ªán JavaScript open-source ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Facebook.  React ƒë∆∞·ª£c d√πng ƒë·ªÉ x√¢y d·ª±ng UI (user interfaces) cho c√°c trang web.  React ƒë∆°n gi·∫£n h√≥a vi·ªác x√¢y d·ª±ng UI b·∫±ng c√°ch chia n√≥ th√†nh nh·ªØng Component nh·ªè, c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng. JSX: Th∆∞·ªùng m·ªôt trang web s·∫Ω ƒë∆∞·ª£c vi·∫øt trong c√°c file HTML v√† JS ri√™ng bi·ªát. M·ªôt nh∆∞·ª£c ƒëi·ªÉm khi vi·∫øt HTML v√† JS ri√™ng bi·ªát ƒë√≥ l√† b·∫°n ph·∫£i vi·∫øt tr·ª±c ti·∫øp (hard code) nh·ªØng th√¥ng tin b·∫°n mu·ªën hi·ªÉn th·ªã trong file HTML. Khi mu·ªën s·ª≠ d·ª•ng c√°c ch·ª©c nƒÉng c·ªßa JS, v√† truy c·∫≠p HTML b·∫°n ph·∫£i s·ª≠ d·ª•ng query: 1const container = document. querySelector( . container )Hay khi mu·ªën th√™m c√°c element m·ªõi ph·∫£i vi·∫øt: 12const paragraph = document. createElement( p )container. appendChild(paragraph)Vi·∫øt code nh∆∞ v·∫≠y r·∫•t t·ªën th·ªùi gian. Trong React, JSX gi√∫p k·∫øt h·ª£p JS v√† HTML ngay trong m·ªôt file JS. V√≠ d·ª• b·∫°n c√≥ th·∫ø t·∫°o m·ªôt tag &lt;h1&gt; ngay trong file JS: 1const title = &lt;h1&gt;Hello, World!&lt;/h1&gt;·ªû ƒë√¢y &lt;h1&gt;Hello, World!&lt;/h1&gt; ƒë∆∞·ª£c g·ªçi l√† m·ªôt ƒëo·∫°n JSX. !!!L∆ØU √ù: c√°c ƒëo·∫°n JSX ph·∫£i c√≥ m·ªôt parent tag v√† khi vi·∫øt xu·ªëng d√≤ng ph·∫£i b·ªçc trong ‚Äú()‚Äù ƒë√∫ng: 1234567891011121314151617181920// saiconst element = &lt;p&gt;paragraph 1&lt;/p&gt;&lt;p&gt;paragraph 2&lt;/p&gt;// ƒë√∫ng const element = &lt;div&gt;&lt;p&gt;paragraph 1&lt;/p&gt;&lt;p&gt;paragraph 2&lt;/p&gt;&lt;div&gt;// sai const element = 	&lt;div&gt;		&lt;p&gt;paragraph 1&lt;/p&gt;		&lt;p&gt;paragraph 2&lt;/p&gt;	&lt;/div&gt;// ƒë√∫ng const element = (	&lt;div&gt;		&lt;p&gt;paragraph 1&lt;/p&gt;		&lt;p&gt;paragraph 2&lt;/p&gt;	&lt;/div&gt;);Ngo√†i ra ƒë·ªÉ tr√°nh s·ª≠ d·ª•ng nhi·ªÅu tag &lt;div&gt; th·ª´a, ta c√≥ th·ªÉ d√πng React Fragment: &lt;&gt;&lt;/&gt; ƒë·ªÉ b·ªçc c√°c th√¥ng tin 123456const element = (	&lt;&gt;		&lt;p&gt;paragraph 1&lt;/p&gt;		&lt;p&gt;paragraph 2&lt;/p&gt;	&lt;/&gt;);Nh√¨n qua, JSX tr√¥ng kh√° gi·ªëng v·ªõi c√°c ƒëo·∫°n HTML b√¨nh th∆∞·ªùng. Nh∆∞ng JSX c√≥ m·ªôt t√≠nh ƒë·∫∑c bi·ªát ƒë√≥ l√† cho ph√©p ta embed c√°c ƒëo·∫°n JavaScript v√†o trong b·∫±ng c√°ch b·ªçc ch√∫ng trong ngo·∫∑c nh·ªçn ‚Äú{}‚Äù. Trong v√≠ d·ª• d∆∞·ªõi, ch√∫ng ta khai b√°o bi·∫øn name v√† d√πng n√≥ trong ƒëo·∫°n JSX: 1234const name = 'React';const element = &lt;h1&gt;Hello, { name }&lt;/h1&gt;;// element b·∫±ng &lt;h1&gt;Hello, React&lt;/h1&gt;Ch√∫ng ta c≈©ng c√≥ th·ªÉ g·ªçi c√°c h√†m: 12345function sum(a, b) return a + b;const element = &lt;p&gt;1 + 2 = { sum(1, 2) }&lt;/p&gt;;// element b·∫±ng &lt;p&gt;1 + 2 = 3&lt;/p&gt;JSX c≈©ng c√≥ th·ªÉ ƒë∆∞·ª£c l∆∞u trong m·ªôt Array: 123const names = [ React ,  John ,  Mike ,  Amy ]const helloList = names. map((name, index) =&gt; &lt;h1 key={index}&gt;Hello {name}&lt;/h1&gt;)const hello = &lt;div&gt;{helloList}&lt;/div&gt;;!!!L∆ØU √ù: c√°c element JSX trong m·ªôt Array ph·∫£i c√≥ attribute key kh√°c nhau. Component. : M·ªôt trong nh·ªØng t√≠nh nƒÉng n·ªïi ti·∫øng c·ªßa React ƒë√≥ l√† c√≥ th·ªÉ s·ª≠ d·ª•ng Component. ƒê√¢y l√† l√† m·ªôt t√≠nh nƒÉng r·∫•t h·ªØu √≠ch v√† quan tr·ªçng m√† b·∫°n c·∫ßn n·∫Øm ch·∫Øc khi s·ª≠ d·ª•ng React. Component ƒë∆°n gi·∫£n l√† nh·ªØng ph·∫ßn nh·ªè c·ªßa m·ªôt trang web hay m·ªôt UI. Component cho ph√©p b·∫°n chia UI th√†nh c√°c th√†nh ph·∫ßn nh·ªè h∆°n, ƒë·ªôc l·∫≠p v√† c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng nh∆∞ nh·ªØng mi·∫øng Lego v·∫≠y. L·∫•y v√≠ d·ª• nh∆∞ nh∆∞ trang web UCC Blog: V·ªõi HTML b√¨nh th∆∞·ªùng, ch√∫ng ta c√≥ th·ªÉ bi·ªÉu di·ªÖn n√≥ nh∆∞ sau: 1234567891011121314151617181920&lt;div&gt;	&lt;div&gt;		&lt;img src= image1. jpg  /&gt;		&lt;h3&gt;Ph√¢n t√≠ch l·ªó h·ªïng&lt;/h3&gt;		&lt;p&gt;H√¥m nay UCC s·∫Ω ƒë·ªïi gi√≥‚Ä¶&lt;/p&gt;		&lt;p&gt;ƒê·ªó Nh·∫≠t Th√†nh&lt;/p&gt;	&lt;/div&gt;	&lt;div&gt;		&lt;img src= image2. jpg  /&gt;		&lt;h3&gt;L√†m th·∫ø n√†o ƒë·ªÉ gi·∫£i quy·∫øt‚Ä¶&lt;/h3&gt;		&lt;p&gt;Gi·∫£i quy·∫øt c√°c b√†i to√°n‚Ä¶&lt;/p&gt;		&lt;p&gt;Nguy·ªÖn Thanh T√πng&lt;/p&gt;	&lt;/div&gt;	&lt;div&gt;		&lt;img src= image3. jpg  /&gt;		&lt;h3&gt;So s√°nh GUI v√† CLI‚Ä¶&lt;/h3&gt;		&lt;p&gt;H·ªá ƒëi·ªÅu h√†nh l√†‚Ä¶&lt;/p&gt;		&lt;p&gt;Ph·∫°m Minh Hi·∫øu, VƒÉn Qu·ªëc An&lt;/p&gt;	&lt;/div&gt;&lt;/div&gt;Quan s√°t k·ªπ h∆°n, ta c√≥ th·ªÉ th·∫•y c·∫•u tr√∫c c·ªßa c√°c b√†i Post kh√° t∆∞∆°ng t·ª± nhau. C√°c b√†i Posts (nh∆∞ √¥ b√¥i ƒë·ªè trong h√¨nh d∆∞·ªõi) ƒë·ªÅu c√≥ c√°ch s·∫Øp x·∫øp th√¥ng tin gi·ªëng nhau: Hay trong file HTML ch√∫ng c√≥ d·∫°ng: 123456&lt;div&gt;	&lt;img src= image. jpg  /&gt;	&lt;h3&gt;Ti√™u ƒë·ªÅ&lt;/h3&gt;	&lt;p&gt;N·ªôi dung&lt;/p&gt;	&lt;p&gt;T√°c gi·∫£&lt;/p&gt;&lt;/div&gt;Thay v√¨ ph·∫£i vi·∫øt l·∫∑p ƒëi l·∫∑p l·∫°i ƒëo·∫°n HTML tr√™n; ch√∫ng ta c√≥ th·ªÉ t√°ch b√†i Post th√†nh m·ªôt Component v√† s·ª≠ d·ª•ng ch√∫ng nhi·ªÅu l·∫ßn: 12345678910function Post() {	return (		&lt;div&gt;			&lt;img src= image. jpg  /&gt;			&lt;h3&gt;Ti√™u ƒë·ªÅ&lt;/h3&gt;			&lt;p&gt;N·ªôi dung&lt;/p&gt;			&lt;p&gt;T√°c gi·∫£&lt;/p&gt;		&lt;/div&gt;	);}Component trong React ƒë∆°n gi·∫£n l√† m·ªôt function c√≥ t√™n ·ªü d·∫°ng PascalCase (vi·∫øt hoa c√°c ch·ªØ c√°i ƒë·∫ßu c·ªßa t·ª´). Function n√†y s·∫Ω tr·∫£ v·ªÅ m·ªôt ƒëo·∫°n JSX m√† n√≥ mu·ªën hi·ªÉn th·ªã. Nh∆∞ v√≠ d·ª• ·ªü tr√™n, ƒë·ªÉ t√°ch b√†i Post th√†nh m·ªôt Component, ch√∫ng ta t·∫°o m·ªôt function v·ªõi t√™n Post v√† tr·∫£ l·∫°i ƒëo·∫°n JSX v·ªõi c·∫•u tr√∫c c·ªßa b√†i Post. Sau khi ƒë√£ t·∫°o xong Component, ta c√≥ th·ªÉ s·ª≠ d·ª•ng ch√∫ng nh∆∞ nh·ªØng tag HTML: 1234567const postsList= (	&lt;div&gt;		&lt;Post/&gt;		&lt;Post/&gt;		&lt;Post/&gt;	&lt;/div&gt;)V·ªõi c√°ch vi·∫øt tr√™n, b·∫°n c√≥ th·ªÉ ƒë√£ nh·∫≠n ra c√°c Component Post ƒë·ªÅu s·∫Ω hi·ªÉn th·ªã ra m√†n h√¨nh th√¥ng tin gi·ªëng nhau. V·∫≠y l√†m th·ªÉ n√†o ƒë·ªÉ m·ªôt Component hi·ªÉn th·ªã nh·ªØng th√¥ng tin kh√°c nhau? Props: Props s·∫Ω gi√∫p ta ƒë·∫°t ƒë∆∞·ª£c ƒëi·ªÅu n√†y. C√°c Component c√≥ th·ªÉ nh·∫≠n th√™m parameter props: 123function Hello(props) {	return &lt;h1&gt;Hello {props. name}&lt;/h1&gt;;}Props l√† nh·ªØng th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ m·ªôt Component c√≥ th·ªÉ hi·ªÉn th·ªã ƒë√∫ng. Khi th√¥ng tin trong props thay ƒë·ªïi, Component s·∫Ω thay ƒë·ªïi ƒë·ªÉ hi·ªÉn th·ªã ch√≠nh x√°c. Props c√≥ th·ªÉ ƒë∆∞·ª£c truy·ªÅn cho Component b·∫±ng c√°ch khai b√°o th√™m c√°c attributes khi s·ª≠ d·ª•ng Component ƒë√≥: 12const helloUCC = &lt;Hello name= UCC  /&gt;// helloUCC b·∫±ng &lt;h1&gt;Hello UCC&lt;/h1&gt;Quay l·∫°i v·ªõi Component Post ta c√≥ th·ªÉ thay nh·ªØng d·ªØ li·ªáu c·ªë ƒë·ªãnh (hard-coded value) th√†nh nh·ªØng d·ªØ li·ªáu ƒë∆∞·ª£c l·∫•y t·ª´ props: 12345678910function Post(props) {	return (		&lt;div&gt;			&lt;img src={props. thumbnail} /&gt;			&lt;h3&gt;{props. title}&lt;/h3&gt;			&lt;p&gt;{props. description}&lt;/p&gt;			&lt;p&gt;{props. author}&lt;/p&gt;		&lt;/div&gt;	);}v√† th√™m c√°c attributes: 1234567const postsList= (	&lt;div&gt;		&lt;Post title= Ph√¢n t√≠ch‚Ä¶  author= Th√†nh  description= H√¥m nay‚Ä¶  thumbnail= image1. jpg  /&gt;		&lt;Post title= So s√°nh‚Ä¶  author= Hi·∫øu, An  description= H·ªá ƒëi·ªÅu‚Ä¶  thumbnail= image2. jpg  /&gt;		&lt;Post title= L√†m th·∫ø‚Ä¶  author= T√πng  description= Gi·∫£i quy·∫øt‚Ä¶  thumbnail= image3. jpg /&gt;	&lt;/div&gt;)M·ªôt property h·ªØu √≠ch c·ªßa props l√† children: 12345function Link(props) {	return (		&lt;a href={props. href}&gt;{props. children}&lt;/a&gt;	)}Props. children l√† nh·ªØng th√¥ng tin ƒë∆∞·ª£c ƒë·∫∑t gi·ªØa open v√† closing tag c·ªßa m·ªôt Component: 12345const link1 = (	&lt;Link href= reactjs. org/docs &gt;&lt;h1&gt;React docs&lt;/h1&gt;&lt;/Link&gt;)// link1 b·∫±ng &lt;a href= reactjs. org/docs &gt;&lt;h1&gt;React docs&lt;/h1&gt;&lt;/a&gt;X·ª≠ l√Ω c√°c Events: Vi·ªác x·ª≠ l√Ω c√°c events trong React c≈©ng kh√° t∆∞∆°ng t·ª± v·ªõi . Nh∆∞ng c√≥ m·ªôt s·ªë kh√°c bi·ªát v·ªÅ syntax:  C√°c events trong React s·ª≠ d·ª•ng camelCase (vi·∫øt th∆∞·ªùng ch·ªØ ƒë·∫ßu ti√™n v√† vi·∫øt hoa ch·ªØ ƒë·∫ßu ti√™n c√°c t·ª´ sau). V√≠ d·ª•: onclick ‚áí onClick, onchange ‚áí onChangeTa c√≥ th·ªÉ pass c√°c h√†m ƒë·ªÉ x·ª≠ l√Ω c√°c events: 12345678function HelloButton() {	function hello() {		console. log( hello )	}	return &lt;button onClick={hello}&gt;say hello&lt;/button&gt;}!!!L∆ØU √ù: b·∫°n c·∫ßn pass m·ªôt h√†m, ch·ª© kh√¥ng ph·∫£i invoke n√≥. 12345// sai  const HelloButton = () =&gt; &lt;button onClick={hello()}&gt;say hello&lt;/button&gt;// ƒë√∫ngconst HelloButton = () =&gt; &lt;button onClick={hello}&gt;say hello&lt;/button&gt;ƒê·ªÉ th√™m c√°c c√°c input cho h√†m, b·∫°n c√≥ th·ªÉ t·∫°o m·ªôt anonymous function 12345678910111213function HelloButton() {	function hello(name) {		console. log( hello   + name)	}	return (		&lt;button 			onClick={ () =&gt; hello( React ) }		&gt;			say hello		&lt;/button&gt;);}State (tr·∫°ng th√°i): Trong m·ªôt trang web, UI s·∫Ω c√≥ nh·ªØng Component v·ªõi v·ªõi c√°c tr·∫°ng th√°i kh√°c nhau. V√≠ d·ª• nh∆∞ m·ªôt c√°i Counter (ƒë·∫øm s·ªë) s·∫Ω c√≥ tr·∫°ng th√°i l√† s·ªë hi·ªán t·∫°i: Khi c·∫ßn d√πng ƒë·∫øn state, ch√∫ng ta c√≥ th·ªÉ s·ª≠ d·ª•ng h√†m useState c·ªßa React: 1const [state, setState] = useState(initialValue); H√†m useState s·∫Ω tr·∫£ v·ªÅ m·ªôt Array v·ªõi 2 gi√° tr·ªã:     Gi√° tr·ªã th·ª© nh·∫•t ch√≠nh l√† bi·∫øt ch·ª©a state hi·ªán t·∫°i.    Gi√° tr·ªã th·ª© hai l√† h√†m ƒë·ªÉ thay ƒë·ªïi state ƒë√≥.     Ta c√≥ th·ªÉ th√™m gi√° tr·ªã ban ƒë·∫ßu khi c·ªßa m·ªôt state khi g·ªçi useState(initialValue).  Theo convention, ta s·∫Ω ƒë·∫∑t t√™n h√†m ƒë·ªÉ thay ƒë·ªïi state gi·ªëng v·ªõi state ƒë√≥ v√† th√™m ‚Äúset‚Äù ·ªü ƒë·∫±ng tr∆∞·ªõc v√† vi·∫øt hoa ch·ªØ ti·∫øp theo. V√≠ d·ª• b·∫°n mu·ªën l∆∞u m·ªôt email: const [email, setEmail] = useState(  ). Quay tr·ªü l·∫°i v·ªõi v√≠ d·ª• m·ªôt c√°i Counter, ch√∫ng ta c√≥ th·ªÉ t·∫°o Component nh∆∞ sau: 1234567891011function Counter() {	const [count, setCount] = useState(0);	return (		&lt;div&gt;			&lt;h1&gt;Counter&lt;/h1&gt;			&lt;button onClick={() =&gt; setCount(count + 1)}&gt;+&lt;/button&gt;			&lt;p&gt;{count}&lt;/p&gt;			&lt;button onClick={() =&gt; setCount(count - 1)}&gt;-&lt;/button&gt;		&lt;/div&gt;	);}Ta th√™m m·ªôt state g·ªçi l√† count v√† kh·ªüi t·∫°o n√≥ v·ªõi gi√° 0. Ta d√πng n√≥ bi·∫øn count ƒë·ªÉ hi·ªÉn th·ªã s·ªë ƒë·∫øm hi·ªán t·∫°i trong tag &lt;p&gt;. Sau ƒë√≥ ta th√™m hai n√∫t v√† nghe Event onClick ƒë·ªÉ tƒÉng v√† gi·∫£m s·ªë ƒë·∫øm hi·ªán t·∫°i. !!!L∆ØU √ù: Khi d√πng useState, kh√¥ng ƒë∆∞·ª£c thay ƒë·ªïi bi·∫øn ƒë∆∞·ª£c tr·∫£ v·ªÅ ƒë√≥ m√† ph·∫£i d√πng h√†m thay ƒë·ªïi state. Trong v√≠ d·ª• tr√™n n·∫øu d√πng onClick={count++}; s·ªë ƒë·∫øm hi·ªán ra m√†n h√¨nh s·∫Ω kh√¥ng thay ƒë·ªïi. Ta ph·∫£i d√πng setCount(count + 1). Controlled Component: Controlled Component th∆∞·ªùng ƒë∆∞·ª£c d√πng v·ªõi nh·ªØng tag nh∆∞ &lt;form&gt;, &lt;input&gt;, &lt;textarea&gt;, &lt;select&gt;,‚Ä¶ ƒê·ªÉ ki·ªÉm so√°t nh·ªØng tag nh∆∞ v·∫≠y trong React, ta c√≥ th·ªÉ d√πng Controlled Component. V√≠ d·ª•: 123456789function EmailInput() {	const [email, setEmail] = useState(  )		const handleChange = (event) =&gt; {		setEmail(event. target. value)	}	return &lt;input type= email  value={email} onChange={handleChange}/&gt;}Ta c√≥ th·ªÉ t·∫°o m·ªôt state ƒë·ªÉ l∆∞u gi√° tr·ªã email m√† ng∆∞·ªùi d√πng nh·∫≠p. Ta g·∫Øn bi·∫øn email atribut value c·ªßa tag &lt;input&gt;. ƒê·ªìng th·ªùi nghe Event onChange ƒë·ªÉ update gi√° tr·ªã email khi ng∆∞·ªùi d√πng nh·∫≠p v√†o √¥ input. ƒê·ªÉ ngƒÉn c√°c h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh c·ªßa browser b·∫°n c√≥ th·ªÉ d√πng preventDefault() 123456789101112131415161718function EmailInput() {	const [email, setEmail] = useState(  )	const [password, setPassword] = useState(  )	const handleSubmit = (event) =&gt; {		event. preventDefault();		console. log(email);		console. log(password);	}	return (		&lt;form onSubmit={handleSubmit}&gt;			&lt;input type= email  value={email} onChange={ e =&gt; setEmail(event. target. value) } /&gt;			&lt;input type= password  value={password} onChange={ e =&gt; setPassword(event. target. value) } /&gt;			&lt;button type= submit &gt;Sign In&lt;/button&gt;		&lt;/form&gt;	);}V√≠ d·ª• nh∆∞ preventDefault() ·ªü ƒë√¢y s·∫Ω tr√°nh browser add th√™m query v√†o url v√† reload trang. Tham kh·∫£o th√™m:  Documentation c·ªßa React kh√° ƒë·∫ßy ƒë·ªß v√† h·ªØu √≠ch. B·∫°n c√≥ th·ªÉ ƒë·ªçc th√™m ph·∫ßn Main Concepts ƒë·ªÉ hi·ªÉu th√™m v·ªÅ c√°c Concepts kh√°c trong React.  React Tutorial c·ªßa Mosh HamedaniT·ªïng k·∫øt: React l√† m·ªôt library open-source v·ªõi c·ªông ƒë·ªìng s·ª≠ d·ª•ng l·ªõn. C√≥ r·∫•t nhi·ªÅu b√†i vi·∫øt, video, tutorial v·ªÅ React. Ch√≠nh v√¨ v·∫≠y khi s·ª≠ d·ª•ng React, nh·∫•t l√† khi m·ªõi b·∫Øt ƒë·∫ßu h·ªçc, ƒë·ª´ng ng·∫ßn ng·∫°i l√™n m·∫°ng tra khi c√≥ c√¢u h·ªèi. B·ªüi v√¨ nh·ªØng c√¢u h·ªèi ƒë√≥ kh·∫£ nƒÉng cao l√† ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi. T·ª´ ƒë√≥ c√°c b·∫°n c√≥ th·ªÉ t√≠ch l≈©y cho minh nh·ªØng ki·∫øn th·ª©c m·ªõi v·ªÅ th∆∞ vi·ªán n√†y. C·∫£m ∆°n c√°c b·∫°n ƒë√£ ƒë·ªçc b√†i vi·∫øt. Nh·ªõ theo d√µi UCC Blog ƒë·ªÉ ƒë√≥n ƒë·ªçc c√°c b√†i vi·∫øt m·ªõi nh√©! "
    }, {
    "id": 7,
    "url": "https://usth-coders-club.github.io/solar-view/",
    "title": "Ph√¢n t√≠ch l·ªó h·ªïng OS Command Injection trong ·ª©ng d·ª•ng SolarView Compact 6.0",
    "body": "2022/07/19 - H√¥m nay UCC s·∫Ω ƒë·ªïi gi√≥ b·∫±ng m·ªôt b√†i vi·∫øt v·ªÅ ch·ªß ƒë·ªÅ Security. H√£y c√πng ch√∫ng m√¨nh t√¨m hi·ªÉu v·ªÅ m·ªôt trong nh·ªØng l·ªó h·ªïng ·ª©ng d·ª•ng web c∆° b·∫£n nh·∫•t - OS Command Injection - b·∫±ng c√°ch ph√¢n t√≠ch m·ªôt v√≠ d·ª• th·ª±c t·∫ø t·ª´ m·ªôt m√°y ch·ªß ƒë·∫∑t t·∫°i Nh·∫≠t B·∫£n. C√°c nh√† nghi√™n c·ª©u b·∫£o m·∫≠t ƒë√£ t√¨m ra l·ªó h·ªïng OS Command Injection trong ch·ª©c nƒÉng ki·ªÉm tra email c·ªßa ·ª©ng d·ª•ng SolarView Compact phi√™n b·∫£n 6. 0. L·ªó h·ªïng n√†y ƒë√£ ƒë∆∞·ª£c ch∆∞∆°ng tr√¨nh CVE c·ªßa t·∫≠p ƒëo√†n MITRE c√¥ng nh·∫≠n v√† g√°n cho m√£ ƒë·ªãnh danh CVE-2022-29303 v·ªõi ƒëi·ªÉm s·ªë m·ª©c ƒë·ªô nghi√™m tr·ªçng l√† 9. 8 CRITICAL, cho ph√©p k·∫ª t·∫•n c√¥ng c√≥ th·ªÉ chi·∫øm quy·ªÅn h·ªá th·ªëng. Gi·ªõi thi·ªáu v·ªÅ SolarView: SolarView Compact l√† m·ªôt ·ª©ng d·ª•ng web ƒë∆∞·ª£c vi·∫øt b·∫±ng PHP, c√≥ nhi·ªám v·ª• theo d√µi h·ªá th·ªëng nƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi d√†nh cho doanh nghi·ªáp v√† tr∆∞·ªùng h·ªçc do c√¥ng ty Nh·∫≠t B·∫£n CONTEC cung c·∫•p. M√¥ h√¨nh chung c·ªßa h·ªá th·ªëng ƒë∆∞·ª£c bi·ªÉu di·ªÖn nh∆∞ h√¨nh minh h·ªça d∆∞·ªõi ƒë√¢y: To√†n b·ªô d·ªØ li·ªáu t·ª´ c√°c thi·∫øt b·ªã nh∆∞ t·∫•m pin nƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi, c·∫£m bi·∫øn, ‚Ä¶ s·∫Ω ƒë∆∞·ª£c thu th·∫≠p b·ªüi thi·∫øt b·ªã SolarView Compact (c·ª• th·ªÉ l√† m√£ s·∫£n ph·∫©m SV-CPT-MC310) sau ƒë√≥ hi·ªÉn th·ªã qua m·ªôt ·ª©ng d·ª•ng ch·∫°y tr√™n web server gi√∫p truy c·∫≠p t·ª´ xa: S·∫£n ph·∫©m SV-CPT-MC310 tr√™n trang ch·ªß CONTEC Giao di·ªán c·ªßa ·ª©ng d·ª•ng web SolarView Compact Ph√¢n t√≠ch l·ªó h·ªïng trong m√£ ngu·ªìn SolarView Compact 6. 0: Code Logic: B·∫±ng nh·ªØng ‚Äúbi·ªán ph√°p nghi·ªáp v·ª•‚Äù, UCC ƒë√£ t√¨m ra ƒë·ªãa ch·ªâ IP c·ªßa m·ªôt m√°y ch·ªß Nh·∫≠t B·∫£n ƒëang ch·∫°y phi√™n b·∫£n d√≠nh l·ªó h·ªïng c·ªßa ·ª©ng d·ª•ng SolarView Compact. L·ªó h·ªïng OS Command Injection t·ªìn t·∫°i trong ch·ª©c nƒÉng ki·ªÉm tra email c·ªßa ·ª©ng d·ª•ng web c√≥ t√™n l√† conf_mail. php (giao di·ªán n√†y ƒë√£ ƒë∆∞·ª£c Google Translate t·ª± ƒë·ªông d·ªãch sang Ti·∫øng Anh, ·ªü phi√™n b·∫£n g·ªëc, to√†n b·ªô ch·ªØ tr√™n giao di·ªán l√† Ti·∫øng Nh·∫≠t): Theo nh∆∞ giao di·ªán, ch√∫ng ta c√≥ th·ªÉ ƒëo√°n ƒë∆∞·ª£c ch·ª©c nƒÉng c·ªßa conf_mail. php l√† g·ª≠i m·ªôt email ki·ªÉm tra ƒë·∫øn ƒë·ªãa ch·ªâ mail m√† ng∆∞·ªùi d√πng nh·∫≠p v√†o: S·ª≠ d·ª•ng ph·∫ßn m·ªÅm BurpSuite, ch√∫ng ta c√≥ th·ªÉ quan s√°t ƒë∆∞·ª£c request ƒë∆∞·ª£c tr√¨nh duy·ªát g·ª≠i ƒëi sau khi b·∫•m n√∫t ‚Äúsend e-mail‚Äù: Khi b·∫•m n√∫t ‚Äúsend e-mail‚Äù, tr√¨nh duy·ªát s·∫Ω g·ª≠i m·ªôt POST request l√™n conf_mail. php, v√† ƒë·ªãa ch·ªâ email ng∆∞·ªùi d√πng nh·∫≠p v√†o s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t b√™n trong parameter ‚Äúmail_address‚Äù. C√≤n parameter button ch·ªâ l√† t√™n c·ªßa c√°i n√∫t ƒë√≥ (‚Äùsend e-mail‚Äù trong ti·∫øng Nh·∫≠t). To√†n b·ªô ph·∫ßn body ƒë√£ ƒë∆∞·ª£c m√£ h√≥a URL encode. Ti·∫øp theo ch√∫ng ta s·∫Ω ki·ªÉm tra m√£ ngu·ªìn c·ªßa file conf_mail. php: D√≤ng 2, 3, 4, server ƒëang kh·ªüi t·∫°o gi√° tr·ªã c·ªßa 2 bi·∫øn $button v√† $mail_address d·ª±a theo gi√° tr·ªã c·ªßa 2 parameter t∆∞∆°ng ·ª©ng trong ph·∫ßn body c·ªßa POST request m√† ch√∫ng ta ƒë√£ quan s√°t ƒë∆∞·ª£c ·ªü ph√≠a tr√™n: V·∫≠y l√† khi server nh·∫≠n ƒë∆∞·ª£c POST request, bi·∫øn $button s·∫Ω nh·∫≠n gi√° tr·ªã l√† ch·ªØ ti·∫øng Nh·∫≠t, d·ªãch ra ‚Äúsend e-mail‚Äù, c√≤n bi·∫øn $mail_address nh·∫≠n gi√° tr·ªã l√† ‚Äúadmin@admin. com‚Äù. D√≤ng 6, 7, 8, 9 server ƒëang import m·ªôt s·ªë bi·∫øn v√† h√†m t·ª´ b√™n ngo√†i: D√≤ng 12 server ki·ªÉm tra l·∫°i t√™n c·ªßa bi·∫øn $button xem c√≥ t∆∞∆°ng ƒë∆∞∆°ng v·ªõi n·ªôi dung bi·∫øn $LABEL_SENDEXEC hay kh√¥ng (bi·∫øn n√†y c√≥ th·ªÉ server ƒë√£ import t·ª´ d√≤ng 6, 7, 8, 9): D√≤ng 13, server c·ªë g·∫Øng lo·∫°i b·ªè to√†n b·ªô d·∫•u c√°ch trong bi·∫øn $mail_address: Ti·∫øp theo l√† ƒëo·∫°n code th√∫ v·ªã nh·∫•t: D√≤ng 14 ki·ªÉm tra bi·∫øn $mail_address c√≥ ƒë·ªß ƒë·ªô d√†i tr√™n 3 hay kh√¥ng. Ti·∫øn v√†o ƒëo·∫°n code b√™n trong h√†m if, ch√∫ng ta th·∫•y server kh·ªüi t·∫°o m·ªôt bi·∫øn m·ªõi t√™n l√† $sendmes c√≥ n·ªôi dung l√† m·ªôt ƒëo·∫°n ti·∫øng Nh·∫≠t n√†o ƒë√≥: Conf_mail. php ti·∫øp t·ª•c kh·ªüi t·∫°o bi·∫øn $exec_cmd c√≥ n·ªôi dung l√† m·ªôt c√¢u l·ªánh Linux c√≥ ch·ª©c nƒÉng th√™m 1 d√≤ng ch·ªØ v√†o file /dev/elogparam n·∫±m trong server: 1$exec_cmd =  echo -1  . $mail_address.   TEST-MAIL '$sendmes' &gt; /dev/elogparam ;N·ªôi dung bi·∫øn $mail_address v√† $sendmes ƒë∆∞·ª£c gh√©p v√†o t·∫°o th√†nh m·ªôt c√¢u l·ªánh ho√†n ch·ªânh l∆∞u trong bi·∫øn $exec_cmd. V·∫≠y v·ªõi mail_address ch√∫ng ta ban ƒë·∫ßu nh·∫≠p l√† admin@admin. com, bi·∫øn $exec_cmd s·∫Ω c√≥ n·ªôi dung nh∆∞ sau: 1echo -1 admin@admin. com TEST-MAIL Êú¨„É°„Éº„É´„ÅØSolarView„ÅåÈÄÅ‰ø°„Åó„Åü„ÉÜ„Çπ„Éà„É°„Éº„É´„Åß„Åô„ÄÇ&gt; /dev/elogparamSau ƒë√≥, conf_mail. php th·ª±c thi c√¢u l·ªánh n√†y b·∫±ng c√°ch ƒë∆∞a n·ªôi dung bi·∫øn $exec_cmd v√†o h√†m system(): 1system( $exec_cmd );Khai th√°c l·ªó h·ªïng: V·∫≠y ch√≠nh x√°c l·ªó h·ªïng OS Command Injection n·∫±m ·ªü ƒë√¢u? C√¢u tr·∫£ l·ªùi ch√≠nh l√† ·ªü d√≤ng 16, khi server gh√©p n·ªôi dung bi·∫øn $mail_address v√†o c√¢u l·ªánh $exec_cmd. Do m√£ ngu·ªìn kh√¥ng h·ªÅ c√≥ b∆∞·ªõc thanh l·ªçc user input, k·∫ª t·∫•n c√¥ng thay v√¨ nh·∫≠p m·ªôt email h·ª£p l·ªá nh∆∞ th√¥ng th∆∞·ªùng, h·ªç s·∫Ω ch√®n th√™m c√¢u l·ªánh Linux. Thay v√¨ nh·∫≠p: 1admin@admin. comH√°ch c∆° s·∫Ω nh·∫≠p: 1;id;‚Äúid‚Äù trong Linux l√† m·ªôt c√¢u l·ªánh hi·ªÉn th·ªã th√¥ng tin user hi·ªán t·∫°i. Khi nh·∫≠p payload tr√™n, t·∫°i d√≤ng 16, bi·∫øn $exec_cmd s·∫Ω c√≥ gi√° tr·ªã nh∆∞ sau: 1echo -1 ;id; TEST-MAIL '$sendmes' &gt; /dev/elogparamNh∆∞ v·∫≠y, khi bi·∫øn n√†y ƒë∆∞·ª£c ƒë∆∞a v√†o h√†m system(), th·ª±c t·∫ø s·∫Ω c√≥ 3 l·ªánh ƒë∆∞·ª£c th·ª±c thi:  echo -1: in ra ‚Äú-1‚Äù id: hi·ªÉn th·ªã th√¥ng tin user TEST-MAIL ‚Äò$sendmes‚Äô &gt; /dev/elogparam: ch·∫°y m·ªôt binary c√≥ t√™n ‚ÄúTEST-MAIL‚Äù v√† ƒë∆∞a output v√†o file /dev/elogparam, nh∆∞ng v√¨ binary n√†y kh√¥ng t·ªìn t·∫°i n√™n c√¢u l·ªánh n√†y s·∫Ω b·ªã l·ªóiCh√∫ng ta c√≥ th·ªÉ th·∫•y, k·∫ª t·∫•n c√¥ng ƒë√£ th√†nh c√¥ng trong vi·ªác th·ª±c thi l·ªánh b·∫•t k·ª≥ tr√™n h·ªá th·ªëng b·∫±ng c√°ch s·ª≠ d·ª•ng d·∫•u ; ƒë·ªÉ c√¥ l·∫≠p c√¢u l·ªánh m·ªõi v·ªõi 2 ph·∫ßn tr∆∞·ªõc v√† sau bi·∫øn $exec_cmd g·ªëc. Thay v√¨ ‚Äúid‚Äù, k·∫ª t·∫•n c√¥ng c√≥ th·ªÉ th·ª±c hi·ªán b·∫•t k·ª≥ c√¢u l·ªánh n√†o h·ªç mu·ªën, ƒë·ªìng nghƒ©a h·ªç ƒë√£ ki·ªÉm so√°t ƒë∆∞·ª£c server. H√£y c√πng ki·ªÉm ch·ª©ng v·ªõi m·ª•c ti√™u UCC ƒë√£ t√¨m th·∫•y. S·ª≠ d·ª•ng ph·∫ßn m·ªÅm Burp Suite ƒë·ªÉ thay ƒë·ªïi n·ªôi dung request ƒë·∫øn server: T·∫°i parameter mail_address, ch√∫ng ta thay ƒë·ªïi email th√¥ng th∆∞·ªùng th√†nh ‚Äú;id;‚Äù (d·∫•u ; khi ƒë∆∞·ª£c m√£ h√≥a url s·∫Ω tr·ªü th√†nh %3B). G·ª≠i request n√†y l√™n server v√† ch√∫ng ta nh·∫≠n ƒë∆∞·ª£c response: Output c·ªßa c√¢u l·ªánh ƒë√£ ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng. V·∫≠y c√≤n nh·ªØng c√¢u l·ªánh y√™u c·∫ßu param th√¨ sao? Server ƒë√£ c√≥ m·ªôt d√≤ng code lo·∫°i b·ªè to√†n b·ªô d·∫•u c√°ch. L√†m nh∆∞ th·∫ø n√†o ƒë·ªÉ ch√®n ƒë∆∞·ª£c c√¢u l·ªánh h·ª£p l·ªá ch·ª©a d·∫•u c√°ch? ƒê·ªÉ bypass d√≤ng code n√†y, ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng c√≥ s·∫µn tr√™n Linux ƒë√≥ l√† IFS, vi·∫øt t·∫Øt c·ªßa Internal Field Separator (n√≥i tr·∫Øng ra l√† d·∫•u c√°ch). Nh∆∞ v·∫≠y, ƒë·ªÉ th·ª±c thi m·ªôt c√¢u l·ªánh nh∆∞ cat /etc/passwd tr√™n server, ch√∫ng ta s·∫Ω ch√®n ;cat${IFS}/etc/passwd; d∆∞·ªõi d·∫°ng m√£ h√≥a URL (tu√¢n th·ªß header Content-Type: application/x-www-form-urlencoded) V√† nh·∫≠n ƒë∆∞·ª£c response: C√°c b·∫°n h√£y theo d√µi UCC ƒë·ªÉ ƒë√≥n ƒë·ªçc nh·ªØng b√†i vi·∫øt v·ªÅ ch·ªß ƒë·ªÅ Security ti·∫øp theo nh√©! "
    }, {
    "id": 8,
    "url": "https://usth-coders-club.github.io/giai-bai-tap/",
    "title": "L√†m th·∫ø n√†o ƒë·ªÉ gi·∫£i quy·∫øt c√°c b√†i to√°n g·∫∑p ph·∫£i khi l·∫≠p tr√¨nh? ü§î",
    "body": "2022/05/20 - Gi·∫£i quy·∫øt c√°c b√†i to√°n l√† vi·ªác m√† ch√∫ng ta ƒë·ªÅu g·∫∑p ph·∫£i h·∫±ng ng√†y trong m·ªçi vi·ªác m√† ch√∫ng ta l√†m. L·∫≠p tr√¨nh c≈©ng kh√¥ng ph·∫£i l√† ngo·∫°i l·ªá. H·∫≥n l√† nhi·ªÅu ng∆∞·ªùi khi m·ªõi h·ªçc l·∫≠p tr√¨nh ƒë·ªÅu ƒë√£ t·ª´ng c·∫£m th·∫•y m√¥ng lung kh√¥ng bi·∫øt ph·∫£i gi·∫£i quy·∫øt m·ªôt b√†i to√°n nh∆∞ th·∫ø n√†o. B√†i vi·∫øt n√†y s·∫Ω chia s·∫ª h∆∞·ªõng v√† c√°c b∆∞·ªõc ƒë∆°n gi·∫£n ƒë·ªÉ gi·∫£i quy·∫øt m·ªôt b√†i to√°n. 1. ƒê·ªçc v√† hi·ªÉu y√™u c·∫ßu. üîéƒê·ªçc k·ªπ v√† ph√¢n t√≠ch y√™u c·∫ßu c√≥ l·∫Ω l√† c√¥ng vi·ªác quan tr·ªçng nh·∫•t khi b·∫°n ph·∫£i gi·∫£i quy·∫øt m·ªôt b√†i to√°n. ƒê·ªçc k·ªπ y√™u c·∫ßu c·ªßa b√†i to√°n gi√∫p b·∫°n x√°c ƒë·ªãnh h∆∞·ªõng gi·∫£i quy·∫øt b√†i to√°n ƒë√≥, kh√¥ng b·ªã l·∫°c ƒë·ªÅ hay b·ªè l·ª° nh·ªØng th√¥ng tin quan tr·ªçng. 1. 1. X√°c ƒë·ªãnh ƒë·∫ßu v√†o, ƒë·∫ßu ra c·ªßa b√†i to√°n. ‚å®: Th∆∞·ªùng, trong ƒë·ªÅ c·ªßa c√°c b√†i to√°n s·∫Ω c√≥ ƒë·∫ßu v√†o (Input) v√† ƒë·∫ßu ra (Output). ƒê√¢y l√† th√¥ng tin quan tr·ªçng m√† b·∫°n c·∫ßn l∆∞u √Ω. ƒê·∫ßu ra c·ªßa b√†i to√°n ch√≠nh l√† m·ªôt g·ª£i √Ω v·ªÅ c√°ch b·∫Øt ƒë·∫ßu c·ªßa b√†i to√°n. C√≤n ƒë·∫ßu ra th√¨ ƒë∆∞∆°ng nhi√™n l√† quan tr·ªçng r·ªìi. Nh∆∞ m·∫π nh·ªù b·∫°n ƒëi mua t√°o, b·∫°n l·∫°i mua cam v·ªÅ l√† th·ªÉ n√†o c≈©ng ƒÉn ƒë√≤n. ƒê·ªÉ t√¨m ƒë∆∞·ª£c ƒë·∫ßu v√†o c·ªßa b√†i to√°n, h√£y t·∫≠p trung v√†o nh·ªØng danh t·ª´ trong ƒë·ªÅ b√†i, ƒë·ªÉ √Ω xem ƒë·ªÅ b√†i c√≥ nh·ªØng th√¥ng tin g√¨. VD:  T√≠nh di·ªán t√≠ch h√¨nh ch·ªØ nh·∫≠t v·ªõi chi·ªÅu d√†i 10cm v√† chi·ªÅu r·ªông 2cm. Input: chi·ªÅu d√†i v√† chi·ªÅu r·ªông c·ªßa h√¨nh ch·ªØ nh·∫≠t. !!!L∆ØU √ù: kh√¥ng ph·∫£i t·∫•t c·∫£ b√†i to√°n ƒë·ªÅu cho b·∫°n ƒë·∫ßu v√†o c·ª• th·ªÉ m√† ch√∫ng s·∫Ω ƒë∆∞·ª£c cho khi ch·∫°y code. B√†i to√°n tr√™n c√≥ th·ªÉ h·ªèi r·∫±ng ‚Äút√≠nh di·ªán t√≠ch h√¨nh ch·ªØ nh·∫≠t v·ªõi chi·ªÅu d√†i v√† chi·ªÅu r·ªông ƒë∆∞·ª£c nh·∫≠p‚Äù thay v√¨ cho s·∫µn 10cm v√† 2cm.  T·∫°o function return index c·ªßa element x trong array A. Input: element x v√† array A. Khi ƒë√£ x√°c ƒë·ªãnh ƒë∆∞·ª£c ƒë·∫ßu v√†o c·ªßa b√†i to√°n, vi·ªác ti·∫øp theo b·∫°n c·∫ßn l√†m l√† t√¨m ƒë·∫ßu ra c·ªßa b√†i to√°n. M·ªôt s·ªë t·ª´ g·ª£i √Ω cho ta v·ªÅ ƒë·∫ßu ra c·ªßa b√†i to√°n l√† c√°c ƒë·ªông t·ª´ nh∆∞: t√¨m, t√≠nh, find, calculate, return, ‚Ä¶ VD:  T√≠nh di·ªán t√≠ch h√¨nh ch·ªØ nh·∫≠t v·ªõi chi·ªÅu d√†i 10cm v√† chi·ªÅu r·ªông 2cm. Output: di·ªán t√≠ch c·ªßa h√¨nh ch·ªØ nh·∫≠t ƒë√£ cho.  T·∫°o function return index c·ªßa element x trong array A. Output: index c·ªßa element x. 1. 2. X√°c ƒë·ªãnh y√™u c·∫ßu x·ª≠ l√Ω c·ªßa b√†i to√°n. üñ•: M·ªôt s·ªë b√†i to√°n ch·ªâ cho Input v√† Output c·ªßa b√†i to√°n; b·∫°n ph·∫£i t·ª± t√¨m c√°ch ƒë·ªÉ x·ª≠ l√Ω Input th√†nh Output. M·ªôt s·ªë kh√°c s·∫Ω c√≥ c√°c b∆∞·ªõc, c√¥ng vi·ªác c·ª• th·ªÉ m√† b·∫°n ph·∫£i l√†m theo. VD:  T√≠nh GPA c·ªßa 3 m√¥n h·ªçc A, B, C. Processing: GPA = (A + B + C) / 3.  Write an algorithm that asks the user for a positive number. If the input is not a positive number, the program should keep asking until the user enters a positive number. Keeps track of how many time the user enters a ‚Äúwrong‚Äù number and print out at the end. Vi·∫øt thu·∫≠t to√°n h·ªèi ng∆∞·ªùi d√πng nh·∫≠p m·ªôt s·ªë d∆∞∆°ng. N·∫øu input kh√¥ng ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng ti·∫øp t·ª•c h·ªèi cho ƒë·∫øn khi nh·∫≠n ƒë∆∞·ª£c s·ªë d∆∞∆°ng. L∆∞u l·∫°i s·ªë l·∫ßn ng∆∞·ªùi d√πng nh·∫≠p m·ªôt s·ªë ‚Äúsai‚Äù v√† in ra khi k·∫øt th√∫c. Processing:  H·ªèi ng∆∞·ªùi d√πng m·ªôt s·ªë.  Ki·ªÉm tra s·ªë ƒë√≥ c√≥ d∆∞∆°ng kh√¥ng.      N·∫øu kh√¥ng, h·ªèi l·∫°i v√† tƒÉng s·ªë l·∫ßn nh·∫≠p sai l√™n m·ªôt.    N·∫øu ƒë√∫ng, d·ª´ng l·∫°i v√† in ra s·ªë l·∫ßn nh·∫°p sai. .    2. Chia nh·ªè b√†i to√°n. ‚ûó2. 1. Divide and Conquer (chia ƒë·ªÉ tr·ªã). üéÆ: N·∫øu g·∫∑p m·ªôt b√†i to√°n ƒë∆°n gi·∫£n th√¨ b·∫°n c√≥ th·ªÉ nghƒ© ra ƒë∆∞·ª£c ƒë√°p √°n lu√¥n. Tuy nhi√™n khi ph·∫£i ƒë·ªëi m·∫∑t v·ªõi c√°c b√†i to√°n ph·ª©c t·∫°p th√¨ b·∫°n kh√≥ c√≥ th·ªÉ nghƒ© ra ƒë∆∞·ª£c h∆∞·ªõng gi·∫£i quy·∫øt lu√¥n. V√¨ v·∫≠y m√† b·∫°n n√™n chia nh·ªè b√†i to√°n ƒë√≥ th√†nh c√°c ph·∫ßn d·ªÖ l√†m h∆°n. VD:  Bay t·ª´ H√† N·ªôi v√†o S√†i G√≤n. C√°c vi·ªác nh·ªè:  ƒê·∫∑t v√© m√°y bay.  ƒêi ƒë·∫øn s√¢n bay.  Quay story.  L√™n m√°y bay.  Ng·ªß.  T·∫°o m·ªôt trang Web C√°c vi·ªác nh·ªè:  T·∫°o header.  Th√™m n·ªôi dung, h√¨nh ·∫£nh, video.  Ch·ªânh s·ª≠a css ƒë·ªÉ trang web ƒë·∫πp h∆°n.  ‚Ä¶2. 2. Gi·∫£i quy·∫øt c√°c b√†i to√°n nh·ªè h∆°n. üí°: T·ª´ nh·ªØng ph·∫ßn nh·ªè n√†y ta l·∫°i c√≥ th·ªÉ chia th√†nh nh·ªØng c√¥ng vi·ªác c·ª• th·ªÉ h∆°n:  Quay story: t√¨m g√≥c ƒë·∫πp, ch·ªçn filter, di·ªÖn s√¢u,‚Ä¶ T·∫°o header: th√™m t√™n, logo, navigation (ƒëi·ªÅu h∆∞·ªõng),‚Ä¶Ngo√†i ra, c√°c b√†i to√°n c√≥ th·ªÉ kh√°c nhau nh∆∞ng ch√∫ng h·∫ßu h·∫øt ƒë·ªÅu ƒë∆∞·ª£c x√¢y d·ª±ng t·ª´ nh·ªØng ph·∫ßn, c√¥ng vi·ªác gi·ªëng nhau. Nh·∫≠n di·ªán (Pattern Recognition) ƒë∆∞·ª£c d·∫°ng c·ªßa c√°c c√¥ng vi·ªác nh·ªè n√†y r·∫•t h·ªØu √≠ch b·ªüi v√¨ c√≥ th·ªÉ b·∫°n ƒë√£ t·ª´ng gi·∫£i, t·ª´ng vi·∫øt code cho c√¥ng vi·ªác ƒë√≥ t·ª´ tr∆∞·ªõc. B·∫Øt ƒë·∫ßu t·ª´ Input, Output, k·∫øt h·ª£p v·ªõi c√°c b∆∞·ªõc nh·ªè, t·ª´ ƒë√≥ b·∫°n c√≥ th·ªÉ x√¢y d·ª±ng ƒë∆∞·ª£c c√°ch gi·∫£i quy·∫øt cho b√†i to√°n. 3. Gi·∫£i tay. ‚úèCode ƒë∆°n gi·∫£n ch·ªâ l√† ng√¥n ng·ªØ hay c√¥ng c·ª• m√† ch√∫ng ta d√πng ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ. Nh∆∞ Ti·∫øng Anh, Ti·∫øng Ph√°p, Ti·∫øng Vi·ªát,‚Ä¶ ch·ªâ l√† m·ªôt c√¥ng c·ª• ƒë·ªÉ b·∫°n b√†y t·ªè suy nghƒ© c·ªßa m√¨nh th√†nh l·ªùi, th√†nh vƒÉn. Khi ph·∫£i gi·∫£i m·ªôt b√†i to√°n h√£y b·∫Øt ƒë·∫ßu t·ª´ gi·∫£i n√≥ b·∫±ng tay tr∆∞·ªõc. H√£y nghƒ© n·∫øu v·ªõi ƒë·ªÅ b√†i ƒë√£ cho, th∆∞·ªùng b·∫°n gi·∫£i quy·∫øt n√≥ nh∆∞ th·ªÉ n√†o. T·ª´ ƒë√≥, b·∫°n c√≥ th·ªÉ ghi l·∫°i c√°c b∆∞·ªõc m√† b·∫°n ph·∫£i l√†m ƒë·ªÉ gi·∫£i b√†i to√°n ƒë√≥. VD:  T√¨m max, min c·ªßa trong c√°c s·ªë a, b, c, d, e Gi·∫£ d·ª• b·∫°n ƒë∆∞·ª£c cho c√°c s·ªë 5, 12, -2 , 2, 4.  Ta s·∫Ω nh√¨n s·ªë th·ª© nh·∫•t (5) v√† so s√°nh v·ªõi s·ªë th·ª© hai (12):12 &gt; 5 n√™n ta nh·ªõ 12 ƒëang l√† l·ªõn nh·∫•t.  Ti·∫øp t·ª•c so s√°nh 12 v·ªõi s·ªë th·ª© ba (-2):12 &gt; -2 n√™n ta v·∫´n gi·ªØ 12 l√† s·ªë l·ªõn nh·∫•t.  Ti·∫øp t·ª•c so s√°nh 12 v·ªõi s·ªë th·ª© t∆∞ (2):12 &gt; 2 n√™n ta v·∫´n gi·ªØ 12 l√† s·ªë l·ªõn nh·∫•t.  Ti·∫øp t·ª•c so s√°nh 12 v·ªõi s·ªë th·ª© nƒÉm (4):12 &gt; 4 n√™n ta v·∫´n gi·ªØ 12 l√† s·ªë l·ªõn nh·∫•t. ‚áí V·∫≠y s·ªë l·ªõn nh·∫•t l√† 12. Ta c√≥ th·ªÉ vi·∫øt l·∫°i nh·ªØng b∆∞·ªõc ƒë√≥ th√†nh: C√°c s·ªë ƒë∆∞·ª£c cho ta c√≥ th·ªÉ l∆∞u v√†o m·ªôt array (m·ªôt danh s√°ch) ƒë·ªÉ d·ªÖ truy c·∫≠p. ƒê·∫ßu ti√™n l·∫•y s·ªë ƒë·∫ßu l√† s·ªë ƒëang l·ªõn nh·∫•t. V√† v·ªã tr√≠ c·ªßa s·ªë ƒë√≥ trong array l√† 0. L·∫∑p l·∫°i cho ƒë·∫øn h·∫øt array (ƒë·∫øn h·∫øt c√°c s·ªë):  N·∫øu s·ªë ƒëang ki·ªÉm tra l·ªõn h∆°n s·ªë ƒëang l·ªõn nh·∫•t; ƒë·ªïi s·ªë ƒëang l·ªõn nh·∫•t th√†nh s·ªë ƒë√≥, v√† v·ªã tr√≠ s·ªë l·ªõn nh·∫•t th√†nh v·ªã tr√≠ hi·ªán t·∫°i.  N·∫øu kh√¥ng th√¨ ti·∫øp t·ª•c ki·ªÉm tra s·ªë ti·∫øp theo. 1234567891011array ‚Üê [a, b, c, d, e]max_element ‚Üê array[0]max_index ‚Üê 0for i ‚Üê 0 to length(array) - 1:  element = array[i]  if element &gt; max_element:    max_element ‚Üê element    max_index ‚Üê iprint max_element, max_indexƒê·ªÉ t√¨m s·ªë nh·ªè nh·∫•t ta c≈©ng l√†m g·∫ßn t∆∞∆°ng t·ª± nh∆∞ tr√™n:  Ta s·∫Ω nh√¨n s·ªë th·ª© nh·∫•t (5) v√† so s√°nh v·ªõi s·ªë th·ª© hai (12):5 &lt; 12 n√™n ta nh·ªõ 5 ƒëang l√† nh·ªè nh·∫•t.  Ti·∫øp t·ª•c so s√°nh 5 v·ªõi s·ªë th·ª© ba (-2):-2 &lt; 5 n√™n ta chuy·ªÉn -2 l√† s·ªë nh·ªè nh·∫•t.  Ti·∫øp t·ª•c so s√°nh -2 v·ªõi s·ªë th·ª© t∆∞ (2):-2 &lt; 2 n√™n ta v·∫´n gi·ªØ -2 l√† s·ªë nh·ªè nh·∫•t.  Ti·∫øp t·ª•c so s√°nh -2 v·ªõi s·ªë th·ª© nƒÉm (4):-2 &lt; 4 n√™n ta v·∫´n gi·ªØ -2 l√† s·ªë nh·ªè nh·∫•t. ‚áí V·∫≠y s·ªë nh·ªè nh·∫•t l√† -2. Ta c√≥ th·ªÉ vi·∫øt l·∫°i nh·ªØng b∆∞·ªõc n√†y th√†nh: C√°c s·ªë ƒë∆∞·ª£c cho ta c√≥ th·ªÉ l∆∞u v√†o m·ªôt array (m·ªôt danh s√°ch) ƒë·ªÉ d·ªÖ truy c·∫≠p. ƒê·∫ßu ti√™n l·∫•y s·ªë ƒë·∫ßu l√† s·ªë ƒëang nh·ªè nh·∫•t. V√† v·ªã tr√≠ c·ªßa s·ªë ƒë√≥ trong array l√† 0. L·∫∑p l·∫°i cho ƒë·∫øn h·∫øt array (ƒë·∫øn h·∫øt c√°c s·ªë):  N·∫øu s·ªë ƒëang ki·ªÉm tra nh·ªè h∆°n s·ªë ƒëang nh·ªè nh·∫•t; ƒë·ªïi s·ªë ƒëang nh·ªè nh·∫•t th√†nh s·ªë ƒë√≥, v√† v·ªã tr√≠ s·ªë nh·ªè nh·∫•t th√†nh v·ªã tr√≠ hi·ªán t·∫°i.  N·∫øu kh√¥ng th√¨ ti·∫øp t·ª•c ki·ªÉm tra s·ªë ti·∫øp theo. 1234567891011array ‚Üê [a, b, c, d, e]min_element ‚Üê array[0]min_index ‚Üê 0for i ‚Üê 0 to length(array) - 1:  element = array[i]  if element &lt; min_element:    min_element ‚Üê element    min_index ‚Üê iprint min_element, min_index4. Test v√† t·ªëi ∆∞u h√≥a thu·∫≠t to√°n. üß™Test th·ª≠ thu·∫≠t to√°n t√¨m ra c√°c l·ªói sai v√† gi√∫p c·∫£i thi·ªán hi·ªáu nƒÉng c·ªßa thu·∫≠t to√°n. T·ª´ ƒë√≥ b·∫°n kh√¥ng ph·∫£i t·ªën th·ªùi gian vi·∫øt code v√† ch·ªânh s·ª≠a code nhi·ªÅu l·∫ßn. Ch√∫ng ta h√£y th·ª≠ ch·∫°y thu·∫≠t to√°n t√¨m s·ªë l·ªõn nh·∫•t v√† nh·ªè nh·∫•t ·ªü tr√™n. Ch√∫ng ta s·∫Ω ch·∫°y t·ª´ng b∆∞·ªõc m·ªôt v√† ghi l·∫°i v√†o b·∫£ng ƒë·ªÉ xem thu·∫≠t to√°n ch·∫°y nh∆∞ th·∫ø n√†o, c√≥ ƒë√∫ng kh√¥ng. Cho [a, b, c, d, e] = [2, 3, 1, 10, -3]       i   element   element &gt; max_element   max_element   max_index         0   2   ¬†   2   0       1   3   True   3   1       2   1   False   3   1       3   10   True   10   3       4   -3   False   10   3   Thu·∫≠t to√°n ƒë√£ ch·∫°y ƒë√∫ng, s·ªë l·ªõn nh·∫•t l√† s·ªë th·ª© 10 v√† v·ªã tr√≠ 3 trong arrray (s·ªë th·ª© t∆∞)       i   element   element &lt; min_element   min_element   min_index         0   2   ¬†   2   0       1   3   False   2   0       2   1   True   1   2       3   10   False   1   2       4   -3   True   -3   4   Thu·∫≠t to√°n ƒë√£ ch·∫°y ƒë√∫ng, s·ªë nh·ªè nh·∫•t l√† s·ªë th·ª© -3 v√† v·ªã tr√≠ 4 trong arrray (s·ªë th·ª© nƒÉm) 5. Vi·∫øt v√† ch·∫°y code. ü§ñTrong l·∫≠p tr√¨nh, vi·∫øt code c√≥ khi l·∫°i l√† ph·∫ßn ƒë∆°n gi·∫£n nh·∫•t khi gi·∫£i m·ªôt b√†i to√°n. B·ªüi v√¨ ·ªü b∆∞·ªõc n√†y, b·∫°n ch·ªâ c·∫ßn d·ªãch l·∫°i thu·∫≠t to√°n ƒë√£ vi·∫øt th√†nh code. Ch·∫°y code c≈©ng l√† m·ªôt ph·∫ßn r·∫•t quan tr·ªçng. B∆∞·ªõc n√†y s·∫Ω ki·ªÉm tra xem code ƒë√£ ƒë√∫ng v·ªõi thu·∫≠t to√°n hay ch∆∞a, code ch·∫°y c√≥ hi·ªáu qu·∫£ hay kh√¥ng, ph·∫£i ch·ªânh s·ª≠a ch·ªó n√†o. Thu·∫≠t to√°n t√¨m s·ªë l·ªõn nh·∫•t v√† nh·ªè nh·∫•t ·ªü tr√™n vi·∫øt b·∫±ng Python: 123456789101112131415161718192021def find_max(array):  max_element = array[0]  max_index = 0   for index, element in enumerate(array):    if element &gt; max_element:      max_element = element      max_index = index  return max_element, indexdef find_min(array):  min_element = array[0]  min_index = 0  for index, element in enumerate(array):    if element &lt; min_element:      min_element = element      min_index = index  return min_element, indexV√≠ d·ª•. üí™Ch√∫ng ta ƒë√£ ƒëi qua h·∫øt c√°c b∆∞·ªõc c∆° b·∫£n ƒë·ªÉ gi·∫£i m·ªôt b√†i to√°n, b√¢y gi·ªù h√£y c√πng k·∫øt h·ª£p ch√∫ng l·∫°i nh√©. Ch√∫ng ta s·∫Ω th·ª≠ gi·∫£i b√†i to√°n:  Nh·∫≠p m·ªôt s·ªë x, tr·∫£ v·ªÅ 1 n·∫øu x l√† s·ªë nguy√™n t·ªë, n·∫øu kh√¥ng tr·∫£ v·ªÅ 0. B∆∞·ªõc 1: ph√¢n t√≠ch y√™u c·∫ßu::  Input: 1 s·ªë x Output: 1 n·∫øu x l√† s·ªë nguy√™n t·ªë n·∫øu kh√¥ng tr·∫£ v·ªÅ v·ªÅ 0. B∆∞·ªõc 2: chia nh·ªè b√†i to√°n:: Ch√∫ng ta c√≥ th·ªÉ nh√¨n ra m·ªôt s·ªë c√¥ng vi·ªác ph·∫£i l√†m:  Nh·∫≠n v√†o m·ªôt s·ªë x Ki·ªÉm tra s·ªë x c√≥ ph·∫£i l√† s·ªë nguy√™n t·ªë hay kh√¥ng     Ki·ªÉm tra x c√≥ chia h·∫øt cho s·ªë n√†o kh√°c 1 v√† ch√≠nh n√≥ kh√¥ng    N·∫øu c√≥ tr·∫£ v·ªÅ 1, N·∫øu kh√¥ng tr·∫£ v·ªÅ 0Ch√∫ng ta ph·∫£i ki·ªÉm tra x c√≥ chia h·∫øt cho s·ªë t·ª´ 1 ‚Üí x n√™n ta ph·∫£i d√πng v√≤ng l·∫∑p ·ªü ƒë√¢y,. B∆∞·ªõc 3: gi·∫£i tay:: B√¢y gi·ªù ch√∫ng ta h√£y th·ª≠ gi·∫£i tay. V√≠ d·ª• x = 7: 7 chia h·∫øt cho 1. 7 kh√¥ng chia h·∫øt cho 2. 7 kh√¥ng chia h·∫øt cho 3. 7 kh√¥ng chia h·∫øt cho 4. 7 kh√¥ng chia h·∫øt cho 5. 7 kh√¥ng chia h·∫øt cho 6. 7 chia h·∫øt cho 7. ‚áí 7 l√† s·ªë nguy√™n t·ªë V√≠ d·ª• x = 25: 25 chia h·∫øt cho 1 25 kh√¥ng chia h·∫øt cho 2 25 kh√¥ng chia h·∫øt cho 3 25 kh√¥ng chia h·∫øt cho 4 25 chia h·∫øt cho 5 ‚áí 25 kh√¥ng ph·∫£i l√† s·ªë nguy√™n t·ªë M·ªôt s·ªë tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: 0, 1 kh√¥ng l√† s·ªë nguy√™n t·ªë; 2 l√† s·ªë nguy√™n t·ªë. C√°c s·ªë nguy√™n t·ªë c≈©ng ph·∫£i l√† s·ªë t·ª± nhi√™n (&gt;0). Ta c√≥ th·ªÉ t·ªïng h·ª£p m·ªôt s·ªë b∆∞·ªõc ƒë·ªÉ gi·∫£i b√†i to√°n n√†y: 123456789is_prime(x):  if x &lt; 2:    return 0  if x = 2:    return 1  for i ‚Üê 2 to x - 1:    if x mod i = 0:      return 0  return 1B∆∞·ªõc 4: test th·ª≠ thu·∫≠t to√°n:: x = 25       i   x mod i   x mod i = 0   Output         2   1   False   ¬†       3   1   False   ¬†       4   1   False   ¬†       5   0   True   ¬†       ¬†   ¬†   ¬†   0       ¬†   ¬†   ¬†   ¬†   x = 2       x = 2   Output         True   1   x = 7       i   x mod i   x mod i = 0   Output         2   1   False   ¬†       3   1   False   ¬†       4   3   False   ¬†       5   2   False   ¬†       6   1   False   ¬†       ¬†   ¬†   ¬†   1   ·ªû ƒë√¢y ch√∫ng ta c√≥ th·ªÉ nh√¨n th·∫•y ta ph·∫£i ki·ªÉm tra x 5 l·∫ßn ƒë·ªÉ xem x c√≥ chia h·∫øt cho s·ªë n√†o kh√¥ng. Ta c√≥ th·ªÉ t·ªëi ∆∞u h√≥a thu·∫≠t to√°n n√†y n·∫øu ta ch·ªâ ki·ªÉm tra ƒë·∫øn sqrt(x). V√≠ d·ª• nh∆∞ s·ªë 100: 100 = 2 x 50 = 4 x 25 = 5 x 20 = 10 x 10 = 20 x 5 = 25 x 4 = 50 x 2 N·∫øu m√† 100 chia h·∫øt cho 50 th√¨ n√≥ ph·∫£i chia h·∫øt cho 2 n·∫øu 100 chia h·∫øt cho 25 th√¨ ph·∫£i chia h·∫øt cho 4, ‚Ä¶ N·∫øu s·ªë x kh√¥ng chia h·∫øt cho s·ªë n√†o t·ª´ 2 ‚Üí sqrt(x) th√¨ n√≥ c≈©ng kh√¥ng th·ªÉ chia h·∫øt cho s·ªë n√†o t·ª´ sqrt(x) ‚Üí x. Ch√≠nh v√¨ v·∫≠y m√† ta ch·ªâ c·∫ßn ki·ªÉm tra ƒë·∫øn sqrt(x). Ta ch·ªânh l·∫°i thu·∫≠t to√°n th√†nh: 123456789is_prime(x):  if x &lt; 2:    return 0  if x = 2:    return 1  for i ‚Üê 2 to sqrt(x):    if x mod i = 0:      return 0  return 1ƒê√¢y c≈©ng ch∆∞a ph·∫£i l√† thu·∫≠t to√°n t·ªëi ∆∞u nh·∫•t. N·∫øu b·∫°n mu·ªën t√¨m hi·ªÉu s√¢u h∆°n hay ƒë·ªçc: Primality test - Wikipedia B∆∞·ªõc 5: vi·∫øt v√† ch·∫°y code:: Thu·∫≠t to√°n vi·∫øt b·∫±ng Python: 1234567891011121314from math import sqrtdef is_prime(x):  if x &lt; 2:    return 0  if x == 2:    return 1  i = 2  stop_place = sqrt(x)  while i &lt;= stop_place:    if x % i == 0:      return 0    i += 1  return 1Ch√∫ng ta c√≥ th·ªÉ vi·∫øt m·ªôt ƒëo·∫°n code nhanh ƒë·ªÉ test thu·∫≠t to√°n tr√™n: 12345while True:  x = input()  if not x. isnumeric():    break  print(is_prime(int(x))) Sau m·ªôt s·ªë l·∫ßn th·ª≠ th√¨ ta c√≥ th·ªÉ th·∫•y thu·∫≠t to√°n v√† code c·ªßa ch√∫ng ta ƒë√£ ch·∫°y ƒë∆∞·ª£c. V·∫≠y l√† ch√∫ng ta ƒë√£ ho√†n th√†nh vi·ªác gi·∫£i b√†i to√°n r·ªìi. T·ªïng k·∫øt. üéâK·∫øt l·∫°i, ƒë·ª´ng n·∫£n ch√≠ khi b·∫°n g·∫∑p c√¥ng vi·ªác kh√≥ hay kh√¥ng bi·∫øt ph·∫£i gi·∫£i m·ªôt b√†i to√°n t·ª´ ƒë√¢u. H√£y b√¨nh tƒ©nh, l√†m t·ª´ng b∆∞·ªõc m·ªôt. V√† ƒë·ªôt nhi√™n b·∫°n s·∫Ω nh·∫≠n th·∫•y b√†i to√°n ƒë√≥ d·ªÖ h∆°n tr∆∞·ªõc. M·ªçi b√†i to√°n ƒë·ªÅu c√≥ th·ªÉ gi·∫£i ƒë∆∞·ª£c, ch√∫ng ta ch·ªâ c·∫ßn c√≥ m·ªôt h∆∞·ªõng ƒëi ƒë√∫ng v√† s·ª± s·ª± ki√™n tr√¨. "
    }, {
    "id": 9,
    "url": "https://usth-coders-club.github.io/GUI-vs-CLI/",
    "title": "So s√°nh GUI v√† CLI",
    "body": "2022/05/13 - H·ªá ƒëi·ªÅu h√†nh l√† th·ª© ƒëem l·∫°i s·ª± t∆∞∆°ng t√°c t·ªët h∆°n gi·ªØa ng∆∞·ªùi d√πng v√† thi·∫øt b·ªã. H·ªá ƒëi·ªÅu h√†nh cung c·∫•p 2 giao di·ªán ch√≠nh gi√∫p ng∆∞·ªùi d√πng t∆∞∆°ng t√°c, ƒë√≥ l√† giao di·ªán ƒë·ªì h·ªça (GUI) v√† giao di·ªán d√≤ng l·ªánh (CLI). Ng∆∞·ªùi s·ª≠ d·ª•ng giao di·ªán ƒë·ªì h·ªça t∆∞∆°ng t√°c v·ªõi thi·∫øt b·ªã ho·∫∑c ph·∫ßn m·ªÅm qua c√°c bi·ªÉu t∆∞·ª£ng ƒë·ªì h·ªça trong khi giao di·ªán d√≤ng l·ªánh l√† ƒë∆∞·ª£c bi·ªÉu th·ªã b·∫±ng vƒÉn b·∫£n, ·ªü ƒë√≥ ng∆∞·ªùi d√πng nh·∫≠p c√°c c√¢u l·ªánh ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng v√† v·∫≠n h√†nh m√°y t√≠nh ho·∫∑c ph·∫ßn m·ªÅm. Trong b√†i vi·∫øt n√†y, UCC s·∫Ω gi√∫p b·∫°n gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc v·ªÅ kh√°i ni·ªám c·ªßa giao di·ªán ƒë·ªì h·ªça (GUI) v√† giao di·ªán d√≤ng l·ªánh (CLI), ch·ª©c nƒÉng ho·∫°t ƒë·ªông c·ªßa m·ªói c√°i, c√°ch ch√∫ng ho·∫°t ƒë·ªông kh√°c nhau nh∆∞ th·∫ø n√†o v√† khi n√†o n√™n s·ª≠ d·ª•ng hai giao di·ªán ƒë√≥ 1. So s√°nh t·ªïng quan:       ¬†   Giao di·ªán ƒë·ªì h·ªça (Graphical User Interface)   Giao di·ªán d√≤ng l·ªánh(Command Line Interface)         Ph∆∞∆°ng th·ª©c ho·∫°t ƒë·ªông   Giao di·ªán d·ª±a tr√™n ƒë·ªì h·ªça, gi√∫p ng∆∞·ªùi d√πng giao ti·∫øp v·ªõi m√°y t√≠nh th√¥ng qua ƒë·ªì h·ªça tr·ª©c quan nh∆∞ bi·ªÉu t∆∞·ª£ng, n√∫t,‚Ä¶   Giao di·ªán d·ª±a tr√™n vƒÉn b·∫£n ,gi√∫p ng∆∞·ªùi d√πng giao ti·∫øp v·ªõi may th√¥ng qua nh·∫≠p l·ªánh vƒÉn b·∫£n, code, script       Y√™u c·∫ßu thi·∫øt b·ªã   GUI y√™u c·∫ßu ng∆∞·ªùi d√πng c√≥ chu·ªôt v√† b√†n ph√≠m   CLI ch·ªâ y√™u c·∫ßu ng∆∞·ªùi d√πng c√≥ b√†n ph√≠m       ƒê·ªô ph·ª©c t·∫°p   D·ªÖ d√†ng s·ª≠ d·ª•ng v√¨ c√≥ giao di·ªán ƒë·ªì h·ªça v√† kh√¥ng c·∫ßn ghi nh·ªõ c√¢u l·ªánh   Kh√≥ s·ª≠ d·ª•ng v√¨ c·∫ßn ghi nh·ªõ c√¢u l·ªánh       ƒê·ªëi t∆∞·ª£ng h∆∞·ªõng ƒë·∫øn   Ng∆∞·ªùi d√πng m√°y t√≠nh b√¨nh th∆∞·ªùng   L·∫≠p tr√¨nh vi√™n,chuy√™n vi√™n qu·∫£n tr·ªã m·∫°ng, c∆° s·ªü d·ªØ li·ªáu,‚Ä¶       T·ªëc ƒë·ªô l√†m vi·ªác   Giao di·ªán ƒë·ªì hoa th∆∞·ªùng s·ª≠ d·ª•ng chu·ªôt ƒë·ªÉ thao t√°c n√™n th∆∞·ªùng ch·∫≠m h∆°n   Giao di·ªán d√≤ng l·ªánh s·ª≠ d·ª•ng b√†n ph√≠m n√™n thao t√°c l√†m vi·ªác nhanh h∆°n   1. 1 Kh√°i ni·ªám giao di·ªán ƒë·ªì h·ªça (GUI): Giao di·ªán ƒë·ªì h·ªça (Graphical User Interface hay GUI) l√† m·ªôt d·∫°ng giao di·ªán cho ph√©p ng∆∞·ªùi d√πng t∆∞∆°ng t√°c v·ªõi m√°y t√≠nh ho·∫∑c thi·∫øt b·ªã ƒëi·ªán t·ª≠ th√¥ng qua c√°c h√¨nh ·∫£nh, bi·ªÉu t∆∞·ª£ng ƒë·ªì h·ªça ho·∫∑c ch·ªâ b√°o √¢m thanh thay v√¨ giao di·ªán ng√¥n ng·ªØ, c√¢u l·ªánh ho·∫∑c ƒëi·ªÅu h∆∞·ªõng vƒÉn b·∫£n. ƒê∆∞·ª£c ph√°t tri·ªÉn v√†o nh·ªØng nƒÉm 70 c·ªßa th·∫ø k·ª∑ tr∆∞·ªõc v√† tri·ªÉn khai th∆∞∆°ng m·∫°i h√≥a tr√™n m√°y t√≠nh Macintosh c·ªßa Apple (H·ªá ƒëi·ªÅu h√†nh MacOS) v√† h·ªá ƒëi·ªÉu h√†nh Windows v·ªõi m·ª•c ƒë√≠ch gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ v·ªÅ hi·ªáu qu·∫£ s·ª≠ d·ª•ng cho ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng. Giao di·ªán ƒë·ªì h·ªça tr·ªü th√†nh chu·∫©n m·ª±c trong thi·∫øt k·∫ø l·∫•y ng∆∞·ªùi d√πng l√†m trung t√¢m c·ªßa l·∫≠p tr√¨nh ·ª©ng d·ª•ng, cung c·∫•p cho ng∆∞·ªùi d√πng kh·∫£ nƒÉng ƒëi·ªÅu h√†nh m√°y t√≠nh th√¥ng qua h√¨nh ·∫£nh ƒë·ªì h·ªça nh∆∞ n√∫t b·∫•m, th√†nh tr∆∞·ª£t, c·ª≠a s·ªï v√† con tr·ªè chu·ªôt. 1. 2 Kh√°i ni·ªám giao di·ªán d√≤ng l·ªánh (CLI): Giao di·ªán d√≤ng l·ªánh (Command Line Interface hay CLI) l√† giao di·ªán ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ng∆∞·ªùi s·ª≠ d·ª•ng c√≥ th·ªÉ ra m·ªánh l·ªánh cho m√°y t√≠nh th·ª±c hi·ªán ch·ªâ b·∫±ng b√†n phim th√¥ng qua c√°c c√¢u l·ªánh. Giao di·ªán n√†y cho ph√©p ng∆∞·ªùi d√πng thao t√°c vi·∫øt c√°c l·ªánh trong c·ª≠a s·ªï console ho·∫∑c terminal ƒë·ªÉ c√≥ th·ªÉ giao ti·∫øp v·ªõi h·ªá th·ªëng m√°y t√≠nh. Giao di·ªán d√≤ng l·ªánh c√≥ ƒë·ªô ch√≠nh x√°c c·ª±c cao v√† nghi√™m ng·∫∑t v√¨ l√† do t·ª± b·∫£n th√¢n ng∆∞·ªùi d√πng s·ª≠ d·ª•ng b√†n ph√≠m ƒë·ªÉ g√µ ra, ng∆∞·ªùi d√πng b·∫Øt bu·ªôc ph·∫£i g√µ l·ªánh ho·∫∑c t·ª± t·∫°o l·ªánh cho m√¨nh ƒë·ªÉ th·ª±c hi·ªán th√†nh c√¥ng m·ªôt t√°c v·ª• n√†o ƒë√≥. Ch∆∞∆°ng tr√¨nh v·ªõi giao di·ªán d√≤ng l·ªánh th∆∞·ªùng d·ªÖ d√†ng t·ª± ƒë·ªông h√≥a h∆°n. M·ªôt s·ªë h·ªá th·ªëng ph·∫ßn m·ªÅm tri·ªÉn khai th·ª±c hi·ªán giao di·ªán d√≤ng l·ªánh ƒë·ªÉ ƒëi·ªÅu khi·ªÉn v√† v·∫≠n h√†nh, bao g·ªìm l·∫≠p tr√¨nh m√¥i tr∆∞·ªùng v√† c√°c ch∆∞∆°ng tr√¨nh ti·ªán √≠ch. 2. Ch·ª©c nƒÉng ho·∫°t ƒë·ªông: V·ªõi nh·ªØng h·ªá th·ªëng ho·∫°t ƒë·ªông song song v·ªõi nhau trong m·ªôt h·ªá ƒëi·ªÅu h√†nh, s·ª± li√™n k·∫øt c·ªßa nh·ªØng ph·∫ßn m·ªÅm ƒë∆∞·ª£c li√™n k·∫øt m·ªôt c√°ch ch·∫∑t ch·∫Ω. Tuy v·∫≠y, c√°i nh√¨n ƒë·∫ßu ti√™n c·ªßa ƒë·∫°i ƒëa s·ªë nh·ªØng ng∆∞·ªùi d√πng hi·ªán nay l√† con chu·ªôt, emoji v√† nh·ªØng ·ª©ng d·ª•ng ƒë·ªì h·ªça cao c·∫•p. So v·ªõi th·∫ø k·ª∑ tr∆∞·ªõc ƒë√¢y, ch·∫•t l∆∞·ª£ng c·ªßa LED - th·ª© t·∫°o n√™n m√†n h√¨nh c·ªßa ch√∫ng ta hi·ªán nay - ƒë√£ v∆∞·ª£t l√™n r·∫•t nhi·ªÅu l·∫ßn nh·∫±m c·∫£i thi·ªán hi·ªáu nƒÉng v√† s·∫Øc n√©t c·ªßa h√¨nh ·∫£nh n√≥i chung. C·ªông v·ªõi s·ª± ph√°t tri·ªÉn c·ªßa kinh t·∫ø s·ªë v√† c√¥ng ngh·ªá 4. 0 ng√†y nay, vi·ªác di d·ªùi c√°c h·ªá th·ªëng l·ªói th·ªùi c≈©ng ƒë√£ mang ƒë·∫øn s·ª± ti·∫øp nh·∫≠n c·ªßa m·ªçi ng∆∞·ªùi v·ªõi giao di·ªán t∆∞∆°ng t√°c ƒë·ªì h·ªça (GUI). Ch√≠nh v√¨ v·∫≠y, b·∫°n c√≥ th·ªÉ th·∫•y GUI ·ªü kh·∫Øp m·ªçi n∆°i - k·ªÉ t·ª´ ti vi, m√°y gi·∫∑t, t·ªß l·∫°nh, ƒëi·ªÅu h√≤a ƒë·∫øn nh·ªØng h·ªá th·ªëng cao c·∫•p nh∆∞ c∆° s·ªü d·ªØ li·ªáu, ph·∫ßn m·ªÅm b√°n h√†ng ho·∫∑c h·ªá th·ªëng qu·∫£n l√Ω h√†nh tr√¨nh - t·∫•t c·∫£ nh·ªØng s·∫£n ph·∫©m tr√™n ƒë∆∞·ª£c qu·∫£n l√Ω m·ªôt c√°ch ƒë∆°n gi·∫£n v√† d·ªÖ hi·ªÉu cho m·ªçi ng∆∞·ªùi, ƒë·∫∑c bi·ªát trong c√°c t√°c v·ª• y√™u c·∫ßu s·ª± chu·∫©n x√°c v√† t√≠nh l·∫∑p l·∫°i c·ªßa c√¥ng vi·ªác. ƒê·∫∑c bi·ªát, s·ª± ph√°t tri·ªÉn c·ªßa Internet ng√†y nay ƒë√£ l√†m cho tr√¨nh duy·ªát Web nh∆∞ Google Chrome ho·∫∑c Firefox l√† m·ªôt ph√†n thi·∫øt y·∫øu c·ªßa x√£ h·ªôi. T·ª´ ƒë√≥, b·∫°n c√≥ th·ªÉ th·∫•y GUI ch√≠nh l√† c√°i nh√¨n ƒë·∫ßu ti√™n khi m·ªçi ng∆∞·ªùi nh√¨n th·∫•y v·ªÅ c√¥ng ngh·ªá ƒë√≥ - ƒë·∫πp m·∫Øt, d·ªÖ hi·ªÉu v√† ƒë∆°n gi·∫£n. Tuy v·∫≠y, nh·ªØng bi·ªÉu t∆∞·ª£ng n√†y kh√¥ng th·ªÉ ho·∫°t ƒë·ªông ƒë∆∞·ª£c khi kh√¥ng c√≥ s·ª± tr·ª£ gi√∫p c·ªßa backend - m·ªôt h·ªá th·ªëng ng·∫ßm qu·∫£n l√Ω cho t·∫•t c·∫£ nh·ªØng y√™u c·∫ßu c·ªßa b·∫°n. Ch·∫Øc h·∫≥n r·∫±ng, b·∫°n ƒë√£ g·∫∑p ph·∫£i nh·ªØng tr∆∞·ªùng h·ª£p nh∆∞: Ho·∫∑c, thi tho·∫£ng c√°c b·∫°n th·∫•y nh·ªØng ng∆∞·ªùi s·ª≠a ch·ªØa m√°y t√≠nh th∆∞·ªùng mang t√≠nh ‚Äúhacker‚Äù: Nh·ªØng th·ª© t∆∞·ªüng ch·ª´ng g√¢y hoang mang v√† kh√≥ hi·ªÉu n√†y, th·ª±c ch·∫•t n√≥ v√¥ c√πng quan tr·ªçng v·ªõi m√°y t√≠nh c·ªßa b·∫°n. ƒê√≥ l√† c√°c h·ªá th·ªëng m√£ l·ªánh (CLI) m√† thi tho·∫£ng ch√∫ng ta, nh·ªØng ng∆∞·ªùi coder th∆∞·ªùng xuy√™n g·∫∑p ph·∫£i. M·∫∑c d√π kh√¥ng c√≥ t√≠nh h·ªça mƒ© nh∆∞ GUI, nh∆∞ng ch·ª©c nƒÉng c·ªßa ch√∫ng l√† v√¥ t·∫≠n - t·ª´ vi·ªác gi√∫p b·∫°n x·ª≠ l√Ω nh·ªØng commit cho c√¥ng vi·ªác, kh·ªüi t·∫°o d·ª± √°n ho·∫∑c framework ƒë·∫øn truy h·ªìi d·ªØ li·ªáu b·ªã m·∫•t sau khi x√≥a - ch√∫ng ·ªü ƒë·∫±ng sau t·∫•m m√†n h·ªá ƒëi·ªÅu h√†nh ƒë·ªÉ ch·ªù ƒë·ª£i m·ªôt c√¥ng vi·ªác quan trong s·∫Øp t·ªõi. H∆°n n·ªØa, v·ªõi m·ªôt developer hi·ªán nay, vi·ªác s·ª≠ d·ª•ng c√°c API l√† ƒëi·ªÅu ho√†n to√†n c·∫ßn thi·∫øt - v√† t·ª´ ƒë√≥ CLI xu·∫•t hi·ªán nh∆∞ m·ªôt c√¥ng c·ª• ƒë∆°n gi·∫£n ƒë·ªÉ ch√∫ng ta k·∫øt n·ªëi th√†nh nh·ªØng h·ªá th·ªëng cao c·∫•p h∆°n m√† kh√¥ng t·ªën th·ªùi gian v√† gi√° tr·ªã. 3. ƒê·ªô thu·∫≠n ti·ªán: V·ªõi GUI, ·ª©ng d·ª•ng c√≥ nhi·ªÅu h√¨nh t∆∞·ª£ng, nhi·ªÅu b·ªô m·∫∑t v√† d√°ng v·∫ª.  M·ªôt profile tr√™n Facebook Visual Studio Code M·ªôt ph·∫ßn m·ªÅm qu·∫£n l√Ω ƒëi·ªán cho doanh nghi·ªáp V·ªõi m·ªói ng∆∞·ªùi d√πng c√¥ng ngh·ªá, tr·∫£i nghi·ªám s·ª≠ d·ª•ng c·ªßa m·ªôt s·∫£n ph·∫©m c√¥ng ngh·ªá l√† c√°i c·ªët l√µi cho s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng c·ªßa b·∫°n - v·ªõi h·ªç, s·ª± ti·ªán nghi lu√¥n ƒë·∫∑t l√™n h√†ng ƒë·∫ßu. GUI kh√¥ng ch·ªâ l√† m·ªôt n∆°i ƒë·ªÉ h·ªç c√≥ th·ªÉ th·ª±c hi·ªán c√¥ng vi·ªác - n√≥ c·∫ßn ph·∫£i tr√°nh ƒë∆∞·ª£c s·ª± ph·ª©c t·∫°p v√† kh√≥ hi·ªÉu cho nh·ªØng c√¥ng vi·ªác ƒë∆°n gi·∫£n th∆∞·ªùng ng√†y. Do v·∫≠y, ƒë·ªô nh·∫•t qu√°n c·ªßa giao di·ªán l√† y·∫øu t·ªë quan tr·ªçng ƒë·ªÉ l√†m cho GUI c√≥ s·ª± n·ªïi ti·∫øng v·ªõi ng∆∞·ªùi d√πng hi·ªán nay, v√† ch√≠nh v√¨ th·∫ø kho·∫£ng ti·ªán √≠ch c≈©ng bao qu√°t t·ª´ tho·∫£i m√°i ƒë·∫øn kh√≥ ch·ªãu. M·ªôt v√≠ d·ª• ƒëi·ªÉn h√¨nh l√† c√°ch ƒë·ªÉ th√™m m√°y in v√†o h·ªá th·ªëng, v·ªõi Windows: V√† v·ªõi Linux: V·ªõi Windows, bi·ªÉu th·ªã m√°y in ƒë∆∞·ª£c hi·ªán r√µ r√†ng b·∫±ng d·∫•u c·ªông v√† d√≤ng ch·ªØ ‚ÄúAdd a printer or scanner‚Äù. C√°ch th·ª©c n√†y c≈©ng ƒë∆∞·ª£c th·ª±c hi·ªán tr√™n Linux, tuy v·∫≠y c√°c thu·∫≠t ng·ªØ nh∆∞ LPT, URI ho·∫∑c SAMBA s·∫Ω mang ƒë·∫øn s·ª± hoang mang cho ng∆∞·ªùi d√πng n·∫øu kh√¥ng ƒë∆∞·ª£c h∆∞·ªõng d·∫´n c·ª• th·ªÉ. Tr√°i ng∆∞·ª£c v·ªõi GUI, CLI ƒë∆∞·ª£c qu·∫£n l√Ω m·ªôt c√°ch ƒë∆°n gi·∫£n h∆°n - ch·ªØ tr·∫Øng trong n·ªÅn ƒëen, n√™n s·ª± ti·ªán nghi ƒë∆∞·ª£c nh·∫•t qu√°n theo h∆∞·ªõng d√πng c·ªßa m·ªói ng∆∞·ªùi - b·∫°n ho·∫∑c th√≠ch ho·∫∑c kh√¥ng th√≠ch h·∫≥n. Tuy v·∫≠y, c√≥ th·ªÉ th·∫•y ƒë∆∞·ª£c nhi·ªÅu ngo·∫°i l·ªá, nh·∫•t l√† nh·ªØng h·ªá ƒëi·ªÅu h√†nh UNIX nh∆∞ MacOS hay Linux s·ª≠ d·ª•ng Unicode ƒë·ªÉ tr·∫£i nghi·ªám s·ª± d·ª•ng ƒë·∫πp g·∫ßn nh∆∞ GUI, cho ph√©p ng∆∞·ªùi d√πng t√πy ch·ªânh t√¥ng m√†u, ph√¥ng ch·ªØ, v. v.  neofetch, m·ªôt c√¥ng c·ª• x·ª≠ l√Ω th√¥ng tin c·ªßa ph·∫ßn c·ª©ng m√°y t√≠nh ƒê·∫∑c bi·ªát, s·ª± ti·ªán nghi c·ªßa CLI so v·ªõi th·ªùi tr∆∞·ªõc ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán kh√° r√µ r·ªát, th·∫≠m ch√≠ c√≥ th·ªÉ nhanh h∆°n v·ªõi c√°c d·ª•ng c·ª• h·ªó tr·ª£ cho l·∫≠p tr√¨nh vi√™n. V√≠ d·ª•, ƒë·ªÉ c√†i m·ªôt ·ª©ng d·ª•ng nh∆∞ MySQL b·∫±ng giao di·ªán, ch√∫ng ta s·∫Ω:  T√¨m MySQL tr√™n Google V√†o trang ch·ªß T√¨m m·ª•c ‚Äù Download ‚Äú trong r·∫•t nhi·ªÅu c√°c m·ª•c kh√°c Tr∆∞·ª£t xu·ªëng cu·ªëi trang ƒë·ªÉ t√¨m ph√≠m ‚ÄúMySQL Community (GPL) Downloads ‚Äú Ch·ªçn t√πy ch·ªçn trong danh s√°ch (?) Ch·ªçn b·ªô c√†i Web ho·∫∑c Offline ‚Ä¶V·ªõi CLI, ch√∫ng ta ch·ªâ c·∫ßn kh·ªüi ƒë·ªông tr√¨nh m√£ l·ªánh, v√† nh·∫≠p  choco install mysql cho Windows, ho·∫∑c apt install mysql cho Linuxl√† xong. 4. T·ªëc ƒë·ªô l√†m vi·ªác: Khi t·ªëc ƒë·ªô l√† ƒëi·ªÅu hi·ªÉn nhi√™n, m·ªôt c√¢u h·ªèi ƒë∆∞·ª£c ƒë·∫∑t ra l√†  ‚ÄúS·ª± ƒëa d·∫°ng c·ªßa GUI hay kh·∫£ nƒÉng c·ªßa CLI s·∫Ω t·ªët h∆°n?‚Äù ƒê·ªÉ ƒë√°nh gi√° ƒë∆∞·ª£c ƒëi·ªÉm n√†y r·∫•t kh√≥ v√¨ ch√≠nh c√¥ng vi·ªác v√† ƒë·ªô kh√≥ l√†m n√™n √Ω ki·∫øn c·ªßa b·∫°n, tuy v·∫≠y, ch√∫ng m√¨nh c√≥ th·ªÉ ƒë∆∞a ra m·ªôt s·ªë c√°i m·∫°nh v√† ƒëi·ªÉm khu·∫•t c·ªßa GUI v√† CLI nh∆∞ sau: 4. 1 UI:  Kh·∫£ nƒÉng di·ªÖn ƒë·∫°t c·ªßa GUI l√† m·ªôt ƒëi·ªÉm r·∫•t l·ªõn - n√≥ t·∫°o cho ng∆∞·ªùi d√πng m·ªôt th√≥i quen t∆∞∆°ng t√°c gi·ªëng v·ªõi vi·ªác l·∫∑p l·∫°i c√°c ƒë·ªông t√°c ngo√†i th·ª±c t·∫ø m√† kh√¥ng c·∫ßn k·ªπ nƒÉng chuy√™n ng√†nh cao.  Tuy v·∫≠y, ch√≠nh s·ª± t∆∞∆°ng t√°c n√†y c√≥ th·ªÉ l√†m gi·∫£m th·ªùi gian ho·∫°t ƒë·ªông th√¥ng th∆∞·ªùng do vi·ªác ki·ªÉm so√°t d·ªØ li·ªáu kh√¥ng th·ªÉ ƒë·∫£m b·∫£o l·ªõn b·∫±ng nh·ªØng ph·∫ßn m·ªÅm c√≥ c·∫•u tr√∫c ƒë∆°n gi·∫£n, m√† ƒë·∫°i ƒëa s·ªë l√† c√°c b·ªô m√£ l·ªánh - th·ªÉ hi·ªán cho t√≠nh t∆∞∆°ng ƒë·ªëi c·ªßa ng∆∞·ªùi d√πng.  H∆°n n·ªØa, vi·ªác ch·∫°y m·ªôt ·ª©ng d·ª•ng ƒë·ªì h·ªça ch·∫Øc ch·∫Øn s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn hi·ªáu nƒÉng do vi·ªác v·∫Ω l√™n m√†n h√¨nh l√† m·ªôt ch·ª©c nƒÉng t·ªën k√©m, ƒë·∫∑c bi·ªát c√≥ th·ªÉ ph·∫£i s·ª≠ d·ª•ng ƒë·∫øn ph·∫ßn c·ª©ng chuy√™n bi·ªát nh∆∞ card x·ª≠ l√Ω ƒë·ªì h·ªça (GPU). Tuy v·∫≠y, c√°c m√°y t√≠nh hi·ªán ƒë·∫°i th·ªùi nay ƒë·ªÅu ƒëa ph·∫ßn c√≥ GPU ƒë∆∞·ª£c ƒë·∫∑t s·∫µn n√™n th·ªùi gian ph·∫£n ·ª©ng c·ªßa ch√∫ng c√≥ gi·∫£m b·ªõt ƒë√¥i ch√∫t. 4. 2 CLI:  Ch·∫Øc ch·∫Øn r√†ng, c√°c b·ªô th·ª±c thi l·ªánh c√≥ hi·ªáu nƒÉng cao h∆°n so v·ªõi GUI - th·∫≠m ch√≠ c√≥ m·ªôt s·ªë tr√¨nh so·∫°n m√£ nh∆∞ Alacritty ho·∫∑c Kitty cho ph√©p ng∆∞·ªùi d√πng s·ª≠ d·ª•ng GPU thay th·∫ø, t·ª´ ƒë√≥ tƒÉng t·ªëc qu√° tr√¨nh th·ª±c thi l·ªánh h∆°n.  S·ª± ƒë·∫∑c bi·ªát c·ªßa h·ªá th·ªëng m√£ l·ªánh l√† t√≠nh tuy√™t ƒë·ªëi - t·∫•t c·∫£ c√°c d·ªØ li·ªáu nh·∫≠p v√†o ƒë·ªÅu tr·∫£ ra c√°c gi√° tr·ªã t∆∞∆°ng ƒë∆∞∆°ng. Ch√≠nh v√¨ v·∫≠y, b·∫°n c√≥ th·ªÉ t·∫°o ra c√°c scriptlet - c√°c file ƒë·ªÉ th·ª±c thi c√°c c√¢u l·ªánh ph·ª©c t·∫°p m·ªôt c√°ch ng·∫Øn g·ªçn, t·ª´ ƒë√≥ l√†m gi·∫£m c√¥ng ƒëo·∫°n l√†m vi·ªác so v·ªõi GUI.  M·ªôt ƒëi·ªÉm y·∫øu kh√° r√µ r·ªát c·ªßa CLI n√≥i chung ch√≠nh l√† d·ªØ li·ªáu ƒë·∫ßu v√†o ph·∫£i r·∫•t ch√≠nh x√°c v√† c·ª• th·ªÉ. M·ªôt sai s√≥t c√≥ th·ªÉ l√†m cho t·∫•t c·∫£ b·ªô l·ªánh kh√¥ng ch·∫•p nh·∫≠n d·ªØ li·ªáu v√† b√°o l·ªói, t·ª´ ƒë√≥ g√¢y m·∫•t th·ªùi gian x·ª≠ l√Ω c√°c t√°c v·ª•. 5. T·ªëc ƒë·ªô ho√†n thi·ªán: L√† m·ªôt l·∫≠p tr√¨nh vi√™n, ch·∫Øc ch·∫Øn b·∫°n mu·ªën ph·∫ßn m·ªÅm c·ªßa m√¨nh ƒë∆∞·ª£c ho√†n thi·ªán nhanh v√† ƒë·∫πp?       GUI c√≥ th·ªÉ:   CLI c√≥ th·ªÉ:         Gi√∫p b·∫°n c√≥ ƒë∆∞·ª£c giao di·ªán m√† b·∫°n mong mu·ªën b·∫±ng Design Framework   T√πy ch·ªânh c√°ch nh√¨n c·ªßa tr√¨nh m√£ l·ªánh nh∆∞ m√†u s·∫Øc       T∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng m·ªôt c√°ch d·ªÖ d√†ng h∆°n   Cho ng∆∞·ªùi d√πng c·ªßa b·∫°n s·ª± t√≤ m√≤ v√† hi·ªÉu bi·∫øt v·ªÅ m√°y t√≠nh       ƒê∆∞a ph·∫ßn m·ªÅm c·ªßa b·∫°n ƒë·∫øn nhi·ªÅu g√≥c ƒë·ªô s·ª≠ d·ª•ng kh√°c nhau   Th·ª±c hi·ªán m·ªôt c√¥ng vi·ªác nhanh ch√≥ng v√† ch√≠nh x√°c         GUI h·∫°n ch·∫ø:   CLI h·∫°n ch·∫ø:         Th·ªùi gian t·∫°o ·ª©ng d·ª•ng d√†i v√† kh·∫£ nƒÉng bug cao   Kh√¥ng h·ªØu √≠ch v·ªõi ng∆∞·ªùi d√πng th∆∞·ªùng, ngo·∫°i tr·ª´ m·ªôt s·ªë tr∆∞·ªùng h·ª£p chuy√™n m√¥n       C·∫ßn c√≥ hi·ªÉu bi·∫øt v·ªÅ framework ƒë·ªì h·ªça   C·∫ßn c√≥ hi·ªÉu bi·∫øt v·ªÅ API, syscall, c√°c module b·∫≠c th·∫•p, ‚Ä¶   6. Khi n√†o v√† t·∫°i sao n√™n d√πng GUI v√† CLI: 6. 1 ƒê·ªëi v·ªõi giao di·ªán ƒë·ªì h·ªça (GUI): V·ªõi ng∆∞·ªùi th∆∞·ªùng, vi·ªác s·ª≠ d·ª•ng giao di·ªán d√≤ng l·ªánh ƒë√¥i khi l√† kh√¥ng c·∫ßn thi·∫øt v√¨ n√≥ ƒë√≤i h·ªèi ph·∫£i ph·∫£i h·ªçc h·ªèi, ghi nh·ªõ d√≤ng l·ªánh n√™n vi·ªác s·ª≠ d·ª•ng giao di·ªán ƒë·ªì h·ªça gi√∫p b·∫°n ƒë·ª° t·ªën dung lu∆∞·ª£ng n√£o v√† ti·∫øt ki·ªám th·ªùi gian cho vi·ªác h·ªçc c√°c d√≤ng l·ªánh. Ngo√†i ra trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p, giao di·ªán ƒë·ªì h·ªça c≈©ng mang l·∫°i cho b·∫°n tr·∫£i nghi·ªám th·∫©m m·ªπ v·ªÅ thi·∫øt k·∫ø c·ªßa s·∫£n ph·∫©m. ƒê·ªëi v·ªõi l·∫≠p tr√¨nh vi√™n, vi·ªác s·ª≠ d·ª•ng giao di·ªán ƒë√¥ h·ªça kh√¥ng ph·∫£i l√† vi·ªác n√™n n√© tr√°nh. B·∫£n th√¢n giao di·ªán ƒë·ªì h·ªça ƒë∆∞·ª£c sinh ra ƒë·ªÉ gi·∫£m b·ªõt th·ªùi gian g√µ b√†n ph√≠m v√† tƒÉng tu·ªïi th·ªç c·ªßa b√†n ph√≠m n√™n b·∫°n n√™n th√¥ng th√°i l·ª±a ch·ªçn khi n√†o s·ª≠ d·ª•ng giao di·ªán ƒë·ªì h·ªça v√† giao di·ªán c√¢u l·ªánh. Vi·ªác s·ª≠ d·ª•ng giao di·ªán ƒë·ªì h·ªça nhi·ªÅu c√≥ th·ªÉ gi√∫p cho c√°c developer c·ª• th·ªÉ l√† front-end developer, UI-UX designer ho·∫∑c software developer n√≥i chung c√≥ kh·∫£ nƒÉng hi·ªÉu th√™m v·ªÅ tr·∫£i nghi·ªám ng∆∞·ªùi d√πng ƒë·ªëi v·ªõi giao di·ªán ƒë·ªì h·ªça ƒë·ªÉ gi√∫p b·∫£n th√¢n c√≥ th·ªÉ thi·∫øt k·∫ø ra nh·ªØng giao di·ªán ƒë·ªì h·ªça t·ªët h∆°n .  6. 2 ƒê·ªëi v·ªõi giao di·ªán d√≤ng l·ªánh (CLI): V·ªõi ng∆∞·ªùi th∆∞·ªùng, giao di·ªán d√≤ng l·ªánh cho ph√©p b·∫°n th·ª±c hi·ªán nh·ªØng thao t√°c m√† giao di·ªán ƒë·ªì h·ªça kh√¥ng th·ª±c hi·ªán ƒë∆∞·ª£c . Ngo√†i ra n√≥ c√≤n gi√∫p b·∫°n hi·ªÉu th√™m v·ªÅ c√°ch m√† l·∫≠p tr√¨nh vi√™n l√†m vi·ªác v·ªõi m√°y t√≠nh. ƒê·ªëi v·ªõi l·∫≠p tr√¨nh vi√™n,th·ªùi gian l√† qu√Ω b√°u n√™n vi·ªác s·ª≠ d·ª•ng giao di·ªán d√≤ng l·ªánh l√† ƒëi·ªÅu c·∫ßn thi·∫øt, b·∫°n c√≥ th·ªÉ kh√¥ng c·∫ßn d√πng t·ªõi chu·ªôt do c√°c thao t√°c di chuy·ªÉn con tr·ªè, thay ƒë·ªïi c·ª≠a s·ªï l√†m vi·ªác ho√†n to√†n c√≥ th·ªÉ th·ª±c hi·ªán t·ª´ b√†n ph√≠m. Tay ph·∫£i c·ªßa b·∫°n s·∫Ω kh√¥ng ph·∫£i chuy·ªÉn qua chuy·ªÉn l·∫°i gi·ªØa b√†n ph√≠m ‚Äì chu·ªôt r·ªìi l·∫°i chu·ªôt ‚Äì b√†n ph√≠m n·ªØa, v·ª´a nh√¨n chuy√™n nghi·ªáp h∆°n m√† l·∫°i ti·∫øt ki·ªám ƒë∆∞·ª£c kha kh√° th·ªùi gian trong c√¥ng vi·ªác. H·∫ßu h·∫øt c√°c c√¥ng c·ª• cho developer ƒëa ph·∫ßn ƒë·ªÅu l√† giao di·ªán d√≤ng l·ªánh, v√≠ d·ª• nh∆∞: git, docker, npm,‚Ä¶. ƒë·ªÅu ƒë∆∞·ª£c ∆∞u ti√™n s·ª≠ d·ª•ng giao di·ªán d√≤ng l·ªánh ƒë∆°n gi·∫£n l√† v√¨ s·ª± nhanh ch√≥ng v√† ti·ªán l·ª£i. Ngo√†i ra n·∫øu b·∫°n c√≥ ƒë·ªãnh h∆∞·ªõng l√†m vi·ªác v·ªõi server th√¨ h·∫ßu h·∫øt c√°c server th∆∞·ªùng s·ª≠ d·ª•ng c√°c phi√™n b·∫£n ph√¢n ph·ªëi c·ªßa Linux l√†m h·ªá ƒëi·ªÅu h√†nh v√† lo·∫°i b·ªè ph·∫ßn giao di·ªán ƒë·ªì h·ªça n√™n vi·ªác hi·ªÉu v√† s·ª≠ d·ª•ng th√†nh th·∫°o giao di·ªán d√≤ng l·ªánh l√† ƒëi·ªÅu b·∫Øt bu·ªôc.  7. K·∫øt lu·∫≠n: Qua b√†i vi·∫øt n√†y, b·ªçn m√¨nh mong c√°c b·∫°n c√≥ th·ªÉ hi·ªÉu ra ƒë∆∞·ª£c s·ª± kh√°c bi·ªát gi·ªØa giao di·ªán ƒë·ªì h·ªça (graphical user interface) v√† giao di·ªán d√≤ng l·ªánh (command line interface) c≈©ng nh∆∞ c√≥ th·ªÉ ·ª©ng d·ª•ng nh·ªØng ki·∫øn th·ª©c tr√™n v√†o trong h·ªçc t·∫≠p v√† c√¥ng vi·ªác. C·∫£m ∆°n c√°c b·∫°n ƒë√£ d√†nh th·ªùi gian cho b√†i vi·∫øt c·ªßa b·ªçn m√¨nh. Ch√∫c c√°c b·∫°n c√≥ th·ªùi gian h·ªçc l·∫≠p tr√¨nh vui v·∫ª v√† b·ªï √≠ch. "
    }, {
    "id": 10,
    "url": "https://usth-coders-club.github.io/discord-music-bot-3/",
    "title": "[CODE MUSIC BOT FOR DISCORD] - Ph·∫ßn 3: L·∫≠p tr√¨nh c√°c t√≠nh nƒÉng",
    "body": "2022/05/06 - ·ªû Ph·∫ßn 2, UCC ƒë√£ c√πng c√°c b·∫°n ƒëƒÉng k√Ω t√†i kho·∫£n Bot v·ªõi Discord v√† ƒëƒÉng nh·∫≠p v√†o n√≥ b·∫±ng Javascript. Trong b√†i vi·∫øt n√†y, m√¨nh s·∫Ω h∆∞·ªõng d·∫´n c√°c b·∫°n l·∫≠p tr√¨nh ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng ƒë·ªÉ con Bot c·ªßa ch√∫ng ta ch·∫°y ƒë∆∞·ª£c nh·∫°c nh√©! C·∫•u tr√∫c ho·∫°t ƒë·ªông c·ªßa Bot: Con Bot c·ªßa ch√∫ng ta s·∫Ω c√≥ nh·ªØng l·ªánh c∆° b·∫£n c·ªßa m·ªôt Bot ch∆°i nh·∫°c:  play: Ch∆°i m·ªôt b√†i nh·∫°c pause: T·∫°m d·ª´ng nh·∫°c resume: Ti·∫øp t·ª•c ch∆°i nh·∫°c back: Quay v·ªÅ b√†i tr∆∞·ªõc skip: B·ªè qua b√†i nh·∫°c ƒëang ch∆°i nowplaying: Th√¥ng tin v·ªÅ b√†i nh·∫°c ƒëang ƒë∆∞·ª£c ch∆°i queue: Danh s√°ch c√°c b√†i nh·∫°c ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω stop: D·ª´ng ch∆°i nh·∫°cV·ªõi r·∫•t nhi·ªÅu l·ªánh nh∆∞ v·∫≠y, ch√∫ng ta c·∫ßn m·ªôt ‚Äútrung t√¢m ƒëi·ªÅu khi·ªÉn‚Äù ƒë·ªÉ c√≥ th·ªÉ x·ª≠ l√Ω. M√¨nh s·∫Ω g·ªçi file n√†y l√† handler. js. Nhi·ªám v·ª• c·ªßa file n√†y l√† ph√°t hi·ªán khi ng∆∞·ªùi d√πng mu·ªën ra l·ªánh n√†o ƒë√≥ cho Bot, sau ƒë√≥ x·ª≠ l√Ω tin nh·∫Øn h·ªç g·ª≠i ƒë·∫øn r·ªìi ch·∫°y l·ªánh t∆∞∆°ng ·ª©ng. Con Bot c·ªßa ch√∫ng ta s·∫Ω ho·∫°t ƒë·ªông theo m√¥ h√¨nh nh∆∞ sau: Object message ƒë∆∞·ª£c Discord tr·∫£ v·ªÅ khi k√≠ch ho·∫°t event ‚ÄúmessageCreate‚Äù s·∫Ω ƒë∆∞·ª£c truy·ªÅn v√†o file handler. js. T·∫°i ƒë√¢y, ch√∫ng ta s·∫Ω ph√¢n bi·ªát xem tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i ƒë·∫øn c√≥ ph·∫£i m·ªôt l·ªánh h·ª£p l·ªá hay kh√¥ng, sau ƒë√≥ chuy·ªÉn t√°ch t√™n l·ªánh v√† argument r·ªìi truy·ªÅn xu·ªëng file t√≠nh nƒÉng t∆∞∆°ng ·ª©ng ƒë·ªÉ x·ª≠ l√Ω. V√≠ d·ª• cho d·ªÖ hi·ªÉu, gi·∫£ s·ª≠ b·∫°n g·ª≠i m·ªôt tin nh·∫Øn c√≥ n·ªôi dung ‚Äú!play L√¢u ƒë√†i t√¨nh √°i‚Äù, handler. js s·∫Ω nh·∫≠n ra tin nh·∫Øn n√†y b·∫Øt ƒë·∫ßu b·∫±ng d·∫•u ‚Äú!‚Äù (PREFIX) b√°o hi·ªáu cho bot chu·∫©n b·ªã x·ª≠ l√Ω, sau ƒë√≥ file n√†y s·∫Ω t√°ch tin nh·∫Øn ra l√†m hai ph·∫ßn: ph·∫ßn command l√† ‚Äúplay‚Äù v√† ph·∫ßn argument l√† ‚ÄúL√¢u ƒë√†i t√¨nh √°i‚Äù, r·ªìi n√≥ s·∫Ω truy·ªÅn argument n√†y v√†o file play. js. Do v·∫≠y PREFIX kh√° quan tr·ªçng. N√≥ gi√∫p con Bot c·ªßa ch√∫ng ta ph√¢n bi·ªát nh·ªØng tin nh·∫Øn c·∫ßn x·ª≠ l√Ω v√† nh·ªØng tin nh·∫Øn n√†o kh√¥ng. C√°c b·∫°n h√£y th√™m m·ªôt d√≤ng khai b√°o PREFIX v√†o file . env nh√©. ·ªû ƒë√¢y m√¨nh d√πng d·∫•u ch·∫•m than !, c√°c b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng d·∫•u g√¨ c≈©ng ƒë∆∞·ª£c: handlers. js: Nh∆∞ ƒë√£ ƒë·ªÅ c·∫≠p, file n√†y s·∫Ω x·ª≠ l√Ω tin nh·∫Øn ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng g·ª≠i ƒë·∫øn server. C√°c b·∫°n h√£y t·∫°o m·ªôt folder l√† handler v√† cho v√†o ƒë√≥ m·ªôt file handler. js nh√©: ·ªû ƒë√¢y ch√∫ng ta s·∫Ω c·∫ßn ƒë·∫øn bi·∫øn PREFIX ·ªü file . env, n√™n c√°c b·∫°n h√£y khai b√°o s·ª≠ d·ª•ng module dotenv nh√©: 1require('dotenv'). config();V√¨ ch√∫ng ta s·∫Ω c·∫ßn s·ª≠ d·ª•ng file handler. js n√†y ·ªü index. js, n√™n c√°c b·∫°n h√£y s·ª≠ d·ª•ng module. exports ƒë·ªÉ xu·∫•t h√†m x·ª≠ l√Ω ra ngo√†i: 12345module. exports = {  async handle(client, message, player) {      }}Ch√∫ng ta s·∫Ω xu·∫•t ra ngo√†i h√†m handle() ch·ª©a c√°c tham s·ªë bao g·ªìm object client, message v√† player. Okay. Vi·ªác ƒë·∫ßu ti√™n ch√∫ng ta c·∫ßn l√†m l√† ki·ªÉm tra xem tin nh·∫Øn c·ªßa ng∆∞·ªùi g·ª≠i c√≥ b·∫Øt ƒë·∫ßu b·∫±ng PREFIX hay kh√¥ng. B√™n c·∫°nh ƒë√≥ ta c≈©ng kh√¥ng mu·ªën x·ª≠ l√Ω nh·ªØng tin nh·∫Øn m√† ch√≠nh con Bot c·ªßa m√¨nh g·ª≠i ƒë·∫øn server: 1234const raw_message = message. content;if (!raw_message. startsWith(process. env. PREFIX) || message. author. bot) {  return;}N·∫øu tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i ƒë·∫øn v·ª´a b·∫Øt ƒë·∫ßu v·ªõi PREFIX l·∫°i v·ª´a kh√¥ng ph·∫£i t·ª´ Bot, ch√∫ng ta s·∫Ω x·ª≠ l√Ω ti·∫øp. B∆∞·ªõc ti·∫øp theo ta s·∫Ω t√°ch t√™n command v√† argument. V√¨ ph·∫ßn command v√† argument ƒë∆∞·ª£c ph√¢n c√°ch nhau b·ªüi d·∫•u c√°ch, ch√∫ng ta c√≥ th·ªÉ s·ª≠ d·ª•ng h√†m split(‚Äù ‚Äú) , sau ƒë√≥ l∆∞·ª£c b·ªè ph·∫ßn PREFIX ƒëi: 1const command = raw_message. split(   )[0]. substring(process. env. PREFIX. length);Ph·∫ßn c√≤n l·∫°i c·ªßa tin nh·∫Øn s·∫Ω l√† argument. Ch√∫ng ta s·∫Ω mu·ªën n√≥ l√† m·ªôt string duy nh·∫•t n√™n s·∫Ω s·ª≠ d·ª•ng h√†m join(): 1const args = raw_message. split(   ). slice(1). join(   );Ch√∫ng ta th√™m hai d√≤ng ƒë·ªÉ ki·ªÉm tra xem command v√† argument ƒë√£ ƒë∆∞·ª£c t√°ch th√†nh c√¥ng ch∆∞a nh√©: 12console. log( Command:   + command);console. log( Argument:   + args);12345678910111213141516require('dotenv'). config();module. exports = {  async handle(client, message, player) {    const raw_message = message. content;    if (!raw_message. startsWith(process. env. PREFIX) || message. author. bot) {      return;    }    const command = raw_message. split(   )[0]. substring(process. env. PREFIX. length);    const args = raw_message. split(   ). slice(1). join(   );    console. log( Command:   + command);    console. log( Argument:   + args);  }}Tr∆∞·ªõc ti√™n ch√∫ng ta c·∫ßn k·∫øt n·ªëi file handler. js n√†y v·ªõi index. js ƒë√£. ·ªû index. js, ch√∫ng ta c·∫ßn n·∫°p file handler. js v√†o m·ªôt bi·∫øn: 1const Handler = require('. /handler/handler. js');·ªû h√†m x·ª≠ l√Ω event ‚ÄúmessageCreate‚Äù, ch√∫ng ta s·∫Ω truy·ªÅn object message v√†o Handler: 123client. on('messageCreate', (message) =&gt; {  Handler. handle(client, message, player);}); Sau ƒë√≥ ch√∫ng ta b·∫•m ch·∫°y index. js th√¥i: B√¢y gi·ªù h√£y g·ª≠i th·ª≠ tin nh·∫Øn ‚Äú!play L√¢u ƒë√†i t√¨nh √°i‚Äù l√™n server:  Tu·ªµt! V·∫≠y l√† command v√† argument ƒë√£ ƒë∆∞∆°c t√°ch th√†nh c√¥ng. play. js: Ch√∫ng ta ƒë√£ ho√†n th√†nh ch·ª©c nƒÉng ƒë·∫ßu ti√™n c·ªßa file handler. js. Vi·ªác ti·∫øp theo l√† truy·ªÅn argument v√†o c√°c file ch·ª©c nƒÉng t∆∞∆°ng ·ª©ng. ƒê·∫ßu ti√™n ch√∫ng ta s·∫Ω l·∫≠p tr√¨nh file play. js c√≥ ch·ª©c nƒÉng nh·∫£y v√†o k√™nh voice c·ªßa ng∆∞·ªùi d√πng v√† ch∆°i b√†i nh·∫°c ƒë∆∞·ª£c y√™u c·∫ßu, n·∫øu Bot ƒëang ch∆°i m·ªôt b√†i r·ªìi, n√≥ s·∫Ω cho b√†i m·ªõi y√™u c·∫ßu v√†o queue. ƒê·∫ßu ti√™n b·∫°n h√£y t·∫°o m·ªôt folder commands ƒë·ªÉ l∆∞u c√°c file l·ªánh, sau ƒë√≥ t·∫°o file play. js ·ªü trong ƒë√≥ nh√©: ƒê·∫ßu ti√™n khai b√°o m·ªôt s·ªë module s·∫Ω s·ª≠ d·ª•ng: 12const { MessageEmbed } = require('discord. js');const { QueryType } = require('discord-player');Ch√∫ng ta s·∫Ω l·∫°i s·ª≠ d·ª•ng module. exports ƒë·ªÉ xu·∫•t h√†m x·ª≠ l√Ω ra ngo√†i: 12345678module. exports = {  name: 'play',  description: 'play a song',  async execute(message, client, player, args){      }}Ch√∫ng ta s·∫Ω l·∫•y th√¥ng tin v·ªÅ server v√† t√°c gi·∫£ tin nh·∫Øn: 12const guild = await client. guilds. fetch(message. guildId);const author = await guild. members. fetch(message. author. id);Ta ki·ªÉm tra xem t√°c gi·∫£ c√≥ ·ªü trong k√™nh voice n√†o kh√¥ng: 1234if (author. voice. channelId == null) {  message. channel. send('you are not in a voice channel. ');  return;}T·∫°o m·ªôt queue m·ªõi: 12345const queue = player. createQueue(message. guildId, {  metadata: {    channel: message  }});Sau ƒë√≥ ta cho bot k·∫øt n·ªëi v√†o k√™nh voice, n·∫øu c√≥ v·∫•n ƒë·ªÅ g√¨ s·∫Ω b√°o l·ªói: 123456789try {  if (!queue. connection) await queue. connect(author. voice. channelId);} catch {  queue. destroy();  return await message. channel. send({    content: 'could not join your voice channel!',    ephemeral: true,  });}N·∫øu k·∫øt n·ªëi th√†nh c√¥ng, ch√∫ng ta s·∫Ω t·∫°o m·ªôt track m·ªõi: 12345678910const track = await player. search(args, {  requestedBy: message. author. username,  searchEngine: QueryType. AUTO,});if (!track || !track. tracks. length)  return await message. channel. send({    content: `no video/song/playlist was found while searching for: ${track}`,    ephemeral: true,  });ƒêo·∫°n code tr√™n s·∫Ω t√¨m ki·∫øm b√†i nh·∫°c theo t√™n ƒë√£ nh·∫≠p. Ta kh·ªüi t·∫°o m·ªôt tin nh·∫Øn Discord Embed ƒë·ªÉ th√¥ng tin v·ªÅ b√†i nh·∫°c v·ª´a t√¨m ƒë∆∞·ª£c: 123456789101112const playEmbed = new MessageEmbed()  . setColor(`RANDOM`)  . setTitle(    `üé∂ | new ${track. playlist ? 'playlist' : 'song'} added to queue`  );// create embed with thumbnail and description for single tracksif (!track. playlist) {  const tr = track. tracks[0]  playEmbed. setThumbnail(tr. thumbnail);  playEmbed. setDescription(`${tr. title}`);}Xong xu√¥i r·ªìi ch√∫ng ta s·∫Ω cho con Bot b·∫≠t b√†i nh·∫°c n√†y l√™n, n·∫øu c√≥ m·ªôt b√†i n√†o ƒë√≥ ƒëang ƒë∆∞·ª£c b·∫≠t th√¨ bot s·∫Ω cho b√†i m·ªõi v√†o queue: 1234567891011if (!queue. playing) {  track. playlist    ? queue. addTracks(track. tracks)    : queue. play(track. tracks[0]);  return await message. channel. send({ embeds: [playEmbed] });} else if (queue. playing) {  track. playlist    ? queue. addTracks(track. tracks)    : queue. addTrack(track. tracks[0]);  return await message. channel. send({ embeds: [playEmbed] });}Oke, v·∫≠y l√† ch√∫ng ta ƒë√£ l·∫≠p tr√¨nh xong file play. js r·ªìi ƒë·∫•y: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879// necessary classesconst { MessageEmbed } = require('discord. js');const { QueryType } = require('discord-player');module. exports = {  name: 'play',  description: 'play a song. ',  async execute(message, client, player, args) {    // get ids of server and person the message was sent from    const guild = await client. guilds. fetch(message. guildId);    const author = await guild. members. fetch(message. author. id);    if (author. voice. channelId == null) {      message. channel. send('you are not in a voice channel. ');      return;    }    // create a queue for given server    const queue = player. createQueue(message. guildId, {      metadata: {        channel: message      }    });    // check for voice channel connection    try {      if (!queue. connection) await queue. connect(author. voice. channelId);    } catch {      queue. destroy();      return await message. channel. send({        content: 'could not join your voice channel!',        ephemeral: true,      });    }    // search for track with given query    const track = await player. search(args, {      requestedBy: message. author. username,      searchEngine: QueryType. AUTO,    });    if (!track || !track. tracks. length)      return await message. channel. send({        content: `no video/song/playlist was found while searching for: ${track}`,        ephemeral: true,      });    // create embed message    const playEmbed = new MessageEmbed()      . setColor(`RANDOM`)      . setTitle(        `üé∂ | new ${track. playlist ? 'playlist' : 'song'} added to queue`      );    // create embed with thumbnail and description for single tracks    if (!track. playlist) {      const tr = track. tracks[0]      playEmbed. setThumbnail(tr. thumbnail);      playEmbed. setDescription(`${tr. title}`);    }    // if queue isn't playing, add tracks to queue and play them    // if queue is playing, add tracks to queue    if (!queue. playing) {      track. playlist        ? queue. addTracks(track. tracks)        : queue. play(track. tracks[0]);      return await message. channel. send({ embeds: [playEmbed] });    } else if (queue. playing) {      track. playlist        ? queue. addTracks(track. tracks)        : queue. addTrack(track. tracks[0]);      return await message. channel. send({ embeds: [playEmbed] });    }    console. log(queue. tracks);  }}Ch√∫ng ta quay l·∫°i file handler. js ƒë·ªÉ k·∫øt n·ªëi play. js. C√°c b·∫°n th√™m m·ªôt h√†m x·ª≠ l√Ω n·∫øu t√™n command ng∆∞·ªùi d√πng nh·∫≠p l√† ‚Äúplay‚Äù: 12345if (command == 'play') {  const Play = require('. . /commands/play');  Play. execute(message, client, player, args);  return;} C√≥ v·∫ª ·ªïn r·ªìi ƒë√≥. C√°c b·∫°n h√£y ch·∫°y file index. js v√† v√†o server test th·ª≠ nh√©:       R·∫•t r√µ v√† m∆∞·ª£t „ÉΩ   ÔΩ•œâÔΩ•   „Çû   pause. js: Sau khi ƒë√£ l·∫≠p tr√¨nh t√≠nh nƒÉng ch∆°i nh·∫°c, ch√∫ng ta c·∫ßn ch·ª©c nƒÉng t·∫°m d·ª´ng. C√°c b·∫°n h√£y t·∫°o m·ªôt file c√≥ t√™n pause. js trong th∆∞ m·ª•c commands nha: Ch√∫ng ta c≈©ng s·∫Ω c·∫ßn th√¥ng tin v·ªÅ server v√† t√°c gi·∫£ tin nh·∫Øn, v√† ki·ªÉm tra xem ng∆∞·ªùi ƒë√≥ c√≥ ·ªü trong k√™nh voice kh√¥ng: 1234567891011121314module. exports = {  name: 'pause',   description: 'pauses the currently playing song. ',  async execute(message, client, player) {    const guild = await client. guilds. fetch(message. guildId);    const author = await guild. members. fetch(message. author. id);    if (author. voice. channelId == null) {      message. channel. send('you are not in a voice channel. ');      return;    }  }}Ti·∫øp ƒë√≥ ch√∫ng ta l·∫•y th√¥ng tin v·ªÅ queue nh·∫°c hi·ªán t·∫°i: 1const queue = player. getQueue(message. guildId);N·∫øu kh√¥ng c√≥ b√†i n√†o ƒëang ƒë∆∞·ª£c ch∆°i, ch√∫ng ta cho Bot th√¥ng b√°o: 123456if (!queue || !queue. playing) {  return await message. channel. send({    content: ':x: | there is no music playing in this server. ',    ephemeral: true  });}C√≤n n·∫øu c√≥, ch√∫ng ta s·ª≠ d·ª•ng h√†m setPaused() ƒë·ªÉ d·ª´ng: 123456if (queue) {  let y = queue. setPaused({ paused: true });  return await message. channel. send({    content: y ? `‚è∏ | paused. ` : `:x: | failed to pause`,  });}ƒê∆°n gi·∫£n v·∫≠y th√¥i! 123456789101112131415161718192021222324252627282930module. exports = {  name: 'pause',  description: 'pauses the currently playing song. ',  async execute(message, client, player) {    const guild = await client. guilds. fetch(message. guildId);    const author = await guild. members. fetch(message. author. id);    if (author. voice. channelId == null) {      message. channel. send('you are not in a voice channel. ');      return;    }    const queue = player. getQueue(message. guildId);    if (!queue || !queue. playing) {      return await message. channel. send({        content: ':x: | there is no music playing in this server. ',        ephemeral: true      });    }    if (queue) {      let y = queue. setPaused({ paused: true });      return await message. channel. send({        content: y ? `‚è∏ | paused. ` : `:x: | failed to pause`,      });    }  }}Ch√∫ng ta quay l·∫°i file handler. js v√† k·∫øt n·ªëi file n√†y nh√©: 12345if (command =  pause ) {  const Pause = require('. . /commands/pause');  Pause. execute(message, client, player);  return;}resume. js: ƒêi k√®m v·ªõi ch·ª©c nƒÉng t·∫°m d·ª´ng nh·∫°c, ch√∫ng ta c≈©ng c·∫ßn c√≥ ch·ª©c nƒÉng ti·∫øp t·ª•c ph·∫£i kh√¥ng? C√°c b·∫°n h√£y t·∫°o th√™m file resume. js v√†o th∆∞ m·ª•c commands nha. Code c·ªßa file n√†y s·∫Ω gi·ªëng h·ªát v·ªõi file pause. js, ch·ªâ kh√°c h√†m setPaused() ch√∫ng ta truy·ªÅn v√†o gi√° tr·ªã false: 1let y = queue. setPaused(false);123456789101112131415161718192021222324252627282930module. exports = {  name: 'resume',  description: 'resumes the currently paused song. ',  async execute(message, client, player) {    const guild = await client. guilds. fetch(message. guildId);    const author = await guild. members. fetch(message. author. id);    if (author. voice. channelId == null) {      message. channel. send('you are not in a voice channel. ');      return;    }    const queue = player. getQueue(message. guildId);    if (!queue || !queue. playing) {      return await message. channel. send({        content: ':x: | there is no music playing in this server. ',        ephemeral: true      });    }    if (queue) {      let y = queue. setPaused(false);      return await message. channel. send(        y ? '‚ñ∂ | resumed. ' : ':x: | failed to resume. '      );    }  }}C√°c b·∫°n nh·ªõ k·∫øt n·ªëi file n√†y v√†o handler. js nha: 12345if (command == 'resume') {  const Resume = require('. . /commands/resume');  Resume. execute(message, client, player);  return;}skip. js: Ch·ª©c nƒÉng b·ªè qua b√†i nh·∫°c hi·ªán t·∫°i l√† kh√¥ng th·ªÉ thi·∫øu v·ªõi m·ªôt ·ª©ng d·ª•ng ch∆°i nh·∫°c. C√°c b·∫°n h√£y t·∫°o file v·ªõi t√™n skip. js trong folder commands: Ti·∫øp theo ch√∫ng ta s·∫Ω l·∫•y th√¥ng tin v·ªÅ queue hi·ªán t·∫°i: 12345678const queue = player. getQueue(message. guildId);if (!queue) {  return await message. channel. send({    content: ':x: | no music is playing in this server',    ephemeral: true,  });}Ch√∫ng ta s·ª≠ d·ª•ng h√†m skip() ƒë·ªÉ b·ªè qua b√†i nh·∫°c, sau ƒë√≥ th√¥ng b√°o v√†o server: 1234567const currentTrack = queue. nowPlaying(). title;const success = queue. skip();return await message. channel. send({  content: success    ? `‚è≠ | skipped **${currentTrack}**`    : `:x: | failed to skip track`});1234567891011121314151617181920212223module. exports = {  name: 'skip',  description: 'skip a song. ',  async execute(message, client, player) {    const queue = player. getQueue(message. guildId);    if (!queue) {      return await message. channel. send({        content: ':x: | no music is playing in this server',        ephemeral: true,      });    }    const currentTrack = queue. nowPlaying(). title;    const success = queue. skip();    return await message. channel. send({      content: success        ? `‚è≠ | skipped **${currentTrack}**`        : `:x: | failed to skip track`    });  }}Cu·ªëi c√πng th√¨ k·∫øt n·ªëi file n√†y v√†o handler. js: 12345if (command == 'skip') {  const Skip = require('. . /commands/skip');  Skip. execute(message, client, player);  return;}back. js: Ch√∫ng ta s·∫Ω l·∫≠p tr√¨nh ch·ª©c nƒÉng quay l·∫°i v·ªÅ b√†i nh·∫°c tr∆∞·ªõc ƒë√≥. C√°c b·∫°n h√£y t·∫°o file back. js trong folder commands, sau ƒë√≥ l·∫•y th√¥ng tin v·ªÅ queue ƒëang ch·∫°y: 1234567891011121314151617const { MessageEmbed } = require('discord. js');module. exports = {  name: 'back',  description: 'plays the previous track. ',  async execute(message, client, player) {    const queue = player. getQueue(message. guildId);    if (!queue) {      return await message. channel. send({        content: ':x: | no music is playing in this server',        ephemeral: true,      });    }  }}Sau ƒë√≥ ch√∫ng ta ƒë∆°n gi·∫£n ch·ªâ c·∫ßn s·ª≠ d·ª•ng h√†m back() ƒë·ªÉ quay l·∫°i b√†i tr∆∞·ªõc, sau ƒë√≥ th√¥ng b√°o l√™n v√†o k√™nh chat: 123456789101112if (queue) {  queue. back();  const currentTrack = queue. nowPlaying();  const playEmbed = new MessageEmbed()    . setColor(`RANDOM`)    . setTitle(`üé∂ | now playing`)    . setDescription(`[${currentTrack. title}](${currentTrack. url})`)    . setThumbnail(currentTrack. thumbnail);  return await message. channel. send({ embeds: playEmbed });}12345678910111213141516171819202122232425262728293031const { MessageEmbed } = require('discord. js');module. exports = {  name: 'back',  description: 'plays the previous track. ',  // fuk  async execute(message, client, player) {    const queue = player. getQueue(message. guildId);    if (!queue) {      return await message. channel. send({        content: ':x: | no music is playing in this server',        ephemeral: true,      });    }    if (queue) {      queue. back();      const currentTrack = queue. nowPlaying();      const playEmbed = new MessageEmbed()        . setColor(`RANDOM`)        . setTitle(`üé∂ | now playing`)        . setDescription(`[${currentTrack. title}](${currentTrack. url})`)        . setThumbnail(currentTrack. thumbnail);      return await message. channel. send({ embeds: playEmbed });    }  }}Sau ƒë√≥ quay l·∫°i file handler. js v√† k·∫øt n·ªëi file n√†y: 12345if (command == 'back') {  const Back = require('. . /commands/back');  Back. execute(message, client, player);  return;}stop. js: L·ªánh n√†y c√≥ ch·ª©c nƒÉng d·ª´ng h·∫≥n ch∆°i nh·∫°c v√† x√≥a danh s√°ch c√°c b√†i nh·∫°c ƒë√£ ƒëƒÉng k√Ω. Nh·ªù s·ª± ti·ªán l·ª£i c·ªßa module discord-player, ch√∫ng ta c√≥ th·ªÉ ƒë∆°n gi·∫£n l√†m vi·ªác n√†y v·ªõi h√†m destroy(). 12345678910111213141516171819module. exports = {  name: 'stop',  description: 'stop your music and destroy your queue. ',  async execute(message, client, player) {    const queue = player. getQueue(message. guildId);        if (!queue || !queue. playing) {      return await message. channel. send({        content: ':x: | no music is being played. ',      });    }    queue. destroy();    return await message. channel. send({      content: 'üõë | successfully stopped music. ',    });  }}H√£y nh·ªõ k·∫øt n·ªëi v·ªõi file handler. js nha: 12345if (command == 'stop') {  const Stop = require('. . /commands/stop');  Stop. execute(message, client, player);  return;}nowplaying. js: T√≠nh nƒÉng l·∫•y th√¥ng tin c·ªßa b√†i nh·∫°c hi·ªán t·∫°i ƒëang ch∆°i c≈©ng r·∫•t h·ªØu √≠ch. ƒê·ªÉ l·∫≠p tr√¨nh ƒë∆∞·ª£c t√≠nh nƒÉng n√†y, c√°c b·∫°n h√£y t·∫°o file nowplaying. js trong th∆∞ m·ª•c commands v√† l·∫•y th√¥ng tin v·ªÅ queue hi·ªán t·∫°i: 12345678910111213141516const { MessageEmbed } = require('discord. js');module. exports = {  name: 'nowplaying',  description: 'displays currently playing song. ',  async execute(message, client, player) {    const queue = player. getQueue(message. guildId);    if (!queue) {      return await message. channel. send({        content: ':x: | no music is playing in this server',        ephemeral: true,      });    }  }Sau ƒë√≥ ch√∫ng ta l·∫•y th√¥ng tin v·ªÅ b√†i nh·∫°c ƒëang ƒë∆∞·ª£c ch·∫°y b·∫±ng h√†m nowPlaying(): 1const currentTrack = queue. nowPlaying();Sau ƒë√≥ ch√∫ng ta cho Bot th√¥ng b√°o l√™n server b·∫±ng m·ªôt Embed Message th·∫≠t ƒë·∫πp: 123456789101112131415161718192021222324252627282930313233const npEmbed = new MessageEmbed()  . setColor(`RANDOM`)  . setTitle(`üé∂ | now playing`)  . setDescription(`[${currentTrack. title}](${currentTrack. url})`)  . setThumbnail(currentTrack. thumbnail)  . addFields(    {      name: 'uploader',      value: currentTrack. author,      inline: true,    },    {      name: 'duration',      value: currentTrack. duration +  s ,      inline: true,    },    /*{      name: 'requested by',      value: currentTrack. requestedBy. username,      inline: true,    },*/    {      name: 'views',      value: currentTrack. views. toString(),      inline: true,    },    {      name: 'progress bar',      value: queue. createProgressBar({ timecodes: true }),    },  );return await message. channel. send({ embeds: [npEmbed] });H√£y nh·ªõ k·∫øt n·ªëi file n√†y v·ªõi handler. js nha: 12345if (command == 'nowplaying') {  const NowPlaying = require('. . /commands/nowplaying');  NowPlaying. execute(message, client, player);  return;} queue. js: Ch·ª©c nƒÉng cu·ªëi c√πng v√† c≈©ng r·∫•t h·ªØu d·ª•ng, ƒë√≥ l√† th√¥ng b√°o v·ªÅ nh·ªØng b√†i nh·∫°c ƒëang ch·ªù trong queue. ƒê·∫ßu ti√™n, ch√∫ng ta t·∫°o file queue. js trong th∆∞ m·ª•c commands, sau ƒë√≥ l·∫•y th√¥ng tin v·ªÅ queue hi·ªán t·∫°i: 1234567891011121314151617const { MessageEmbed } = require('discord. js');module. exports = {  name: 'queue',  description: 'displays current queue',  async execute(message, client, player) {    const queue = player. getQueue(message. guildId);    if (!queue) {      return await message. channel. send({        content: ':x: | no music is playing in this server',        ephemeral: true,      });    }		}}Sau ƒë√≥ ch√∫ng ta l·∫•y danh s√°ch c√°c b√†i trong queue n√†y: 1const currentTrack = queue. current;Ch√∫ng ta l·∫•y 10 b√†i ƒë·∫ßu ti√™n trong queue ƒë·ªÉ hi·ªÉn th·ªã, sau ƒë√≥ th√¥ng b√°o l√™n server b·∫±ng Embed Message: 123456789101112131415161718192021222324const tracks = queue. tracks. slice(0, 10). map((m, i) =&gt; {  return `${i + 1}. **${m. title}** ([link](${m. url}))`;});const progressBar = queue. createProgressBar({ timecodes: true });const queueEmbed = new MessageEmbed()  . setColor(`RANDOM`)  . setTitle('üé∂ | current queue')  . setDescription(    `**__now playing__ - [${currentTrack. title}](${currentTrack. url})**\n    ${progressBar}\n    ${tracks. join('\n')}${      queue. tracks. length &gt; tracks. length        ? `\n. . . ${          queue. tracks. length - tracks. length === 1            ? `{queue. tracks. length - tracks. length} more track`            : `{queue. tracks. length - tracks. length} more tracks`          }`        :       }`  );return await message. channel. send({ embeds: [queueEmbed] }); T·ªïng k·∫øt: N·∫øu c√°c b·∫°n theo m√¨nh ƒë·∫øn ƒë√¢y, ch√∫c m·ª´ng b·∫°n ƒë√£ t·ª± tay l·∫≠p tr√¨nh ra m·ªôt con bot si√™u vjp. Tr√™n ƒë√¢y, UCC ƒë√£ h∆∞·ªõng d·∫´n 8 ch·ª©c nƒÉng c∆° b·∫£n nh·∫•t c·ªßa m·ªôt con Bot Discord ch∆°i nh·∫°c. C√°c b·∫°n ho√†n to√†n c√≥ th·ªÉ th·ªèa th√≠ch s√°ng t·∫°o th√™m nh·ªØng t√≠nh nƒÉng kh√°c cho Bot, th·∫≠m ch√≠ c√≥ th·ªÉ l√†m game v·ªõi n√≥. N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, h√£y ƒë·ª´ng ng·∫ßn ng·∫°i m√† nh·∫Øn tin cho ch√∫ng t·ªõ t·∫°i fanpage nh√©! Cu·ªëi c√πng, ch√∫ng m√¨nh g·ª≠i l·∫°i c√°c b·∫°n to√†n b·ªô m√£ ngu·ªìn c·ªßa con bot t·∫°i ƒë√¢y. "
    }, {
    "id": 11,
    "url": "https://usth-coders-club.github.io/discord-music-bot-2/",
    "title": "[CODE MUSIC BOT FOR DISCORD] - Ph·∫ßn 2: M·ªôt s·ªë l·ªánh c∆° b·∫£n",
    "body": "2022/05/01 - ·ªû Ph·∫ßn 1, UCC ƒë√£ h∆∞·ªõng d·∫´n c√°c b·∫°n c√†i ƒë·∫∑t m√¥i tr∆∞·ªùng cho con bot ho·∫°t ƒë·ªông bao g·ªìm Node. js v√† m·ªôt s·ªë module ƒëi k√®m. Trong b√†i n√†y, ch√∫ng m√¨nh s·∫Ω ch·ªâ cho b·∫°n c√°ch thi·∫øt l·∫≠p m·ªôt t√†i kho·∫£n Bot trong Discord, sau ƒë√≥ ƒëƒÉng nh·∫≠p n√≥ v√† code m·ªôt s·ªë l·ªánh c∆° b·∫£n b·∫±ng Javascript. Oke g√©t g√¥! Thi·∫øt l·∫≠p t√†i kho·∫£n cho Bot: 1. ƒêƒÉng k√Ω v·ªõi Discord: ƒê·ªÉ c√≥ m·ªôt con Bot v√† ƒëi·ªÅu khi·ªÉn n√≥ b·∫±ng code, ƒë·∫ßu ti√™n ch√∫ng ta c·∫ßn ph·∫£i ƒëƒÉng k√Ω v·ªõi Discord. C√°c b·∫°n h√£y truy c·∫≠p https://discord. com/developers/appilcation: Sau ƒë√≥ h√£y b·∫•m n√∫t ‚ÄúNew Application‚Äù, sau ƒë√≥ ƒë·∫∑t cho App m·ªôt c√°i t√™n (L∆∞u √Ω: T√™n n√†y ch∆∞a ph·∫£i l√† t√™n Bot nha!): B·∫•m ‚ÄúCreate‚Äù v√† giao di·ªán d∆∞·ªõi ƒë√¢y s·∫Ω hi·ªán ra. C√°c b·∫°n h√£y b·∫•m n√∫t ‚ÄúBot‚Äù ·ªü ph√≠a b√™n tr√°i: Sau ƒë√≥ b·∫°n b·∫•m ‚ÄúAdd Bot‚Äù ƒë·ªÉ t·∫°o t√†i kho·∫£n bot: Discord s·∫Ω cho b·∫°n m·ªôt t√†i kho·∫£n bot. T·∫°i ƒë√¢y b·∫°n c√≥ th·ªÉ ƒë·ªïi t√™n cho con bot t√πy th√≠ch ·ªü √¥ ‚ÄúUSERNAME‚Äù nha! Sau ƒë√≥ nh·ªõ b·∫•m ‚ÄúSave changes‚Äù ƒë·ªÉ l∆∞u: Ti·∫øp theo, ch√∫ng ta c·∫ßn ph·∫£i c·∫•p cho Bot m·ªôt s·ªë quy·ªÅn ƒë·ªÉ n√≥ c√≥ th·ªÉ ho·∫°t ƒë·ªông m∆∞·ª£t m√†. Cu·ªôn xu·ªëng m·ªôt ch√∫t b·∫°n s·∫Ω th·∫•y m·ª•c ‚ÄúPrivileged Gateway Intents‚Äù, sau ƒë√≥ h√£y click v√†o hai n√∫t n√†y: Hai n√∫t ƒë√≥ s·∫Ω cho con Bot c·ªßa ch√∫ng ta c√≥ quy·ªÅn l·∫•y danh s√°ch th√†nh vi√™n trong server v√† ƒë·ªçc c√°c tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i trong server ƒë√≥. 2. Th√™m Bot v√†o Server: Tr∆∞·ªõc ti√™n ƒë·ªÉ th√™m m·ªôt con bot v√†o server, b·∫°n c·∫ßn t·∫°o m·ªôt server Discord tr∆∞·ªõc ƒë√£. N·∫øu b·∫°n ƒë√£ c√≥ server r·ªìi th√¨ h√£y ch·∫Øc ch·∫Øn m√¨nh c√≥ quy·ªÅn qu·∫£n l√Ω server ƒë√≥, n·∫øu kh√¥ng th√¨ b·∫°n s·∫Ω kh√¥ng th·ªÉ th√™m con Bot v√†o. ƒê·ªÉ t·∫°o m·ªôt server m·ªõi, h√£y truy c·∫≠p ƒë·∫øn https://discord. com/app, sau ƒë√≥ t√¨m ƒë·∫øn n√∫t + ·ªü ph√≠a b√™n tr√°i: Nh·∫•p ‚ÄúCreate My Own‚Äù: Nh·∫•p ‚ÄúFor me and my friends‚Äù: T·∫°i ƒë√¢y b·∫°n c√≥ th·ªÉ ƒë·∫∑t t√™n v√† ch·ªçn avatar cho server c·ªßa m√¨nh: B·∫•m ‚ÄúCreate‚Äù l√† b·∫°n ƒë√£ c√≥ server c·ªßa ri√™ng m√¨nh r·ªìi: B√¢y gi·ªù b·∫°n h√£y quay l·∫°i v·ªõi trang Applications, v√† ch·ªçn App v·ª´a t·∫°o l√∫c tr∆∞·ªõc: Ch·ªçn ‚ÄúOAuth2‚Äù v√† ‚ÄúURL Generator‚Äù: T·∫°i ƒë√¢y ch√∫ng ta s·∫Ω t·∫°o m·ªôt ƒë∆∞·ªùng link ƒë·ªÉ m·ªùi Bot v√†o server. ƒê·ªÉ l√†m ƒë∆∞·ª£c vi·ªác n√†y, c√°c b·∫°n h√£y nh·∫•p √¥ ‚ÄúBot‚Äù v√† ‚ÄúAdministrator‚Äù: Cu·ªôn xu·ªëng cu·ªëi, b·∫°n s·∫Ω th·∫•y m·ªôt ƒë∆∞·ªùng d·∫´n. H√£y copy ƒë∆∞·ªùng d·∫´n n√†y v√† m·ªü trong m·ªôt tab m·ªõi: T·∫°i ƒë√¢y b·∫°n c√≥ th·ªÉ ch·ªçn server mu·ªën th√™m Bot v√†o, sau ƒë√≥ b·∫•m ‚ÄúContinue‚Äù: Hooray v·∫≠y l√† con Bot c·ªßa ch√∫ng ta ƒë√£ ·ªü trong server r·ªìi: Code c√°c l·ªánh c∆° b·∫£n b·∫±ng Javascript: Oke v·∫≠y l√† kh√¢u chu·∫©n b·ªã ƒë√£ xong. C√°c b·∫°n h√£y b·∫≠t Visual Studio Code l√™n v√† b·∫Øt ƒë·∫ßu l·∫≠p tr√¨nh th√¥i. ƒê·∫ßu ti√™n h√£y c√†i 2 extension l√† ‚ÄúCode Runner‚Äù v√† ‚ÄúJavascript‚Äù nha:  1. ƒêƒÉng nh·∫≠p v√†o Bot: ·ªû trong Visual Studio Code, c√°c b·∫°n h√£y m·ªü th∆∞ m·ª•c ƒë√£ t·∫°o t·ª´ Ph·∫ßn 1 nh√©. Nh·∫•p v√†o File ‚ÜíOpen Folder v√† ch·ªçn th∆∞ m·ª•c c·ªßa b·∫°n: ·ªû ph·∫ßn 1 ch√∫ng ta ƒë√£ s·ª≠ d·ª•ng l·ªánh npm init ƒë·ªÉ t·∫°o file package. json qu·∫£n l√Ω c√°c module. B√¢y gi·ªù c√°c b·∫°n t·∫°o m·ªôt file m·ªõi t√™n . env nha (L∆∞u √Ω d·∫•u ch·∫•m l√† b·∫Øt bu·ªôc ƒë√≥): ·ªû file n√†y, c√°c b·∫°n h√£y th√™m m·ªôt d√≤ng ‚ÄúDISCORD_TOKEN=‚Äù nh∆∞ d∆∞·ªõi ƒë√¢y: ƒê·∫øn ƒë√¢y, c√°c b·∫°n h√£y quay l·∫°i trang ƒëƒÉng k√Ω Bot c·ªßa m√¨nh v√† t√¨m ƒë·∫øn n√∫t ‚ÄúReset Token‚Äù trong m·ª•c ‚ÄúBot‚Äù: Nh·∫•p v√†o ƒë√¢y v√† m·ªôt d√≤ng ch·ªØ lo·∫±ng ngo·∫±ng s·∫Ω hi·ªán ra: Ch√≠nh c√°i d√≤ng lo·∫±ng ngo·∫±ng n√†y l·∫°i l√† m·ªôt chi·∫øc ch√¨a kh√≥a quan tr·ªçng gi√∫p b·∫°n ƒëƒÉng nh·∫≠p ƒë∆∞·ª£c v√†o con Bot ƒë√£ t·∫°o v√† ƒëi·ªÅu khi·ªÉn n√≥. Ch√≠nh v√¨ v·∫≠y, b·∫•t k·ª≥ ai s·ªü h·ªØu d√≤ng ch·ªØ n√†y s·∫Ω c√≥ th·ªÉ ƒëi·ªÅu khi·ªÉn ƒë∆∞·ª£c con Bot c·ªßa b·∫°n. V·∫≠y n√™n ƒë·ª´ng chia s·∫ª n√≥ cho ai nh√©! (T·∫πo n·ªØa m√¨nh c≈©ng ƒë·ªïi Token ƒë√¢y). B·∫•m Copy v√† Paste n√≥ v√†o file . env c·ªßa ch√∫ng m√¨nh nh√©: Okay, b·∫Øt tay v√†o code th√¥i! Gi·ªù c√°c b·∫°n h√£y t·∫°o m·ªôt file m·ªõi c√≥ t√™n index. js: Ch√∫ng ta s·∫Ω c·∫ßn ƒë·∫øn Token ·ªü file . env l√∫c n√£y. ƒê·ªÉ n·∫°p ƒë∆∞·ª£c file n√†y, ta s·∫Ω s·ª≠ d·ª•ng module dotenv. Khai b√°o module n√†y c≈©ng ƒë∆°n gi·∫£n th√¥i: 1require('dotenv'). config();Ti·∫øp theo, ch√∫ng ta c·∫ßn n·∫°p hai object l√† Client v√† Intents trong module discord. js. Client s·∫Ω ƒë·∫£m nhi·ªám nhi·ªám v·ª• t∆∞∆°ng t√°c v·ªõi Discord API, Intents s·∫Ω c·∫•p quy·ªÅn c·∫ßn thi·∫øt cho Client: 1234const {  Client,  Intents,} = require('discord. js');Ch√∫ng ta s·∫Ω n·∫°p object Player trong module discord-player. Player s·∫Ω ƒë·∫£m nhi·ªám nhi·ªám v·ª• x·ª≠ l√Ω c√°c t√°c v·ª• v·ªÅ nh·∫°c: 1const { Player } = require('discord-player');Ch√∫ng ta s·∫Ω t·∫°o m·ªôt ‚ÄúClient‚Äù m·ªõi ƒë·ªÉ s·ª≠ d·ª•ng v√† c·∫•u h√¨nh n√≥ v·ªõi m·ªôt s·ªë quy·ªÅn: 123456const client = new Client({ intents: [  Intents. FLAGS. GUILDS,  Intents. FLAGS. GUILD_MESSAGES,  Intents. FLAGS. GUILD_VOICE_STATES,   GUILD_MEMBERS ,] });client (object ƒëi·ªÅu khi·ªÉn bot) m·ªõi t·∫°o c·ªßa ch√∫ng ta s·∫Ω c√≥ quy·ªÅn qu·∫£n l√Ω danh s√°ch server m√† n√≥ ƒë∆∞·ª£c th√™m v√†o, quy·ªÅn ƒë·ªçc tin nh·∫Øn trong server, quy·ªÅn l·∫•y tr·∫°ng th√°i k√™nh voice v√† quy·ªÅn l·∫•y danh s√°ch th√†nh vi√™n trong server. Ti·∫øp theo ch√∫ng ta c≈©ng s·∫Ω t·∫°o m·ªôt ‚ÄúPlayer‚Äù m·ªõi ƒë·ªÉ s·ª≠ d·ª•ng: 1const player = new Player(client);Khi ch√∫ng ta s·ª≠ d·ª•ng Discord, nh·ªØng h√†nh ƒë·ªông kh√°c nhau s·∫Ω k√≠ch ho·∫°t c√°c h√†m kh√°c nhau trong client. V√≠ d·ª• nh∆∞ khi ch√∫ng ta g·ª≠i tin nh·∫Øn, react tin nh·∫Øn, x√≥a tin nh·∫Øn, ‚Ä¶ . C√°c h√†nh ƒë·ªông ƒë√≥ g·ªçi l√† event, v√† con bot c·ªßa ch√∫ng ta s·∫Ω ph·∫£n h·ªìi l·∫°i nh·ªØng event ƒë√≥ theo c√°ch m√† ch√∫ng ta mu·ªën. V√≠ d·ª•, khi con bot c·ªßa ch√∫ng ta ƒë√£ ƒë∆∞·ª£c login th√†nh c√¥ng b·∫±ng Token, n√≥ s·∫Ω k√≠ch ho·∫°t m·ªôt event g·ªçi l√† ‚Äúready‚Äù. D∆∞·ªõi ƒë√¢y l√† ƒëo·∫°n code s·∫Ω ƒë∆∞·ª£c ch·∫°y n·∫øu event n√†y ƒë∆∞·ª£c k√≠ch ho·∫°t: 123client. on('ready', () =&gt; {  console. log('minccino ready!');});Khi event ‚Äúready‚Äù ƒë∆∞·ª£c k√≠ch ho·∫°t, ƒëo·∫°n code trong ngo·∫∑c nh·ªçn c·ªßa ch√∫ng ta s·∫Ω ƒë∆∞·ª£c ch·∫°y, trong tr∆∞·ªùng h·ª£p n√†y l√† in ra m·ªôt d√≤ng ‚Äúminccino ready!‚Äù. Ti·∫øp theo ch√∫ng ta h√£y th·ª≠ ƒëƒÉng nh·∫≠p v√†o con bot nh√©: 1client. login(process. env. DISCORD_TOKEN);ƒêo·∫°n process. env. DISCORD_TOKEN s·∫Ω l·∫•y bi·∫øn DISCORD_TOKEN trong file . env c·ªßa ch√∫ng ta. Xong r·ªìi b·∫•m ch·∫°y code th√¥i: D√≤ng ‚Äúminccino ready!‚Äù ƒë√£ ƒë∆∞·ª£c in ra ƒë·ªìng nghƒ©a con bot c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c login th√†nh c√¥ng. V√†o trong server Discord b·∫°n c√≥ th·ªÉ th·∫•y n√≥ ƒëang online: 2. X·ª≠ l√Ω tin nh·∫Øn ƒë∆°n gi·∫£n: Yay! V·∫≠y l√† ch√∫ng ta ƒë√£ ƒëi ƒë∆∞·ª£c n·ª≠a con ƒë∆∞·ªùng r·ªìi! Con bot n√†y m·ªõi ch·ªâ Online th√¥i ch·ª© v·∫´n ch∆∞a l√†m ƒë∆∞·ª£c g√¨ c·∫£, v√¨ ch√∫ng ta ch∆∞a x·ª≠ l√Ω c√°c event kh√°c. B√¢y gi·ªù ta s·∫Ω th·ª≠ l√†m cho con Bot n√≥i ‚ÄúPong‚Äù m·ªói khi ta g·ª≠i tin nh·∫Øn ‚ÄúPing‚Äù nh√©! M·ªói khi ng∆∞·ªùi d√πng trong server g·ª≠i m·ªôt tin nh·∫Øn, event ‚ÄúmessageCreate‚Äù s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t. C√°c b·∫°n h√£y t·∫°o m·ªôt h√†m ƒë·ªÉ x·ª≠ l√Ω n√≥ nh√©: 123client. on('messageCreate', (message) =&gt; {  console. log(message);});Khi m·ªôt tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i ƒë·∫øn, event ‚ÄúmessageCreate‚Äù s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t v√† tr·∫£ v·ªÅ m·ªôt object t√™n l√† ‚Äúmessage‚Äù l∆∞u c√°c th√¥ng tin v·ªÅ tin nh·∫Øn ƒë√≥. Ch√∫ng ta truy·ªÅn object n√†y v√†o ƒëo·∫°n code b√™n trong ngo·∫∑c nh·ªçn v√† in n√≥ ra m√†n h√¨nh xem n√≥ c√≥ nh·ªØng c√°i g√¨. C√°c b·∫°n h√£y b·∫•m ch·∫°y code, ƒë·ª£i con bot login xong v√† g·ª≠i m·ªôt tin nh·∫Øn b·∫•t k·ª≥ v√†o k√™nh chat:  C√°c b·∫°n c√≥ th·ªÉ th·∫•y Discord tr·∫£ v·ªÅ r·∫•t nhi·ªÅu th√¥ng tin v·ªÅ tin nh·∫Øn m√¨nh v·ª´a g·ª≠i, bao g·ªìm ID m√† tin ƒë√≥ ƒë∆∞·ª£c g·ª≠i, ID ng∆∞·ªùi g·ª≠i, th·ªùi gian g·ª≠i, ‚Ä¶ . ƒê·ªÉ con bot ph·∫£n h·ªìi tin nh·∫Øn ‚ÄúPing‚Äù, ch√∫ng ta c·∫ßn ki·ªÉm tra xem n·ªôi dung tin nh·∫Øn ƒë√≥ c√≥ ph·∫£i ‚ÄúPing‚Äù kh√¥ng: 12345client. on('messageCreate', (message) =&gt; {  if (message. content ==  Ping ){      }});Ch√∫ng ta truy c·∫≠p n·ªôi dung tin nh·∫Øn b·∫±ng message. content. N·∫øu n·ªôi dung ƒë√∫ng l√† ‚ÄúPing‚Äù, con Bot s·∫Ω g·ª≠i m·ªôt tin nh·∫Øn ‚ÄúPong‚Äù v√†o c√πng k√™nh chat ƒë√≥. Ch√∫ng ta truy c·∫≠p v√†o k√™nh chat c·ªßa m·ªôt tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i b·∫±ng message. channel v√† g·ª≠i tin nh·∫Øn v√†o ƒë√≥ b·∫±ng message. channel. send(‚ÄùPong‚Äù): 12345client. on('messageCreate', (message) =&gt; {  if (message. content ==  Ping ){    message. channel. send( Pong );  }});Oke Ctrl+S ƒë·ªÉ l∆∞u code v√† ch·∫°y th√¥i: 12345678910111213141516171819202122232425262728require('dotenv'). config();const {  Client,  Intents,} = require('discord. js');const { Player } = require('discord-player');const client = new Client({ intents: [  Intents. FLAGS. GUILDS,  Intents. FLAGS. GUILD_MESSAGES,  Intents. FLAGS. GUILD_VOICE_STATES,   GUILD_MEMBERS ,] });const player = new Player(client);client. on('ready', () =&gt; {  console. log('minccino ready!');});client. on('messageCreate', (message) =&gt; {  if (message. content ==  Ping ){    message. channel. send( Pong );  }}); client. login(process. env. DISCORD_TOKEN); Qu√° tuy·ªát v·ªùi! V·∫≠y l√† c√°c b·∫°n ƒë√£ l·∫≠p tr√¨nh cho Bot x·ª≠ l√Ω tin nh·∫Øn m√† ng∆∞·ªùi d√πng g·ª≠i ƒë·∫øn. Trong b√†i vi·∫øt ti·∫øp theo, UCC s·∫Ω c√πng b·∫°n l·∫≠p tr√¨nh c√°c t√≠nh nƒÉng ch∆°i nh·∫°c cho Bot nh√©! H√£y ƒë√≥n ch·ªù nha! "
    }, {
    "id": 12,
    "url": "https://usth-coders-club.github.io/discord-music-bot-1/",
    "title": "[CODE MUSIC BOT FOR DISCORD] - Ph·∫ßn 1: C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng",
    "body": "2022/04/29 - ƒê·∫ßu ti√™n, UCC xin ch√¢n th√†nh c·∫£m ∆°n c√°c b·∫°n ƒë√£ quan t√¢m v√† tham gia bu·ªïi Seminar t·∫°o Discord Music Bot v·ª´a qua. C√≥ l·∫Ω s·∫Ω c√≥ nhi·ªÅu b·∫°n ch∆∞a th·ªÉ tham gia hay v·∫´n c√≤n c·∫£m th·∫•y ch∆∞a r√µ v·ªÅ bu·ªïi Seminar ƒë√≥. H√¥m nay, UCC s·∫Ω c√≥ m·ªôt series blog v·ªÅ c√°ch h∆∞·ªõng d·∫´n t·∫°o m·ªôt con bot c√≥ th·ªÉ ch∆°i nh·∫°c tr√™n Discord v√¥ c√πng chi ti·∫øt. ·ªû b√†i blog ƒë·∫ßu ti√™n n√†y m√¨nh s·∫Ω h∆∞·ªõng d·∫´n c√°c b·∫°n c√°ch c√†i ƒë·∫∑t m√¥i tr∆∞·ªùng ƒë·ªÉ con bot Discord c√≥ th·ªÉ ch·∫°y tr√™n m√°y t√≠nh c·ªßa b·∫°n. √Ä, n·∫øu c√≥ g√¨ v·∫´n c√≤n bƒÉn khoƒÉn th√¨ b·∫°n c√≥ th·ªÉ inbox tr·ª±c ti·∫øp fanpage c·ªßa UCC ƒë·ªÉ h·ªèi, ch√∫ng m√¨nh lu√¥n s·∫µn s√†ng gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc c·ªßa b·∫°n. C√†i ƒë·∫∑t Node. js: V√¨ ng√¥n ng·ªØ m√¨nh s·ª≠ d·ª•ng l√† JavaScript, n√™n tr∆∞·ªõc khi code bot m√¨nh s·∫Ω ti·∫øn h√†nh c√†i Node. js. Node. js l√† m·ªôt m√¥i tr∆∞·ªùng ƒë·ªôc l·∫≠p gi√∫p b·∫°n c√≥ th·ªÉ th·ª±c hi·ªán ch·∫°y code JavaScript b√™n ngo√†i tr√¨nh duy·ªát. ƒê·ªÉ c√†i ƒë·∫∑t Node. js b·∫°n truy c·∫≠p website nodejs. org v√† ch·ªçn b·∫£n LTS (long-term support) b·ªüi ƒë√¢y l√† phi√™n b·∫£n ·ªïn ƒë·ªãnh nh·∫•t.  Sau khi ƒë√£ t·∫£i v·ªÅ, b·∫°n m·ªü n√≥ l√™n v√† ti·∫øn h√†nh c√†i ƒë·∫∑t nh∆∞ t·ª´ng b∆∞·ªõc nh∆∞ h√¨nh:  C√°c b·∫°n b·∫•m Next ƒë·ªÉ ti·∫øp t·ª•c  T√≠ch v√†o √¥ ch·∫•p nh·∫≠n ƒëi·ªÅu kho·∫£n r·ªìi ti·∫øp t·ª•c b·∫•m Next  Ch·ªçn v·ªã tr√≠ n∆°i b·∫°n mu·ªën l∆∞u r·ªìi ti·∫øp t·ª•c b·∫•m Next  ƒêo·∫°n n√†y b·∫°n ti·∫øp t·ª•c b·∫•m Next  B·∫°n c√≥ th·ªÉ t√≠ch v√†o √¥ tr√™n ƒë·ªÉ c√†i ƒë·∫∑t m·ªôt s·ªë c√¥ng c·ª• kh√°c (Optional). R·ªìi b·∫°n b·∫•m Next ƒë·ªÉ ti·∫øp t·ª•c.   B·∫•m Install ƒë·ªÉ b·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t  B·∫°n ƒë·ª£i m·ªôt l√∫c ƒë·ªÉ ch∆∞∆°ng tr√¨nh c√†i ƒë·∫∑t.   B·∫•m Finish ƒë·ªÉ ho√†n t·∫•t c√†i ƒë·∫∑t. ƒê·ªÉ ki·ªÉm tra xem ƒë√£ c√†i ƒë·∫∑t th√†nh c√¥ng ch∆∞a, b·∫°n m·ªü PowerShell v√† nh·∫≠p node -v ƒë·ªÉ ki·ªÉm tra phi√™n b·∫£n Nodejs. N·∫øu n√≥ hi·ªán ƒë√∫ng phi√™n b·∫£n th√¨ b·∫°n ƒë√£ c√†i ƒë·∫∑t th√†nh c√¥ng.  C√†i ƒë·∫∑t c√°c module c·∫ßn thi·∫øt: Sau khi ƒë√£ c√†i th√†nh c√¥ng Nodejs, ti·∫øp theo ch√∫ng ta s·∫Ω ƒë·∫øn ph·∫ßn c√†i ƒë·∫∑t c√°c module c·∫ßn thi·∫øt ƒë·ªÉ code con bot. Gi·ªëng nh∆∞ C hay Python ch√∫ng ta ƒë∆∞·ª£c h·ªçc ·ªü tr∆∞·ªùng c·∫ßn ph·∫£i khai b√°o m·ªôt s·ªë th∆∞ vi·ªán nh∆∞ stdio. h, math. h ho·∫∑c pygame, con bot c·ªßa ch√∫ng ta c≈©ng y√™u c·∫ßu m·ªôt s·ªë module ƒë·ªÉ c√≥ th·ªÉ ho·∫°t ƒë·ªông ƒë∆∞·ª£c. Tr∆∞·ªõc ti√™n b·∫°n h√£y t·∫°o m·ªôt folder ƒë·ªÉ ch·ª©a c√°c file code (L∆∞u √Ω: t√™n folder kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ c√≥ d·∫•u). V√≠ d·ª• m√¨nh t·∫°o m·ªôt folder t√™n DiscordBot nh∆∞ trong ·∫£nh: ƒê·ªÉ m·ªü PowerShell t·∫°i ƒë√∫ng folder m√¨nh code, b·∫°n ch·ªâ c·∫ßn nh·∫≠p ‚Äúpowershell‚Äù t·∫°i √¥ ƒë·ªãa ch·ªâ folder: Ti·∫øp theo ch√∫ng ta s·∫Ω ti·∫øn h√†nh c√†i c√°c modules. ƒê·∫ßu ti√™n nh·∫≠p l·ªánh npm init ƒë·ªÉ t·∫°o file package. json (ƒë√¢y l√† file ch·ª©a th√¥ng tin v√† c√°c module c·ªßa b·∫°n). B·∫°n ch·ªâ c·∫ßn b·∫•m Enter ƒë·∫øn khi hi·ªán gi·ªëng trong h√¨nh d∆∞·ªõi ƒë√¢y l√† ok: Ti·∫øp ƒë·∫øn b·∫°n h√£y nh·∫≠p: npm install discord. js discord-player dotenv ffmpeg-static @discordjs/opus C√¢u l·ªánh tr√™n s·∫Ω t·ª± ƒë·ªông c√†i c√°c modules:  discord. js: cho ph√©p b·∫°n t∆∞∆°ng t√°c v·ªõi Discord qua JavaScript discord-player: m·ªôt framework ho√†n ch·ªânh ƒë·ªÉ ƒë∆°n gi·∫£n h√≥a l·ªánh ph√°t nh·∫°c qua discord. js dotenv: l·∫•y d·ªØ li·ªáu trong file m√¥i tr∆∞·ªùng . env ffmpeg-static: x·ª≠ l√Ω √¢m thanh @discordjs/opus: c≈©ng l√† x·ª≠ l√Ω √¢m thanh lu√¥nV·∫≠y l√† ch√∫ng ta ƒë√£ ho√†n th√†nh xong nh·ªØng b∆∞·ªõc ƒë·∫ßu ti√™n bao g·ªìm c√†i ƒë·∫∑t m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt ƒë·ªÉ m·ªôt con bot Discord ho·∫°t ƒë·ªông. ·ªû b√†i vi·∫øt ti·∫øp theo, UCC s·∫Ω h∆∞·ªõng d·∫´n c√°c b·∫°n c√°ch t·∫°o ra con bot v√† l√†m n√≥ ch·∫°y ƒë∆∞·ª£c b·∫±ng code. V√† cu·ªëi c√πng, n·∫øu g·∫∑p l·ªói hay kh√≥ khƒÉn g√¨ th√¨ ƒë·ª´ng ng·∫ßn ng·∫°i, h√£y inbox tr·ª±c ti·∫øp fanpage UCC nh√©! "
    }, {
    "id": 13,
    "url": "https://usth-coders-club.github.io/viet-email-chuyen-nghiep/",
    "title": "Vi·∫øt email m·ªôt c√°ch chuy√™n nghi·ªáp",
    "body": "2022/04/06 - Nh∆∞ c√°c b·∫°n ƒë√£ bi·∫øt, email l√† m·ªôt ph∆∞∆°ng ti·ªán giao ti·∫øp ch√≠nh v√† ƒë∆∞·ª£c s·ª≠ d·ª•ng ph·ªï bi·∫øn trong h·∫ßu h·∫øt m·ªçi lƒ©nh v·ª±c c√¥ng vi·ªác b·ªüi s·ª± ti·ªán l·ª£i c·ªßa n√≥. Do v·∫≠y vi·∫øt email l√† m·ªôt k·ªπ nƒÉng quan tr·ªçng v√† r·∫•t c·∫ßn thi·∫øt trong cu·ªôc s·ªëng hi·ªán ƒë·∫°i. H√¥m nay UCC s·∫Ω h∆∞·ªõng d·∫´n c√°c b·∫°n vi·∫øt email m·ªôt c√°ch chuy√™n nghi·ªáp. 1. T·∫ßm quan tr·ªçng c·ªßa vi·∫øt mail: ƒê·∫ßu ti√™n ch√∫ng ta c·∫ßn ph·∫£i bi·∫øt ƒë∆∞·ª£c t·∫°i sao vi·ªác vi·∫øt email l·∫°i quan tr·ªçng. Khi b·∫°n mu·ªën li√™n h·ªá v·ªõi th·∫ßy c√¥, nh√† tr∆∞·ªùng, c·∫•p tr√™n hay mu·ªën ·ª©ng tuy·ªÉn, xin vi·ªác v√†o m·ªôt c√¥ng ty, email s·∫Ω l√† ph∆∞∆°ng ti·ªán ƒë·∫ßu ti√™n ƒë·ªÉ k·∫øt n·ªëi b·∫°n v·ªõi nh·ªØng n∆°i ƒë√≥. M·ªôt chi·∫øc email c√≤n th·ªÉ hi·ªán con ng∆∞·ªùi, s·ª± t√¥n tr·ªçng c·ªßa b·∫°n v·ªõi ng∆∞·ªùi nh·∫≠n. T·∫•t nhi√™n kh√¥ng m·ªôt ai mu·ªën h·ª£p t√°c v·ªõi ng∆∞·ªùi m√† h·ªç kh√¥ng t√¥n tr·ªçng m√¨nh c·∫£. Do v·∫≠y khi vi·∫øt email cho ai ƒë√≥, b·∫°n h√£y th·ªÉ hi·ªán s·ª± t√¥n tr·ªçng c·ªßa m√¨nh qua m·ªôt ng√¥n ng·ªØ chuy√™n nghi·ªáp. 2. M·ªôt s·ªë thao t√°c c∆° b·∫£n s·ª≠ d·ª•ng Gmail: 2. 1 B·∫Øt ƒë·∫ßu so·∫°n th·∫£o m·ªôt email: Click v√†o So·∫°n th∆∞ ƒë·ªÉ b·∫Øt ƒë·∫ßu so·∫°n m·ªôt email m·ªõi: Sau ƒë√≥, Gmail s·∫Ω hi·ªÉn th·ªã m·ªôt giao di·ªán nh·ªè ƒë·ªÉ b·∫°n vi·∫øt email: T·∫°i ƒë√¢y c√≥ 3 khu v·ª±c:  Khu v·ª±c ƒë·∫ßu ti√™n s·∫Ω l√† ƒë·ªãa ch·ªâ email c·ªßa ng∆∞·ªùi nh·∫≠n. B·∫°n c√≥ th·ªÉ th·∫•y ·ªü g√≥c ph·∫£i c√≥ m·ª•c Cc v√† Bcc        Ph·∫ßn ƒë·∫øn (To): l√† ph·∫ßn d√†nh cho ng∆∞·ªùi nh·∫≠n email ch√≠nh, c√≥ th·ªÉ trao ƒë·ªïi v√† ph·∫£n h·ªìi tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi g·ª≠i. B·∫°n c√≥ th·ªÉ g·ª≠i cho m·ªôt ho·∫∑c nhi·ªÅu ƒë·ªãa ch·ªâ email.    Ph·∫ßn Cc (Carbon copy): l√† ph·∫ßn g·ª≠i b·∫£n sao c·ªßa email cho m·ªôt v√†i ng∆∞·ªùi kh√°c ƒë·ªÉ h·ªç c√≥ th·ªÉ xem v√† n·∫Øm b·∫Øt th√¥ng tin.    Ph·∫ßn Bcc (Blind carbon copy): T∆∞∆°ng t·ª± Cc nh∆∞ng Bcc s·∫Ω kh√¥ng hi·ªÉn th·ªã danh s√°ch v√† th√¥ng tin ng∆∞·ªùi nh·∫≠n.     Khu v·ª±c ch·ªß ƒë·ªÅ (Subject line) Khu v·ª±c ch·ª©a n·ªôi dung2. 2 L∆∞u √Ω khi reply: V√≠ d·ª• v·ªõi h√¨nh ·∫£nh d∆∞·ªõi ƒë√¢y l√† m·ªôt email c·ªßa FLC g·ª≠i t·ªõi sinh vi√™n v·ªÅ m·ªü l·ªõp b·ªìi d∆∞·ª°ng Ti·∫øng Ph√°p:  D√≤ng ƒë·∫ßu ‚ÄúTr·∫£ l·ªùi‚Äù: ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ tr·∫£ l·ªùi v√† ch·ªâ g·ª≠i l·∫°i cho FLC D√≤ng th·ª© hai ‚ÄúTr·∫£ l·ªùi t·∫•t c·∫£‚Äù: ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ tr·∫£ l·ªùi v√† g·ª≠i cho c·∫£ FLC v√† t·∫•t c·∫£ nh·ªØng ƒë·ªãa ch·ªâ email ·ªü ph·∫ßn Cc. M·ªçi ng∆∞·ªùi h√£y l∆∞u √Ω ph·∫ßn n√†y tr∆∞·ªõc khi ph·∫£n h·ªìi email c·ªßa ai ƒë√≥ ƒë·ªÉ tr√°nh l√†m phi·ªÅn t·ªõi ng∆∞·ªùi kh√°c v√† tr√°nh vi·ªác b·∫°n c√≥ th·ªÉ b·ªã l·ªô th√¥ng tin c√° nh√¢n hay email ri√™ng t∆∞. 3. C√°ch vi·∫øt email chuy√™n nghi·ªáp: ƒê·ªÉ vi·∫øt ƒë∆∞·ª£c m·ªôt email m·ªôt c√°ch chuy√™n nghi·ªáp v√† t·∫°o ƒë∆∞·ª£c ·∫•n t∆∞·ª£ng t·ªët v·ªõi ng∆∞·ªùi ƒë·ªçc, b·∫°n h√£y d·ª±a theo 6 b∆∞·ªõc d∆∞·ªõi ƒë√¢y:  X√°c ƒë·ªãnh ƒë√∫ng ng∆∞·ªùi nh·∫≠n (Identify your goal) Ti√™u ƒë·ªÅ (Subject line) Ch√†o h·ªèi N·ªôi dung Ph·∫ßn k·∫øt Ch·ªØ k√Ω3. 1 X√°c ƒë·ªãnh ƒë√∫ng ng∆∞·ªùi nh·∫≠n (Identify your goal): ƒê√¢y c√≥ l·∫Ω l√† ph·∫ßn √≠t ng∆∞·ªùi ch√∫ √Ω ƒë·∫ßu ti√™n nh∆∞ng n√≥ l√† ƒëi·ªÅu quan tr·ªçng nh·∫•t b·ªüi n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ch√≠nh x√°c ƒë·ªãa ch·ªâ th√¨ ng∆∞·ªùi nh·∫≠n s·∫Ω kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng tin t·ª´ b·∫°n. Th√™m v√†o ƒë√≥, vi·ªác g·ª≠i sai ƒë·ªãa ch·ªâ email s·∫Ω l√†m ·∫£nh h∆∞·ªüng ƒë·∫øn ng∆∞·ªùi nh·∫≠n hay t·ªá h∆°n l√† th√¥ng tin, t√†i li·ªáu c·ªßa b·∫°n s·∫Ω b·ªã ng∆∞·ªùi kh√°c th·∫•y v√† s·ª≠ d·ª•ng n√≥ v√†o m·ª•c ƒë√≠ch x·∫•u. V√≠ d·ª• b·∫°n mu·ªën g·ª≠i email xin ngh·ªâ h·ªçc v√¨ l√≠ do c√° nh√¢n cho ph√≤ng CTSV nh∆∞ng l·∫°i g·ª≠i nh·∫ßm cho c·∫£ kh√≥a ƒë·ªçc ƒë∆∞·ª£c, trong khi ƒë√≥ c√°c th·∫ßy c√¥ l·∫°i kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o, d·∫´n ƒë·∫øn m·ªôt t√¨nh hu·ªëng d·ªü kh√≥c d·ªü c∆∞·ªùi. ƒê√¢y l√† l·ªói th∆∞·ªùng hay g·∫∑p c·ªßa c√°c b·∫°n sinh vi√™n m·ªõi v√†o tr∆∞·ªùng ch∆∞a t√¨m hi·ªÉu k·ªπ. V·∫≠y n√™n h√£y t√¨m hi·ªÉu v√† ki·ªÉm tra th·∫≠t k·ªπ ƒë·ªãa ch·ªâ email m√† b·∫°n mu·ªën g·ª≠i tr∆∞·ªõc khi so·∫°n . ƒê·ªëi v·ªõi c√°c b·∫°n sinh vi√™n USTH, ƒë·ªÉ tr√°nh c√°c tr∆∞·ªùng h·ª£p k·ªÉ tr√™n c√°c b·∫°n c√≥ th·ªÉ t√¨m ƒë·ªãa ch·ªâ email c·ªßa c√°c ph√≤ng ban c·ªßa tr∆∞·ªùng t·∫°i ƒë√¢y. 3. 2 Ph·∫ßn ti√™u ƒë·ªÅ (Subject line): Ti√™u ƒë·ªÅ s·∫Ω l√† ph·∫ßn t√≥m t·∫Øt n·ªôi dung ch√≠nh c·ªßa b·∫°n. ƒê√¢y l√† ƒëi·ªÅu quan tr·ªçng ƒë·ªÉ ng∆∞·ªùi nh·∫≠n nhanh ch√≥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c n·ªôi dung v√† c√≥ quy·∫øt ƒë·ªãnh ƒë·ªçc n√≥ hay kh√¥ng, b·ªüi m·ªói ng√†y h·ªç c√≥ th·ªÉ nh·∫≠n r·∫•t nhi·ªÅu email v·ªÅ c√°c v·∫•n ƒë·ªÅ kh√°c nhau. H·ªç th∆∞·ªùng s·∫Ω b·ªè qua v√† kh√¥ng ƒë·ªçc nh·ªØng email kh√¥ng c√≥ ti√™u ƒë·ªÅ v√¨ h·ªç nghƒ© ƒë√≥ l√† th∆∞ r√°c, th∆∞ spam ho·∫∑c trong ƒë√≥ c√≥ th·ªÉ ch·ª©a m√£ ƒë·ªôc. V·∫≠y n√™n b·∫°n h√£y ƒë·∫∑t ti√™u ƒë·ªÅ th·∫≠t ng·∫Øn g·ªçn v√† n√™u ƒë√∫ng tr·ªçng t√¢m n·ªôi dung ch√≠nh.  ‚ÄúBA03: ƒê∆°n xin ph√©p ngh·ªâ h·ªçc Ph·∫°m ƒê·ª©c Khi√™m (01/04/2022)‚Äù 3. 3 Ph·∫ßn ch√†o (Greeting): Khi m·ªü ƒë·∫ßu m·ªôt b·ª©c th∆∞, b·∫°n h√£y lu√¥n th·ªÉ hi·ªán s·ª± chuy√™n nghi·ªáp v√† t√¥n tr·ªçng c·ªßa m√¨nh qua l·ªùi ch√†o. Th√¥ng th∆∞·ªùng ch√∫ng ta n√™n s·ª≠ d·ª•ng¬† Dear/ Hi/ K√≠nh g·ª≠i/ G·ª≠i/ Ch√†o‚Ä¶, t√πy v√†o m·ªëi quan h·ªá c·ªßa b·∫°n v·ªõi ng∆∞·ªùi nh·∫≠n ƒë·ªÉ d·ªÖ d√†ng x∆∞ng h√¥.  V·ªõi b·∫°n b√® hay nh·ªØng ng∆∞·ªùi b·∫°n th√¢n thi·∫øt, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ‚ÄúHi A‚Äù ho·∫∑c ‚ÄúDear A‚Äù N·∫øu g·ª≠i cho m·ªôt nh√≥m hay nhi·ªÅu ng∆∞·ªùi b·∫°n c√≥ th·ªÉ ‚ÄúDear all‚Äù N·∫øu g·ª≠i cho m·ªôt team hay m·ªôt t·ªï ch·ª©c th√¨ b·∫°n d√πng ‚ÄúHi team‚Äù ‚ÄúDear + t√™n t·ªï ch·ª©c ƒë√≥‚Äù. V√≠ d·ª• ‚ÄúDear UCC‚Äù V·ªõi nh·ªØng ng∆∞·ªùi m·ªõi g·∫∑p hay ng∆∞·ªùi c·∫ßn s·ª± t√¥n tr·ªçng th√¨ b·∫°n s·ª≠ d·ª•ng ‚ÄúDear Mr/Mrs/√¥ng/b√†/‚Ä¶‚Äù ‚ÄúDear GED Dept,‚Äù 3. 4 Ph·∫ßn n·ªôi dung (Body): ƒê√¢y l√† ph·∫ßn n·ªôi dung ch√≠nh c·ªßa email. B·∫°n c√≥ th·ªÉ gi·ªõi thi·ªáu qua b·∫£n th√¢n nh∆∞ t√™n, ngh·ªÅ nghi·ªáp, ch·ª©c v·ª• ƒë·ªÉ ng∆∞·ªùi ƒë·ªçc c√≥ th·ªÉ d·ªÖ d√†ng x√°c ƒë·ªãnh ƒë∆∞·ª£c b·∫°n, ƒë·∫∑c bi·ªát v·ªõi nh·ªØng ng∆∞·ªùi m√† b·∫°n ch∆∞a t·ª´ng g·∫∑p. B·∫°n c√≥ th·ªÉ b·ªè qua ph·∫ßn n√†y n·∫øu b·∫°n v√† ng∆∞·ªùi nh·∫≠n ƒë√£ bi·∫øt nhau N·∫øu ƒë√¢y l√† m·ªôt email b·∫°n reply ai ƒë√≥ hay ng∆∞·ªùi ƒë√≥ gi√∫p b·∫°n ƒëi·ªÅu g√¨, h√£y m·ªü ƒë·∫ßu b·∫±ng m·ªôt d√≤ng c·∫£m ∆°n. V√≠ d·ª• ‚ÄúC·∫£m ∆°n b·∫°n v√¨ ƒë√£ g·ª≠i email cho t√¥i‚Äù. B·∫°n h√£y th·ªÉ hi·ªán r√µ r√†ng n·ªôi dung email. H√£y ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ m·ªôt c√°ch tr·ª±c ti·∫øp: ‚ÄúT√¥i vi·∫øt email n√†y ƒë·ªÉ‚Ä¶‚Äù Ng∆∞·ªùi b·∫°n g·ª≠i c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c r·∫•t nhi·ªÅu email kh√°c trong ng√†y, n√™n c√≥ th·ªÉ h·ªç s·∫Ω ƒë·ªçc mail c·ªßa b·∫°n nhanh ch√≥ng. Vi·ªác gi·ªØ n·ªôi dung, c√¢u t·ª´ ng·∫Øn g·ªçn, r√µ r√†ng s·∫Ω th·ªÉ gi√∫p ng∆∞·ªùi ƒë·ªçc ti·∫øt ki·ªám th·ªùi gian v√† d·ªÖ d√†ng hi·ªÉu ƒë∆∞·ª£c n·ªôi dung m√† b·∫°n mu·ªën truy·ªÅn t·∫£i. ƒê·ªìng th·ªùi vi·ªác ƒë√≥ s·∫Ω th·ªÉ hi·ªán t√≠nh chuy√™n nghi·ªáp c·ªßa b·∫£n th√¢n v√† t·ªï ch·ª©c c·ªßa b·∫°n.  ‚ÄúEm t√™n l√† Ph·∫°m ƒê·ª©c Khi√™m,M√£ sinh vi√™n: BA12-095L·ªõp: BA03 Em vi·∫øt email n√†y l√† ƒë·ªÉ xin ph√©p ngh·ªâ h·ªçc v√†o ng√†y mai (ng√†y 01/04/2022) v·ªõi l√Ω do gi·∫£i quy·∫øt vi·ªác gia ƒë√¨nh. Em h·ª©a v·∫´n s·∫Ω ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng h·ªçc t·∫≠p v√† ho√†n th√†nh ƒë·∫ßy ƒë·ªß c√°c nhi·ªám v·ª• gi·∫£ng vi√™n giao trong th·ªùi gian ngh·ªâ. ‚Äù 3. 5 Ph·∫ßn k·∫øt (Conclusion): ·ªû ph·∫ßn n√†y, b·∫°n c√≥ th·ªÉ nh·∫Øc l·∫°i y√™u c·∫ßu c·ªßa m√¨nh (n·∫øu c√≥) ƒë√£ ƒë∆∞a ra ·ªü ph·∫ßn n·ªôi dung. H√£y nh·ªõ r·∫±ng ph·∫£i g·ª≠i l·ªùi ch√†o t·∫°m bi·ªát ƒë·∫ßy √Ω nghƒ©a v√† l·ªùi c·∫£m ∆°n t·ªõi ng∆∞·ªùi nh·∫≠n. N·∫øu c√≥ √Ω mu·ªën ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán, b·∫°n c√≥ th·ªÉ m·ªùi ng∆∞·ªùi ƒë·ªçc tr·∫£ l·ªùi b·∫°n nh∆∞ ‚ÄúT√¥i mong nh·∫≠n ƒë∆∞·ª£c h·ªìi √¢m t·ª´ b·∫°n‚Äù.  ‚ÄúEm xin tr√¢n tr·ªçng c·∫£m ∆°n. ‚Äù 3. 6 K√Ω t√™n (Signature): B·∫°n h√£y k·∫øt th√∫c email b·∫±ng nh·ªØng t·ª´ nh∆∞ ‚ÄúTr√¢n tr·ªçng/ Th√¢n m·∫øn/ Sincerely/‚Ä¶‚Äù tr∆∞·ªõc khi ƒë·∫øn ph·∫ßn k√Ω t√™n. ƒê√¢y l√† n∆°i b·∫°n x√°c ƒë·ªãnh ch√≠nh m√¨nh b·∫±ng t√™n, ch·ª©c v·ª• hay m·ªôt s·ªë th√¥ng tin kh√°c. C√°c b·∫°n c√≥ th·ªÉ d·ª±a theo c·∫•u tr√∫c sau:  T√™n b·∫°n Ngh·ªÅ nghi·ªáp, ch·ª©c v·ª• ƒê·ªãa ch·ªâ li√™n l·∫°c S·ªë ƒëi·ªán tho·∫°i Website (n·∫øu c√≥) ‚ÄúTh√¢n √°i,Khiem. ‚Äù ƒêa s·ªë c√°c ch∆∞∆°ng tr√¨nh so·∫°n email ƒë·ªÅu cho ph√©p ch√∫ng ta t·∫°o v√† ch·ªânh s·ª≠a ph·∫ßn n√†y v√† ƒë·∫∑t t·ª± ƒë·ªông v√†o m·ªói cu·ªëi email ƒë∆∞·ª£c g·ª≠i ƒëi.  4. Nh·ªØng ƒëi·ªÅu c·∫ßn ch√∫ √Ω khi vi·∫øt email. :  H√£y ƒë·ªçc l·∫°i email c·ªßa b·∫°n tr∆∞·ªõc khi g·ª≠i ƒë·ªÉ ki·ªÉm tra c√°c l·ªói v·ªÅ ch√≠nh t·∫£, d·∫•u c√¢u.  M·ªôt email n√™n tr·ªçng t√¢m m·ªôt n·ªôi dung. B·∫°n n√™n so·∫°n th√™m m·ªôt email n·ªØa n·∫øu ƒë·ªãnh n√≥i v·ªÅ m·ª•c ƒë√≠ch kh√°c.  C√¢u t·ª´, ng·ªØ ph√°p d·ªÖ ƒë·ªçc.  Tuy·ªát ƒë·ªëi kh√¥ng s·ª≠ d·ª•ng teencode hay c√°c emoticon (bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c). ƒê·ªìng th·ªùi c≈©ng kh√¥ng ƒë∆∞·ª£c th·ªÉ hi·ªán th√°i ƒë·ªô, c√¢u t·ª´ ƒë√πa c·ª£t trong email. N√≥ d·ªÖ khi·∫øn ng∆∞·ªùi ƒë·ªçc hi·ªÉu nh·∫ßm √Ω b·∫°n v√† nghƒ© b·∫°n kh√¥ng t√¥n tr·ªçng h·ªç.  Kh√¥ng d√πng font ch·ªØ kh√¥ng th·ªëng nh·∫•t, kh√≥ ƒë·ªçc v√† tr√°nh l·∫°m d·ª•ng in ƒë·∫≠m, in nghi√™ng v√¨ n√≥ s·∫Ω khi·∫øn ng∆∞·ªùi ƒë·ªçc kh√¥ng ch√∫ √Ω v√†o n·ªôi dung b·∫°n mu·ªën truy·ªÅn ƒë·∫°t. Cho d√π b·∫°n ƒëang l√† sinh vi√™n hay ƒëang ƒëi l√†m ·ªü b·∫•t c·ª© ng√†nh ngh·ªÅ n√†o th√¨ h·ªçc vi·∫øt email c≈©ng l√† m·ªôt k·ªπ nƒÉng r·∫•t c·∫ßn thi·∫øt. Mong c√°c b·∫°n th·∫•y b√†i vi·∫øt n√†y b·ªï √≠ch v√† b·∫Øt ƒë·∫ßu t·∫≠p th√≥i quen so·∫°n th·∫£o email chuy√™n nghi·ªáp t·ª´ h√¥m nay. "
    }, {
    "id": 14,
    "url": "https://usth-coders-club.github.io/phan-biet-compiler-va-interpreter/",
    "title": "Ph√¢n bi·ªát Compiler v√† Interpreter",
    "body": "2022/04/06 - Khi b·∫Øt ƒë·∫ßu h·ªçc l·∫≠p tr√¨nh, b·∫°n s·∫Ω nhi·ªÅu l·∫ßn b·∫Øt g·∫∑p kh√°i ni·ªám v·ªÅ Compiler v√† Interpreter. Ch√∫ng ƒë·ªÅu l√† nh·ªØng translator, c√≥ nhi·ªám v·ª• d·ªãch m√£ ngu·ªìn th√†nh c√°c ch·ªâ d·∫´n m√† m√°y t√≠nh c√≥ th·ªÉ hi·ªÉu v√† th·ª±c hi·ªán (machine code). N·∫Øm b·∫Øt ƒë∆∞·ª£c s·ª± kh√°c nhau c∆° b·∫£n gi·ªØa hai kh√°i ni·ªám n√†y s·∫Ω gi√∫p c√°c b·∫°n ph√¢n bi·ªát m·ª•c ƒë√≠ch c·ªßa c√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh v√† c√°ch th·ª©c x·ª≠ l√Ω ch√∫ng. So s√°nh t·ªïng qu√°t:       ¬†   Compiler   Interpreter         C√°ch ho·∫°t ƒë·ªông   D·ªãch to√†n b·ªô m√£ ngu·ªìn sang m√£ m√°y r·ªìi cho ra m·ªôt file th·ª±c thi.    D·ªãch t·ª´ng ƒëo·∫°n m√£ ngu·ªìn sang m√£ m√°y v√† ch·∫°y tr·ª±c ti·∫øp.        Hi·ªáu nƒÉng   Th∆∞·ªùng c√≥ hi·ªáu nƒÉng cao h∆°n.    Th∆∞·ªùng c√≥ hi·ªáu nƒÉng th·∫•p h∆°n       M√¥i tr∆∞·ªùng ch·∫°y   C√≥ th·ªÉ ch·∫°y tr·ª±c ti·∫øp tr√™n c√°c m√°y t∆∞∆°ng th√≠ch.    C√°c m√°y ph·∫£i t·∫£i m√¥i tr∆∞·ªùng ph√π h·ª£p ƒë·ªÉ ch·∫°y nh∆∞ Python.        C√°c ng√¥n ng·ªØ ti√™u bi·ªÉu   C, C++, Rust   Python, PHP, Ruby   1. C√°ch th·ª©c ho·∫°t ƒë·ªông: Compiler: Compiler t·ªïng h·ª£p v√† s·∫Øp x·∫øp c√°c d√≤ng trong m√£ ngu·ªìn v√† d·ªãch ch√∫ng v·ªÅ ng√¥n ng·ªØ m√°y. C√°c library ƒë∆∞·ª£c s·ª≠ d·ª•ng c≈©ng s·∫Ω ƒë∆∞·ª£c t·∫≠p h·ª£p l·∫°i v√† d√πng trong qu√° tr√¨nh compile. Cu·ªëi c√πng, compiler s·∫Ω tr·∫£ l·∫°i file th·ª±c thi (ch·∫≥ng h·∫°n nh∆∞ file . exe tr√™n Windows) m√† b·∫°n c√≥ th·ªÉ ch·∫°y ƒë∆∞·ª£c. Vi·ªác n√†y ƒë·ªìng nghƒ©a n·∫øu m√£ ngu·ªìn kh√¥ng b·ªã thay ƒë·ªïi th√¨ b·∫°n c√≥ th·ªÉ ch·∫°y file th·ª±c thi ƒë√≥ m√† kh√¥ng ph·∫£i compile l·∫°i m·ªói l·∫ßn ch·∫°y. Interpreter: Interpreter s·∫Ω d·ªãch t·ª´ng ƒëo·∫°n m√£ ngu·ªìn sang m√£ m√°y v√† ch·∫°y ch√∫ng lu√¥n thay v√¨ t·ªïng h·ª£p h·∫øt l·∫°i v·ªÅ m·ªôt file th·ª±c thi. Ngo√†i ra m·ªôt s·ªë bi·∫øn th·ªÉ kh√°c c·ªßa interpreter c√≥ th·ªÉ ho·∫°t ƒë√¥ng theo c√°ch d·ªãch m√£ ngu·ªìn v·ªÅ native code cho virtual machine (m√°y ·∫£o) c·ªßa ng√¥n ng·ªØ ƒë√≥ v√† ch·∫°y tr√™n m√°y ·∫£o. VD: Java. Th∆∞·ªùng qu√° tr√¨nh interpret s·∫Ω lu√¥n ch·∫°y khi b·∫°n ch·∫°y code d√π cho m√£ ngu·ªìn kh√¥ng c√≥ s·ª± thay ƒë·ªïi. 2. Hi·ªáu nƒÉng: Compiler: Nh∆∞ ƒë√£ ƒë·ªÅ c·∫≠p ·ªü tr√™n, compiler ch·ªâ c·∫ßn d·ªãch m√£ ngu·ªìn m·ªôt l·∫ßn v√† t·∫°o ra file th·ª±c thi; ch√≠nh v√¨ v·∫≠y, ·ª©ng d·ª•ng c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a v√† ch·∫°y nhanh h∆°n. Interpreter: C√°c ·ª©ng d·ª•ng ƒë∆∞·ª£c vi·∫øt b·∫±ng interpreted language th∆∞·ªùng s·∫Ω d·ªãch l·∫°i m√£ ngu·ªìn m·ªói l·∫ßn ch·∫°y ho·∫∑c ph·∫£i kh·ªüi ƒë·ªông m√°y ·∫£o v√¨ v·∫≠y s·∫Ω t·ªën th·ªùi gian h∆°n. V√≠ d·ª•:: H√£y t∆∞·ªüng t∆∞·ª£ng b·∫°n c√≥ 2 ·ª©ng d·ª•ng c√≥ t√≠nh nƒÉng gi·ªëng nhau; nh∆∞ng ·ª©ng d·ª•ng A ƒë∆∞·ª£c vi·∫øt b·∫±ng compiled language v√† ·ª©ng d·ª•ng B ƒë∆∞·ª£c vi·∫øt b·∫±ng interpreted language. N·∫øu b·∫°n ch·∫°y 2 ·ª©ng d·ª•ng ƒë√≥ 5 l·∫ßn th√¨ ·ª©ng d·ª•ng A ch·ªâ c·∫ßn compile m·ªôt l·∫ßn. Tr√°i l·∫°i ·ª©ng d·ª•ng B ph·∫£i ƒë∆∞·ª£c interpret 5 l·∫ßn. V√¨ th·∫ø m√† ·ª©ng d·ª•ng A m·ªói l·∫ßn ch·∫°y s·∫Ω nhanh h∆°n ·ª©ng d·ª•ng B. Tuy nhi√™n x√©t v·ªÅ vi·ªác b·∫°n mu·ªën th√™m t√≠nh nƒÉng hay thay ƒë·ªïi m√£ ngu·ªìn c·ªßa 2 ·ª©ng d·ª•ng n√†y. C·∫£ 2 ·ª©ng d·ª•ng ƒë·ªÅu ph·∫£i compile v√† interpret l·∫°i m·ªói khi b·∫°n thay ƒë·ªïi m√£ ngu·ªìn. Nh∆∞ng qu√° tr√¨nh compile th∆∞·ªùng s·∫Ω ch·∫≠m h∆°n interpret; v√¨ v·∫≠y ·ª©ng d·ª•ng B l·∫°i ƒë∆∞·ª£c ch·∫°y nhanh h∆°n ·ª©ng d·ª•ng A. 3. M√¥i tr∆∞·ªùng ch·∫°y: Compiler: Do ƒë√£ ƒë∆∞·ª£c compile v·ªÅ file th·ª±c thi, compile language c√≥ th·ªÉ ch·∫°y tr√™n m√°y t√≠nh m√† kh√¥ng c·∫ßn c√≥ m√¥i tr∆∞·ªùng ƒë·∫∑c bi·ªát. Interpreter: Interpreted language th∆∞·ªùng y√™u c·∫ßu ng∆∞·ªùi d√πng c√†i ƒë·∫∑t m√¥i tr∆∞·ªùng ch·∫°y c·ªßa ng√¥n ng·ªØ ƒë√≥ ·ªü tr√™n m√°y. V√≠ d·ª• nh∆∞ Java s·∫Ω y√™u c·∫ßu ng∆∞·ªùi d√πng c√†i ƒë·∫∑t m·ªôt phi√™n b·∫£n Java, trong ƒë√≥ g·ªìm c√≥ Java Virtual Machine, Python th√¨ c·∫ßn c√≥ interpreter Python, t∆∞∆°ng t·ª± ƒë·ªëi v·ªõi Ruby, ‚Ä¶ 4. M·ªôt s·ªë ng√¥n ng·ªØ ƒëi·ªÉn h√¨nh: Compiled:  C++ C Pascal Objective-C RustInterpreted:  Python Ruby PHPNgo·∫°i l·ªá:  Java: c√°ch th·ª©c ho·∫°t ƒë·ªông c·ªßa Java l·∫°i g·∫ßn nh∆∞ s·ª± k·∫øt h·ª£p c·ªßa c·∫£ hai - m√£ ngu·ªìn ƒë∆∞·ª£c d·ªãch ra m·ªôt ng√¥n ng·ªØ trung c·∫•p l√† Java bytecode, nh∆∞ng trong qu√° tr√¨nh th·ª±c thi c√≥ th·ªÉ s·ª≠ d·ª•ng t·ªõi Just-In-Time Compiler, ph·∫ßn n√†o ƒë√≥ d·ªãch m·ªôt s·ªë ƒëo·∫°n m√£ ngu·ªìn ra native code d√†nh cho h·ªá m√°y ƒë√≥ ƒë·ªÉ c√≥ th·ªÉ tƒÉng t·ªëc ƒë·ªô x·ª≠ l√Ω. K·∫øt lu·∫≠n: T√≥m l·∫°i, compiler v√† interpreter ƒë·ªÅu ho·∫°t ƒë·ªông kh√°c bi·ªát v·ªõi nhau, ƒëi k√®m ƒë√≥ l√† nh·ªØng ∆∞u ƒëi·ªÉm v√† nh∆∞·ª£c ƒëi·ªÉm ri√™ng c·ªßa m·ªói lo·∫°i. T√πy v√†o m·ª•c ƒë√≠ch s·ª≠ d·ª•ng m√† b·∫°n c√≥ th·ªÉ c√¢n nh·∫Øc gi·ªØa compiled v√† interpreted language. N·∫øu ch√∫ tr·ªçng hi·ªáu nƒÉng ·ª©ng d·ª•ng th√¨ Compiled Languages l√† l·ª±a ch·ªçn s√°ng gi√°; c√≤n n·∫øu mu·ªën ƒë·∫©y nhanh ph√°t tri·ªÉn ·ª©ng d·ª•ng th√¨ Interpreted Languages c√≥ th·ªÉ s·∫Ω t·ªëi ∆∞u h∆°n. "
    }, {
    "id": 15,
    "url": "https://usth-coders-club.github.io/su-dung-python-de-mo-phong-bai-toan-xac-suat-monty-hall/",
    "title": "S·ª≠ d·ª•ng Python ƒë·ªÉ m√¥ ph·ªèng b√†i to√°n x√°c su·∫•t Monty Hall",
    "body": "2022/03/13 - B√†i to√°n x√°c su·∫•t kinh ƒëi·ªÉn Monty Hall m·ªôt th·ªùi ƒë√£ th√°ch th·ª©c h√†ng ng√†n b·ªô n√£o tr√™n th·∫ø gi·ªõi, t·ª´ h·ªçc sinh c·∫•p 3 cho ƒë·∫øn nh·ªØng gi√°o s∆∞ v√† c√°c chuy√™n gia ph√¢n t√≠ch. T√≠nh ƒë·∫øn ng√†y nay, ƒë√£ c√≥ r·∫•t nhi·ªÅu l·ªùi gi·∫£i th√≠ch v√† ƒë√°p √°n cho c√¢u ƒë·ªë n√†y d∆∞·ªõi g√≥c ƒë·ªô to√°n h·ªçc xu·∫•t hi·ªán tr√™n Internet, ch·ªß y·∫øu s·ª≠ d·ª•ng ki·∫øn th·ª©c v·ªÅ x√°c su·∫•t th·ªëng k√™. H√¥m nay, UCC s·∫Ω gi·ªõi thi·ªáu cho c√°c b·∫°n m·ªôt h∆∞·ªõng ti·∫øp c·∫≠n kh√°c, ƒë√≥ l√† s·ª≠ d·ª•ng ng√¥n ng·ªØ l·∫≠p tr√¨nh Python ƒë·ªÉ m√¥ ph·ªèng l·∫°i t√¨nh hu·ªëng b√†i to√°n, t·ª´ ƒë√≥ ƒë∆∞a ra l·ªùi gi·∫£i thuy·∫øt ph·ª•c nh·∫•t t·ª´ s·ªë li·ªáu ƒë√£ thu ƒë∆∞·ª£c. Ngu·ªìn g·ªëc: Marilyn vos Savant l√† m·ªôt ph·ª• n·ªØ ƒë∆∞·ª£c s√°ch k·ª∑ l·ª•c Guinness c√¥ng nh·∫≠n l√† ng∆∞·ªùi c√≥ ch·ªâ s·ªë IQ cao nh·∫•t th·∫ø gi·ªõi (228) trong kho·∫£ng th·ªùi gian t·ª´ nƒÉm 1985 ƒë·∫øn 1989. B√† c≈©ng l√† t√°c gi·∫£ cho t·∫°p ch√≠ Parade c·ªßa M·ªπ v√† ph·ª• tr√°ch chuy√™n m·ª•c ‚ÄúAsk Marilyn‚Äù, n∆°i ng∆∞·ªùi ƒë·ªçc c√≥ th·ªÉ g·ª≠i c√°c c√¢u ƒë·ªë v√† Vos Savant s·∫Ω tr·∫£ l·ªùi ch√∫ng.  V√†o nƒÉm 1990, m·ªôt ƒë·ªôc gi·∫£ t√™n l√† Craig F. Whitaker ƒë√£ g·ª≠i cho t·∫°p ch√≠ m·ªôt c√¢u ƒë·ªë c√≥ n·ªôi dung nh∆∞ sau:  Gi·∫£ s·ª≠ b·∫°n ƒëang tham gia gameshow v√† ph·∫£i l·ª±a ch·ªçn m·ªôt trong ba c√°nh c·ª≠a: ƒë·∫±ng sau m·ªôt c√°nh c·ª≠a l√† m·ªôt chi·∫øc xe h∆°i m·ªõi tinh, c√≤n ƒë·∫±ng sau hai c√°nh c·ª≠a c√≤n l·∫°i l√† hai con d√™. N·∫øu b·∫°n ch·ªçn ƒë√∫ng c√°nh c·ª≠a c√≥ chi·∫øc xe, b·∫°n s·∫Ω ƒë∆∞·ª£c s·ªü h·ªØu lu√¥n chi·∫øc xe ƒë√≥, c√≤n n·∫øu b·∫°n ch·ªçn ph·∫£i c√°nh c·ª≠a m√† ƒë·∫±ng sau n√≥ l√† m·ªôt con d√™ th√¨ b·∫°n ph·∫£i mang con d√™ ƒë√≥ v·ªÅ nh√†. B·∫°n ƒë√£ ch·ªçn c√°nh c·ª≠a s·ªë 1, sau ƒë√≥ ng∆∞·ªùi d·∫´n ch∆∞∆°ng tr√¨nh (ƒë√£ bi·∫øt c√°nh c·ª≠a n√†o c√≥ d√™ v√† xe) m·ªü m·ªôt c√°nh c·ª≠a m√† ƒë·∫±ng sau n√≥ l√† m·ªôt con d√™, sau ƒë√≥ anh ta h·ªèi b·∫°n c√≥ mu·ªën ƒë·ªïi l·ª±a ch·ªçn sang c√°nh c·ª≠a c√≤n l·∫°i kh√¥ng. B·∫°n c√≥ n√™n ƒë·ªïi hay kh√¥ng? Marilyn ƒë√£ n√≥i r·∫±ng ch√∫ng ta n√™n ƒë·ªïi, v√† c√¢u tr·∫£ l·ªùi n√†y ƒë√£ thu h√∫t r·∫•t nhi·ªÅu ph·∫£n h·ªìi kh√¥ng ƒë·ªìng t√¨nh t·ª´ c√°c ƒë·ªôc gi·∫£, trong ƒë√≥ c√≥ r·∫•t nhi·ªÅu ti·∫øn sƒ© gi√°o s∆∞ t·ª´ c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc. B√†i to√°n n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t t√™n l√† ‚ÄúMonty Hall‚Äù v√¨ n√≥ r·∫•t gi·ªëng v·ªõi gameshow mang t√™n ‚ÄúLet‚Äôs Make a Deal‚Äù do Monty Hall l√†m ng∆∞·ªùi d·∫´n ch∆∞∆°ng tr√¨nh v√†o nƒÉm 1963.  B√†i to√°n n√†y th·∫≠t ra ƒë√£ ƒë∆∞·ª£c Steve Selvin gi·ªõi thi·ªáu v√† gi·∫£i qua m·ªôt l√° th∆∞ g·ª≠i t·∫°p ch√≠ khoa h·ªçc American Statistician v√†o nƒÉm 1975, tuy nhi√™n n√≥ ch·ªâ th·∫≠t s·ª± ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi bi·∫øt ƒë·∫øn nh·ªù danh ti·∫øng c·ªßa Marilyn vos Savant c√πng v·ªõi c√¢u tr·∫£ l·ªùi g√¢y tranh c√£i c·ªßa b√†. ƒê√°p √°n cho B√†i to√°n: G·∫ßn nh∆∞ h·∫ßu h·∫øt m·ªçi ng∆∞·ªùi sau khi ƒë·ªçc b√†i to√°n ƒë·ªÅu cho r·∫±ng sau khi ng∆∞·ªùi d·∫´n ch∆∞∆°ng tr√¨nh lo·∫°i b·ªè m·ªôt c√°nh c·ª≠a c√≥ con d√™, t·ªâ l·ªá ng∆∞·ªùi ch∆°i ch·ªçn tr√∫ng c√°nh c·ª≠a c√≥ chi·∫øc xe l√† 50%, v·∫≠y n√™n vi·ªác ƒë·ªïi c·ª≠a hay kh√¥ng kh√¥ng quan tr·ªçng. ƒê√≥ l√† c√¢u tr·∫£ l·ªùi ch√≠nh x√°c n·∫øu c√°nh c·ª≠a m√† ng∆∞·ªùi d·∫´n ch∆∞∆°ng tr√¨nh ch·ªçn ƒë·ªÉ m·ªü ho√†n to√†n ng·∫´u nhi√™n. Tuy nhi√™n c√°nh c·ª≠a m√† ng∆∞·ªùi d·∫´n ch∆∞∆°ng tr√¨nh m·ªü th·ª±c ch·∫•t ph·ª• thu·ªôc v√†o c√°nh c·ª≠a ng∆∞·ªùi ch∆°i ch·ªçn, do ƒë√≥ t·ª∑ l·ªá kh√¥ng c√≤n l√† 50/50 n·ªØa. B·∫£ng d∆∞·ªõi ƒë√¢y s·∫Ω mi√™u t·∫£ r√µ nh·∫•t t·ªâ l·ªá ch·ªçn tr√∫ng chi·∫øc xe b·∫±ng c√°ch li·ªát k√™ t·∫•t c·∫£ c√°c tr∆∞·ªùng h·ª£p c√≥ th·ªÉ x·∫£y ra (ng∆∞·ªùi ch∆°i ban ƒë·∫ßu ch·ªçn c√°nh c·ª≠a s·ªë 1):       C√°nh c·ª≠a s·ªë 1   C√°nh c·ªßa s·ªë 2   C√°nh c·ª≠a s·ªë 3   K·∫øt qu·∫£ n·∫øu kh√¥ng ƒë·ªïi c·ª≠a   K·∫øt qu·∫£ n·∫øu ƒë·ªïi c·ª≠a         D√™   D√™   Xe   C·∫ßm D√™ v·ªÅ   C·∫ßm Xe v·ªÅ       D√™   Xe   D√™   C·∫ßm D√™ v·ªÅ   C·∫ßm Xe v·ªÅ       Xe   D√™   D√™   C·∫ßm Xe v·ªÅ   C·∫ßm D√™ v·ªÅ   R√µ r√†ng, l·ª±a ch·ªçn ƒë·ªïi c·ª≠a cho ch√∫ng ta 2/3 c∆° h·ªôi th·∫Øng ƒë∆∞·ª£c chi·∫øc xe. ƒê·ªÉ t√¨m hi·ªÉu l·ªùi gi·∫£i th√≠ch to√°n h·ªçc chi ti·∫øt cho b√†i to√°n n√†y, Youtube c√≥ r·∫•t nhi·ªÅu video. C√≤n n·∫øu b·∫°n v·∫´n c√≤n ho√†i nghi v·ªÅ k·∫øt qu·∫£ tr√™n, UCC s·∫Ω m√¥ ph·ªèng s·∫Ω s·ª≠ d·ª•ng Python ƒë·ªÉ m√¥ ph·ªèng ng∆∞·ªùi ch∆°i, ch·ªçn ng·∫´u nhi√™n m·ªôt c√°nh c·ª≠a v√† so s√°nh t·ªâ l·ªá th·∫Øng gi·ªØa hai quy·∫øt ƒë·ªãnh ƒë·ªïi c·ª≠a v√† kh√¥ng ƒë·ªïi c·ª≠a qua m·ªôt s·ªë l∆∞·ª£ng l∆∞·ª£t ch∆°i l·ªõn. L√Ω do m√¥ ph·ªèng b√†i to√°n b·∫±ng Python: Monty Hall l√† m·ªôt b√†i to√°n d·ªÖ g√¢y nh·∫ßm l·∫´n. Ngay c·∫£ khi ƒë√£ c·ªë g·∫Øng ƒë·ªÉ gi·∫£i b√†i to√°n nhi·ªÅu l·∫ßn hay xem video gi·∫£i th√≠ch to√°n h·ªçc, logic nhi·ªÅu l·∫ßn th√¨ nhi·ªÅu ng∆∞·ªùi v·∫´n kh√¥ng tin ƒë∆∞·ª£c t·ªâ l·ªá th·∫Øng khi ƒë·ªïi c√°nh c·ª≠a l√† 66%. UCC c≈©ng bi·∫øt v·∫≠y, ch√≠nh v√¨ th·∫ø ch√∫ng m√¨nh ƒë√£ ph·∫£i t·ª± th√¢n x√°c minh th·∫≠t ch·∫Øc ch·∫Øn xem ƒëi·ªÅu ƒë√≥ c√≥ ƒë√∫ng kh√¥ng. B·∫±ng c√°ch m√¥ ph·ªèng l·∫°i b√†i to√°n, ch√∫ng m√¨nh ƒë√£ kh√°m ph√° ra ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÉm hay v√† cu·ªëi c√πng c≈©ng hi·ªÉu ƒë∆∞·ª£c c√°ch ho·∫°t ƒë·ªông c·ªßa n√≥. Qu√° tr√¨nh th·ª±c hi·ªán: ƒê·ªÉ m√¥ ph·ªèng tr√≤ ch∆°i n√†y, ch√∫ng ta c·∫ßn th·ª±c hi·ªán nh·ªØng b∆∞·ªõc ch√≠nh sau:  X√°c ƒë·ªãnh m·ªôt c·ª≠a ƒë√∫ng.  Ng∆∞·ªùi ch∆°i ch·ªçn m·ªôt c·ª≠a.  MC m·ªü ra m·ªôt c·ª≠a sai.  Ng∆∞·ªùi ch∆°i c√≥ quy·ªÅn ch·ªçn l·∫°i c·ª≠a ho·∫∑c gi·ªØ nguy√™n l·ª±a ch·ªçn ban ƒë·∫ßu.  Ki·ªÉm tra ng∆∞·ªùi ch∆°i c√≥ ch·ªçn ƒë√∫ng c·ª≠a hay kh√¥ng. ƒê·∫ßu ti√™n ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng th∆∞ vi·ªán random: 12# Import th∆∞ vi·ªán random. import randomTi·∫øp theo t·∫°o m·ªôt function ƒë·ªÉ m√¥ ph·ªèng vi·ªác ch·ªçn m·ªôt c√°nh c·ª≠a ng·∫´u nhi√™n. ·ªû ƒë√¢y, ch√∫ng ta s·ª≠ d·ª•ng h√†m random. randint(max, min) ƒë·ªÉ l·∫•y ng·∫´u nhi√™n m·ªôt s·ªë nguy√™n t·ª´ 1 ƒë·∫øn 3 ƒë·∫°i di·ªán cho ba c√°nh c·ª≠a: 123# Ch·ªçn m·ªôt c·ª≠a ng·∫´u nhi√™n s·ªë t·ª´ 1 -&gt; 3. def choose():  return random. randint(1, 3)T·∫°o m·ªôt function ƒë·ªÉ ch·ªçn ra m·ªôt c√°ch c·ª≠a ng·∫´u nhi√™n kh√°c v·ªõi c√°c c√°nh c·ª≠a ƒë√£ ƒë∆∞·ª£c ch·ªçn. Function n√†y s·∫Ω gi√∫p ta m√¥ ph·ªèng vi·ªác MC m·ªü ra m·ªôt c√°nh c·ª≠a sai v√† kh√¥ng ph·∫£i c·ª≠a ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn: 1234567891011121314# Ch·ªçn m·ªôt c·ª≠a ng·∫´u nhi√™n trong nh·ªØng c·ª≠a ch∆∞a ƒë∆∞·ª£c ch·ªçn. def get_unchoosen_door(chosen_doors):  doors_selection = [1, 2, 3]  # Lo·∫°i b·ªè nh·ªØng c·ª≠a ƒë√£ ch·ªçn.  for choice in chosen_doors:    if choice in doors_selection:      doors_selection. remove(choice)  # N·∫øu c√≥ m·ªôt c·ª≠a ch∆∞a ƒë∆∞·ª£c ch·ªçn th√¨ ch·ªçn c·ª≠a ƒë√≥. N·∫øu kh√¥ng ch·ªçn ng·∫´u nhi√™n 1 trong 2 c·ª≠a c√≤n l·∫°i.  if len(doors_selection) == 1:    return doors_selection[0]  else:    return doors_selection[random. randint(0, 1)]Ti·∫øp theo ch√∫ng ta s·∫Ω t·∫°o list RESULTS ƒë·ªÉ l∆∞u k·∫øt qu·∫£ c·ªßa c√°c l·∫ßn th·ª≠. Variable WINS ƒë·ªÉ l∆∞u s·ªë l∆∞·ª£t th·∫Øng. Variable STRATEGY ƒë·ªÉ l∆∞u chi·∫øn thu·∫≠t m√† ng∆∞·ªùi ch∆°i ch·ªçn: 123456789# List ƒë·ªÉ l∆∞u l·∫°i c√°c k·∫øt qu·∫£RESULTS = []# Variable l∆∞u l·∫°i s·ªë l∆∞·ª£t th·∫ØngWINS = 0# Strategy (chi·∫øn thu·∫≠t) 0: gi·ªØ nguy√™n l·ª±a ch·ªçn ban ƒë·∫ßu. # strategy (chi·∫øn thu·∫≠t) 1: ƒë·ªïi c·ª≠a. STRATEGY = 1B√¢y gi·ªù ch√∫ng ta s·∫Ω v√†o ph·∫ßn ch√≠nh v√† m√¥ ph·ªèng tr√≤ ch∆°i. ƒê·∫ßu ti√™n t·∫°o m·ªôt variable ƒë·ªÉ l∆∞u s·ªë l∆∞·ª£t th·ª≠. C√°c b·∫°n c√≥ th·ªÉ t√πy ch·ªânh s·ªë l∆∞·ª£t th·ª≠ theo mong mu·ªën c·ªßa m√¨nh: 12# S·ªë l∆∞·ª£t th·ª≠TEST_SAMPLE = 100000Ch√∫ng ta s·∫Ω l·∫∑p l·∫°i tr√≤ ch∆°i (TEST_SAMPLE) l·∫ßn b·∫±ng v√≤ng for loop v√† l∆∞u l·∫°i k·∫øt qu·∫£ c·ªßa m·ªói l∆∞·ª£t. Trong m·ªói l∆∞·ª£t ch∆°i, ch√∫ng ta s·∫Ω th·ª±c hi·ªán 5 b∆∞·ªõc ƒë√£ ƒë·ªÅ c·∫≠p ·ªü tr√™n: 1for test in range(TEST_SAMPLE):Variable result ·ªü ƒë√¢y d√πng ƒë·ªÉ l∆∞u l·∫°i k·∫øt qu·∫£ c·ªßa m·ªói m·ªói l∆∞·ª£t ch∆°i: 12  # Variable l∆∞u l·∫°i k·∫øt qu·∫£ c·ªßa m·ªói l∆∞·ª£t.  result =   B∆∞·ªõc 1: ch·ªçn ra m·ªôt c·ª≠a ƒë√∫ng, vi·ªác n√†y gi·ªëng nh∆∞ ch√∫ng ta ƒëang x√°o tr·ªôn v·ªã tr√≠ c·ªßa c√°c c√°nh c·ª≠a. ·ªû ƒë√¢y ch√∫ng ta s·∫Ω d√πng h√†m choose() ƒë∆∞·ª£c t·∫°o ·ªü tr√™n ƒë·ªÉ m√¥ ph·ªèng vi·ªác ƒë√≥: 12  # Ch·ªçn ng·∫´u nhi√™n m·ªôt c·ª≠a ƒë√∫ng.  correct_door = choose()B∆∞·ªõc 2: ng∆∞·ªùi ch∆°i ch·ªçn m·ªôt c√°nh c·ª≠a ng·∫´u nhi√™n. Ch√∫ng ta l·∫°i d√πng h√†m choose(): 12  # Ng∆∞·ªùi ch∆°i ch·ªçn m·ªôt c·ª≠a.  first_choice = choose()B∆∞·ªõc 3: MC s·∫Ω m·ªü ra m·ªôt c·ª≠a sai. L∆ØU √ù: MC s·∫Ω lu√¥n m·ªü ra c·ª≠a sai v√† kh√°c v·ªõi l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i. V√¨ v·∫≠y ch√∫ng ta d√πng h√†m get_unchoosen_door() ƒë√£ t·∫°o v√† th√™m v√†o argument l√† m·ªôt list g·ªìm l·ª±a ch·ªçn ƒë·∫ßu ti√™n c·ªßa ng∆∞·ªùi ch∆°i v√† c√°nh c·ª≠a ƒë√∫ng [first_choice, correct_door]. H√†m get_unchoosen_door() s·∫Ω lo·∫°i b·ªè nh·ªØng l·ª±a ch·ªçn trong list ƒë√≥ v√† tr·∫£ l·∫°i c√°nh c·ª≠a c√≤n l·∫°i: 123  # MC m·ªü m·ªôt ra m·ªôt c·ª≠a sai.  # L∆∞u √Ω: mc lu√¥n m·ªü ra c·ª≠a sai v√† kh√¥ng ph·∫£i l√† c·ª≠a ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn.  incorrect_door = get_unchoosen_door([first_choice, correct_door])Ch√∫ng ta th√™m l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i, MC, c·ª≠a ƒë√∫ng v√†o variable result ƒë·ªÉ l∆∞u l·∫°i. ·ªû ƒë√¢y c√≥ d√πng m·ªôt t√≠nh nƒÉng r·∫•t hay trong python ƒë√≥ l√† template string ƒë·ªÉ ch√®n c√°c d·ªØ li·ªáu v√†o gi·ªØa m·ªôt string m√† kh√¥ng c·∫ßn c·ªông c√°c string l·∫°i. ƒê·ªÉ s·ª≠ d·ª•ng template string, ta th√™m ch·ªØ ‚Äúf‚Äù ƒë·∫±ng tr∆∞·ªõc m·ªôt string b√¨nh th∆∞·ªùng; c√°c bi·∫øn ƒë∆∞·ª£c ch√®n th√™m s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t trong {}: 12  # L∆∞u l·∫°i l·ª±a ch·ªçn.  result += f 1st choice: {first_choice} | incorrect door: {incorrect_door} | correct door: {correct_door} B∆∞·ªõc 4: Ng∆∞·ªùi ch∆°i c√≥ quy·ªÅn ch·ªçn l·∫°i c·ª≠a ho·∫∑c gi·ªØ nguy√™n l·ª±a ch·ªçn ban ƒë·∫ßu. N·∫øu d√πng chi·∫øn thu·∫≠t ƒë·ªïi c·ª≠a, ch√∫ng ta l·∫°i s·ª≠ d·ª•ng h√†m get_unchoosen_door() ƒë·ªÉ ch·ªçn m·ªôt c√°nh c·ª≠a kh√°c v·ªõi l·ª±a ch·ªçn ban ƒë·∫ßu v√† c√°nh c·ª≠a sai do MC m·ªü ([first_choice, incorrect_door]). N·∫øu kh√¥ng, ng∆∞·ªùi ch∆°i s·∫Ω gi·ªØ nguy√™n c·ª≠a ban ƒë·∫ßu. Ta l∆∞u l·ª±a ch·ªçn n√†y l·∫°i v√†o variable result: 12345678  if STRATEGY:    # N·∫øu ch·ªçn chi·∫øn thu·∫≠t 1 ng∆∞·ªùi ch∆°i s·∫Ω ƒë·ªïi c·ª≠a.    final_choice = get_unchoosen_door([first_choice, incorrect_door])    result += f  | final choice: {final_choice}   else:    # N·∫øu ch·ªçn chi·∫øn thu·∫≠t 0 ng∆∞·ªùi ch∆°i s·∫Ω gi·ªØ nguy√™n l·ª±a ch·ªçn ban ƒë·∫ßu.    final_choice = first_choice    result +=   | final choice: unchanged B∆∞·ªõc 5: Ki·ªÉm tra ng∆∞·ªùi ch∆°i c√≥ ch·ªçn ƒë√∫ng c·ª≠a hay kh√¥ng v√† l∆∞u l·∫°i k·∫øt qu·∫£: 123456  if final_choice == correct_door:    # N·∫øu ng∆∞·ªùi ch∆°i ch·ªçn ƒë√∫ng c·ª≠a, tƒÉng s·ªë l∆∞·ª£t th·∫Øng l√™n 1    WINS += 1    result +=   | result: win   else:    result +=   | result: lose Th√™m k·∫øt qu·∫£ c·ªßa l∆∞·ª£t ch∆°i n√†y v√†o list c√°c k·∫øt qu·∫£: 12  # Th√™m k·∫øt qu·∫£ c·ªßa l∆∞·ª£t ch∆°i v√†o list c√°c k·∫øt qu·∫£  RESULTS. append(result)V·∫≠y l√† ch√∫ng ta ƒë√£ ho√†n th√†nh vi·ªác m√¥ ph·ªèng tr√≤ ch∆°i, ti·∫øp theo ch√∫ng ta s·∫Ω in ra k·∫øt qu·∫£ nh·∫≠n ƒë∆∞·ª£c. T·∫°o m·ªôt v√≤ng for loop v·ªõi s·ªë loop t√πy √Ω c√°c b·∫°n ƒë·ªÉ in ra c√°c k·∫øt qu·∫£: 123# In ra m·ªôt s·ªë k·∫øt qu·∫£ m·∫´ufor r in range(5):  print(RESULTS[r])Ch√∫ng ta c≈©ng c√≥ th·ªÉ in ra th√™m m·ªôt s·ªë th√¥ng tin t·ªïng h·ª£p. ·ªû ƒë√¢y c≈©ng c√≥ m·ªôt t√≠nh nƒÉng h·ªØu √≠ch c·ªßa Python ƒë√≥ l√† inline if else. C·∫•u tr√∫c inline if else nh∆∞ sau: *(k·∫øt qu·∫£ n·∫øu ƒëi·ªÅu ki·ªán ƒë√∫ng)* if *(ƒëi·ªÅu ki·ªán)* else *(k·∫øt qu·∫£ n·∫øu ƒëi·ªÅu ki·ªán sai)* T√≠nh nƒÉng n√†y r·∫•t h·ªØu √≠ch trong c√°c tr∆∞·ªùng h·ª£p b·∫°n c·∫ßn tr·∫£ l·∫°i m·ªôt k·∫øt qu·∫£ nhanh v·ªõi ƒëi·ªÅu ki·ªán ƒë∆°n gi·∫£n: 12345# In ra t·ªïng k·∫øt. print(f Test sample: {TEST_SAMPLE} )print(f Strategy: {STRATEGY} ({'change door when offered' if STRATEGY else 'do not change door when offered'}) )print(f Wins: {WINS} )print(f Winning probability: {WINS / TEST_SAMPLE} )B√¢y gi·ªù ch·ªâ c√≤n b∆∞·ªõc ch·∫°y th√¥i :)) C√°c b·∫°n nh·ªõ ch·ªânh variable STRATEGY (chi·∫øn thu·∫≠t) ƒë·ªÉ xem k·∫øt qu·∫£ nh√©: ƒê√∫ng theo d·ª± ƒëo√°n, n·∫øu ng∆∞·ªùi ch∆°i gi·ªØ nguy√™n l·ª±a ch·ªçn ban ƒë·∫ßu c·ªßa m√¨nh v√† kh√¥ng thay ƒë·ªïi c·ª≠a th√¨ t·ª∑ l·ªá th·∫Øng s·∫Ω l√† 1/3: C√≤n n·∫øu ng∆∞·ªùi ng∆∞·ªùi ch∆°i ch·ªçn l·∫°i c√°nh c·ª≠a kh√°c th√¨ t·ª∑ l·ªá th·∫Øng l√† 2/3: Nh∆∞ v·∫≠y l√† ch√∫ng ta ƒë√£ ho√†n th√†nh vi·ªác ‚Äútest th·ª≠‚Äù Monty Hall c√≥ ƒë√∫ng kh√¥ng. C√°c b·∫°n h√£y tho·∫£i m√°i ch·ªânh s·ª≠a code theo √Ω m√¨nh nh√© v√† xem k·∫øt qu·∫£ s·∫Ω thay ƒë·ªïi nh∆∞ n√†o nh√©. M·ªôt g·ª£i √Ω nh·ªè: ch∆∞∆°ng tr√¨nh ·ªü tr√™n, MC lu√¥n ch·ªçn c·ª≠a sai v√† kh√°c v·ªõi l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i; n·∫øu ng∆∞·ªùi ch∆°i ch·ªçn c·ª≠a sai v√† MC m·ªü c·ª≠a ƒë√≥ th√¨ t·ª∑ l·ªá th·∫Øng khi ng∆∞·ªùi ch∆°i ch·ªçn l·∫°i c·ª≠a l√† bao nhi√™u? M·ªçi ng∆∞·ªùi h√£y th·ª≠ ch·ªânh s·ª≠a code v√† t√¨m ra k·∫øt qu·∫£ nh√©. Qua b√†i vi·∫øt n√†y, UCC mong m·ªçi ng∆∞·ªùi c√≥ th·ªÉ t√¨m ƒë∆∞·ª£c nh·ªØng m·ª•c ƒë√≠ch s√°ng t·∫°o ƒë·ªÉ s·ª≠ d·ª•ng Python: c√≥ th·ªÉ l√† ‚Äútest th·ª≠‚Äù m·ªôt c√¢u ƒë·ªë n√†o ƒë√≥, ‚Ä¶. Mong m·ªçi ng∆∞·ªùi c√≥ th·ªÉ th·∫•y Python kh√¥ng ch·ªâ d√πng ƒë·ªÉ vi·∫øt nh·ªØng thu·∫≠t to√°n nh√†m ch√°n :( m√† c√≤n l√† c√¥ng c·ª• h·ªØu √≠ch trong m·ªçi vi·ªác. D∆∞·ªõi ƒë√¢y l√† code ƒë·∫ßy ƒë·ªß: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980# Import th∆∞ vi·ªán random. import random# Ch·ªçn m·ªôt c·ª≠a ng·∫´u nhi√™n s·ªë t·ª´ 1 -&gt; 3. def choose():  return random. randint(1, 3)# Ch·ªçn m·ªôt c·ª≠a ng·∫´u nhi√™n trong nh·ªØng c·ª≠a ch∆∞a ƒë∆∞·ª£c ch·ªçn. def get_unchoosen_door(chosen_doors):  doors_selection = [1, 2, 3]  # Lo·∫°i b·ªè nh·ªØng c·ª≠a ƒë√£ ch·ªçn.  for choice in chosen_doors:    if choice in doors_selection:      doors_selection. remove(choice)  # N·∫øu c√≥ m·ªôt c·ª≠a ch∆∞a ƒë∆∞·ª£c ch·ªçn th√¨ ch·ªçn c·ª≠a ƒë√≥. N·∫øu kh√¥ng ch·ªçn ng·∫´u nhi√™n 1 trong 2 c·ª≠a c√≤n l·∫°i.  if len(doors_selection) == 1:    return doors_selection[0]  else:    return doors_selection[random. randint(0, 1)]# List ƒë·ªÉ l∆∞u l·∫°i c√°c k·∫øt qu·∫£RESULTS = []# Variable l∆∞u l·∫°i s·ªë l∆∞·ª£t th·∫ØngWINS = 0# Strategy (chi·∫øn thu·∫≠t) 0: gi·ªØ nguy√™n l·ª±a ch·ªçn ban ƒë·∫ßu. # strategy (chi·∫øn thu·∫≠t) 1: ƒë·ªïi c·ª≠a. STRATEGY = 1# S·ªë l∆∞·ª£t th·ª≠TEST_SAMPLE = 100000for test in range(TEST_SAMPLE):  # Variable l∆∞u l·∫°i k·∫øt qu·∫£ c·ªßa m·ªói l∆∞·ª£t.  result =     # Ch·ªçn ng·∫´u nhi√™n m·ªôt c·ª≠a ƒë√∫ng.  correct_door = choose()  # Ng∆∞·ªùi ch∆°i ch·ªçn m·ªôt c·ª≠a.  first_choice = choose()  # MC m·ªü m·ªôt ra m·ªôt c·ª≠a sai.  # L∆∞u √Ω: mc lu√¥n m·ªü ra c·ª≠a sai v√† kh√¥ng ph·∫£i l√† c·ª≠a ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn.  incorrect_door = get_unchoosen_door([first_choice, correct_door])  # L∆∞u l·∫°i l·ª±a ch·ªçn.  result += f 1st choice: {first_choice} | incorrect door: {incorrect_door} | correct door: {correct_door}   if STRATEGY:    # N·∫øu ch·ªçn chi·∫øn thu·∫≠t 1 ng∆∞·ªùi ch∆°i s·∫Ω ƒë·ªïi c·ª≠a.    final_choice = get_unchoosen_door([first_choice, incorrect_door])    result += f  | final choice: {final_choice}   else:    # N·∫øu ch·ªçn chi·∫øn thu·∫≠t 0 ng∆∞·ªùi ch∆°i s·∫Ω gi·ªØ nguy√™n l·ª±a ch·ªçn ban ƒë·∫ßu.    final_choice = first_choice    result +=   | final choice: unchanged   if final_choice == correct_door:    # N·∫øu ng∆∞·ªùi ch∆°i ch·ªçn ƒë√∫ng c·ª≠a, tƒÉng s·ªë l∆∞·ª£t th·∫Øng l√™n 1    WINS += 1    result +=   | result: win   else:    result +=   | result: lose   # Th√™m k·∫øt qu·∫£ c·ªßa l∆∞·ª£t ch∆°i v√†o list c√°c k·∫øt qu·∫£  RESULTS. append(result)# In ra m·ªôt s·ªë k·∫øt qu·∫£ m·∫´ufor r in range(5):  print(RESULTS[r])# In ra t·ªïng k·∫øt. print(f Test sample: {TEST_SAMPLE} )print(f Strategy: {STRATEGY} ({'change door when offered' if STRATEGY else 'do not change door when offered'}) )print(f Wins: {WINS} )print(f Winning probability: {WINS / TEST_SAMPLE} )test. py "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});